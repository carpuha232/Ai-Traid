"""
üé® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –ø–∞–Ω–µ–ª–µ–π, –∫–∞—Ä—Ç–æ—á–µ–∫
"""

import tkinter as tk
from tkinter import ttk, scrolledtext
from datetime import datetime, timedelta
import time
from typing import Dict, List, Optional
import random

CURSOR_BG = '#181A20'
CURSOR_CARD = '#23272F'
CURSOR_TEXT = '#e0e0e0'
CURSOR_FONT = ('Inter', 11)
CURSOR_FONT_BOLD = ('Inter', 11, 'bold')
CURSOR_RADIUS = 8
# 1. –í —à–∞–ø–∫–µ font=('Inter', 10, 'bold')
CURSOR_FONT_HEADER = ('Inter', 9)
# 1. –ù–æ–≤—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è —à–∞–ø–∫–∏ –∏ –Ω–∏–∂–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
CURSOR_FONT_FOOTER = ('Inter', 9)

class DashboardUI:
    """UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self, dashboard_core):
        self.core = dashboard_core
        self.colors = dashboard_core.colors
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.coin_cards = {}
        self.trading_stats_labels = {}
        self.stats_labels = {}
        self.terminal_text = None
        self.positions_table = None
        self.ticker_canvas = None
        self.ticker_position = 0
        self.market_data = {}
        self.status_var = None
        self.trading_time_label = None
        self.time_label = None
        self.positions_frame = None
        self.start_sim_button = None
        self.stop_sim_button = None
    
    def setup_compact_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—É—Å—Ç—ã–º –º–µ—Å—Ç–æ–º —Å–Ω–∏–∑—É 20% –≤—ã—Å–æ—Ç—ã"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.core.root, bg=CURSOR_BG)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ —Å–Ω–∏–∑—É –ü–ï–†–í–´–ú (20% –≤—ã—Å–æ—Ç—ã)
        self.create_empty_bottom_space(main_frame)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –í–¢–û–†–´–ú (80% –≤—ã—Å–æ—Ç—ã)
        self.create_main_content(main_frame)
    
    def create_main_content(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (80% –≤—ã—Å–æ—Ç—ã)"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ —Å–≤–µ—Ä—Ö—É
        content_frame = tk.Frame(parent, bg=CURSOR_BG)
        content_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –ï–î–ò–ù–ê–Ø —à–∞–ø–∫–∞ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å
        self.create_unified_header_panel(content_frame)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –º–æ–Ω–µ—Ç–∞–º–∏ –∏ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–æ–π
        main_area = tk.Frame(content_frame, bg=CURSOR_BG)
        main_area.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # –õ–µ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –º–æ–Ω–µ—Ç–∞–º–∏
        coins_frame = tk.Frame(main_area, bg=CURSOR_BG)
        coins_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –º–æ–Ω–µ—Ç
        self.create_compact_grid(coins_frame)
        
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–∂–¥—É –º–æ–Ω–µ—Ç–∞–º–∏ –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º ---
        self.stats_bar_frame = tk.Frame(content_frame, bg=CURSOR_BG)
        self.stats_bar_frame.pack(fill=tk.X, pady=(2, 2))
        self.create_trading_stats_block(self.stats_bar_frame)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –ï–î–ò–ù–´–ú —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
        self.create_right_column(main_area)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_compact_status(content_frame)
    
    def create_unified_header_panel(self, parent):
        header_panel = tk.Frame(parent, bg=CURSOR_BG)
        header_panel.pack(fill=tk.X, pady=(0, 3))
        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
        top_row = tk.Frame(header_panel, bg=CURSOR_BG)
        top_row.grid(row=0, column=0, sticky='ew')
        top_row.grid_columnconfigure(0, weight=1)
        top_row.grid_columnconfigure(1, weight=1)
        top_row.grid_columnconfigure(2, weight=1)
        controls_frame = tk.Frame(top_row, bg=CURSOR_BG)
        controls_frame.grid(row=0, column=0, padx=1, pady=0, sticky='ew')
        self.create_trading_controls_block(controls_frame)
        status_label = tk.Label(top_row, text='–°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–ê', font=CURSOR_FONT_HEADER, fg=CURSOR_TEXT, bg=CURSOR_BG)
        status_label.grid(row=0, column=1, padx=1, pady=0, sticky='ew')
        self.trading_status_label = status_label
        self.trading_time_label = tk.Label(top_row, text='', font=CURSOR_FONT_HEADER, fg=CURSOR_TEXT, bg=CURSOR_BG)
        self.trading_time_label.grid(row=0, column=2, padx=1, pady=0, sticky='ew')
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        bottom_row = tk.Frame(header_panel, bg=CURSOR_BG)
        bottom_row.grid(row=1, column=0, sticky='ew')
        bottom_row.grid_columnconfigure(0, weight=2)
        bottom_row.grid_columnconfigure(1, weight=2)
        bottom_row.grid_columnconfigure(2, weight=2)
        bottom_row.grid_columnconfigure(3, weight=4)
        period_frame = tk.Frame(bottom_row, bg=CURSOR_BG)
        period_frame.grid(row=0, column=0, padx=0, pady=0, sticky='ew')
        self.create_period_selection_block(period_frame)
        tf_frame = tk.Frame(bottom_row, bg=CURSOR_BG)
        tf_frame.grid(row=0, column=1, padx=0, pady=0, sticky='ew')
        self.create_timeframe_selection(tf_frame)
        speed_frame = tk.Frame(bottom_row, bg=CURSOR_BG)
        speed_frame.grid(row=0, column=2, padx=0, pady=0, sticky='ew')
        self.create_simulation_controls(speed_frame)
        # –£–¥–∞–ª—è–µ–º stats_frame –∏ –≤—ã–∑–æ–≤ self.create_trading_stats_block(stats_frame)

    def create_trading_controls_block(self, header_canvas):
        """
        –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π (–∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å)
        """
        trading_controls_frame = tk.Frame(header_canvas, bg=CURSOR_BG)
        trading_controls_frame.pack(side=tk.LEFT, padx=8, pady=8)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        for widget in trading_controls_frame.winfo_children():
            widget.destroy()
            
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ (–±–µ–ª—ã–π —Ñ–æ–Ω, –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)
        self.start_trading_btn = tk.Button(trading_controls_frame, text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –¢–û–†–ì–û–í–õ–Æ", 
                                          font=CURSOR_FONT_HEADER,
                                          bg=CURSOR_CARD, fg=CURSOR_TEXT, 
                                          activebackground="#2d2d2d", activeforeground=CURSOR_TEXT,
                                          borderwidth=1, relief=tk.RIDGE, highlightthickness=0,
                                          command=self.start_aggressive_trading)
        self.start_trading_btn.pack(side='left', padx=2, pady=3)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–±–µ–ª—ã–π —Ñ–æ–Ω, –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)
        self.stop_trading_btn = tk.Button(trading_controls_frame, text="‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨", 
                                         font=CURSOR_FONT_HEADER,
                                         bg=CURSOR_CARD, fg=CURSOR_TEXT, 
                                         activebackground="#2d2d2d", activeforeground=CURSOR_TEXT,
                                         borderwidth=1, relief=tk.RIDGE, highlightthickness=0,
                                         command=self.stop_aggressive_trading)
        self.stop_trading_btn.pack(side='left', padx=2, pady=3)
        
        # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_status_label = tk.Label(trading_controls_frame, text="–°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–ê", 
                                            font=CURSOR_FONT_HEADER, fg=CURSOR_TEXT, 
                                            bg=CURSOR_BG)
        self.trading_status_label.pack(side='left', padx=4)
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        self.analyze_knowledge_btn = tk.Button(trading_controls_frame, text="üîç –ê–Ω–∞–ª–∏–∑", 
                                              font=CURSOR_FONT_HEADER,
                                              bg=CURSOR_CARD, fg=CURSOR_TEXT, 
                                              activebackground="#2d2d2d", activeforeground=CURSOR_TEXT,
                                              borderwidth=1, relief=tk.RIDGE, highlightthickness=0,
                                              command=self.analyze_knowledge_base)
        self.analyze_knowledge_btn.pack(side='left', padx=2, pady=3)

    def create_trading_stats_block(self, parent):
        """
        –ë–ª–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        """
        trading_stats = [
            ("üí∞ –ë–∞–ª–∞–Ω—Å: $100.00", CURSOR_TEXT),
            ("üìà –í–∏–Ω—Ä–µ–π—Ç: 0.0%", CURSOR_TEXT),
            ("üìä –°–¥–µ–ª–æ–∫: 0", CURSOR_TEXT),
            ("üíµ PnL: $0.00", CURSOR_TEXT),
            ("üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 0", CURSOR_TEXT),
            ("‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: 0", CURSOR_TEXT),
            ("‚ö° –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: 0", CURSOR_TEXT)
        ]
        self.trading_stats_labels = {}
        for i, (text, color) in enumerate(trading_stats):
            label = tk.Label(parent, text=text, 
                           font=CURSOR_FONT_HEADER,
                           fg=color, 
                           bg=CURSOR_BG)
            label.pack(side=tk.LEFT, padx=3)
            self.trading_stats_labels[text] = label

    def create_second_row_stats(self, parent):
        """
        –ë–ª–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤—Ç–æ—Ä–æ–π —Ä—è–¥)
        """
        second_row_frame = tk.Frame(parent, bg=CURSOR_BG)
        second_row_frame.pack(fill=tk.X, padx=0, pady=(0, 0))
        second_row_stats = [
            ("üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 0", CURSOR_TEXT),
            ("‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: 0", CURSOR_TEXT),
            ("‚ö° –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: 0", CURSOR_TEXT)
        ]
        for i, (text, color) in enumerate(second_row_stats):
            label = tk.Label(second_row_frame, text=text, 
                           font=CURSOR_FONT_BOLD,
                           fg=color, 
                           bg=CURSOR_BG)
            label.pack(side=tk.LEFT, padx=10)
            self.trading_stats_labels[text] = label

    def create_period_selection_block(self, parent):
        """
        –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
        """
        period_frame = tk.Frame(parent, bg=CURSOR_BG)
        period_frame.pack(side=tk.LEFT, padx=0, pady=0)
        
        period_label = tk.Label(period_frame, text="–ü–µ—Ä–∏–æ–¥:", font=CURSOR_FONT_HEADER, fg=CURSOR_TEXT, bg=CURSOR_BG)
        period_label.pack(side=tk.LEFT, padx=(0, 1), pady=0)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        calendar_frame = tk.Frame(period_frame, bg=CURSOR_BG)
        calendar_frame.pack(side=tk.LEFT)
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        from_label = tk.Label(calendar_frame, text="–û—Ç:", 
                            font=CURSOR_FONT_HEADER,
                            fg=CURSOR_TEXT, 
                            bg=CURSOR_BG)
        from_label.pack(side=tk.LEFT, padx=(0, 1), pady=0)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–µ—Å—è—Ü–∞ –Ω–∞—á–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã)
        self.start_month_var = tk.StringVar(value="07")
        start_month_menu = tk.OptionMenu(calendar_frame, self.start_month_var,
                                       "07", "08", "09", "10", "11", "12",  # 2024
                                       "01", "02", "03", "04", "05")        # 2025
        start_month_menu.config(width=2, font=CURSOR_FONT_HEADER, bg=CURSOR_CARD, fg=CURSOR_TEXT, borderwidth=1, relief=tk.RIDGE, activebackground="#2d2d2d")
        start_month_menu.pack(side=tk.LEFT, padx=1, pady=0)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥–æ–¥–∞ –Ω–∞—á–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã)
        self.start_year_var = tk.StringVar(value="2024")
        start_year_menu = tk.OptionMenu(calendar_frame, self.start_year_var,
                                      "2024", "2025")
        start_year_menu.config(width=4, font=CURSOR_FONT_HEADER, bg=CURSOR_CARD, fg=CURSOR_TEXT, borderwidth=1, relief=tk.RIDGE, activebackground="#2d2d2d")
        start_year_menu.pack(side=tk.LEFT, padx=1, pady=0)
        
        # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
        to_label = tk.Label(calendar_frame, text="–î–æ:", 
                          font=CURSOR_FONT_HEADER,
                          fg=CURSOR_TEXT, 
                          bg=CURSOR_BG)
        to_label.pack(side=tk.LEFT, padx=(1, 1), pady=0)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–µ—Å—è—Ü–∞ –∫–æ–Ω—Ü–∞ (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã)
        self.end_month_var = tk.StringVar(value="05")
        end_month_menu = tk.OptionMenu(calendar_frame, self.end_month_var,
                                     "07", "08", "09", "10", "11", "12",  # 2024
                                     "01", "02", "03", "04", "05")        # 2025
        end_month_menu.config(width=2, font=CURSOR_FONT_HEADER, bg=CURSOR_CARD, fg=CURSOR_TEXT, borderwidth=1, relief=tk.RIDGE, activebackground="#2d2d2d")
        end_month_menu.pack(side=tk.LEFT, padx=1, pady=0)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥–æ–¥–∞ –∫–æ–Ω—Ü–∞ (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã)
        self.end_year_var = tk.StringVar(value="2025")
        end_year_menu = tk.OptionMenu(calendar_frame, self.end_year_var,
                                    "2024", "2025")
        end_year_menu.config(width=4, font=CURSOR_FONT_HEADER, bg=CURSOR_CARD, fg=CURSOR_TEXT, borderwidth=1, relief=tk.RIDGE, activebackground="#2d2d2d")
        end_year_menu.pack(side=tk.LEFT, padx=1, pady=0)
        
        # –ú–∏–Ω–∏-–∫–Ω–æ–ø–∫–∞ ‚úì –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞
        apply_btn = tk.Button(period_frame, text="‚úì", font=CURSOR_FONT_HEADER, bg=CURSOR_BG, fg=CURSOR_TEXT, borderwidth=0, relief=tk.FLAT, padx=1, pady=0, width=2, height=1, command=self.apply_calendar_period, highlightthickness=0, activebackground=CURSOR_BG)
        apply_btn.pack(side=tk.LEFT, padx=(2, 0), pady=0)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        check_btn = tk.Button(calendar_frame, text="üìä", 
                            font=("Arial", 10, "bold"),
                            bg=CURSOR_BG, 
                            fg=CURSOR_TEXT,
                            relief=tk.FLAT, bd=0, padx=6, pady=2,
                            command=self.check_available_data)
        check_btn.pack(side=tk.LEFT, padx=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.create_tooltip(apply_btn, "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        self.create_tooltip(check_btn, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã)
        self.create_simulation_controls(period_frame)
        # self.create_timeframe_selection(period_frame) # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤

    def create_simulation_controls(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        speed_frame = tk.Frame(parent, bg=CURSOR_BG)
        speed_frame.pack(side=tk.LEFT, padx=(20, 0))
        speed_label = tk.Label(speed_frame, text="–°–∫–æ—Ä–æ—Å—Ç—å:", font=CURSOR_FONT_HEADER, fg=CURSOR_TEXT, bg=CURSOR_BG)
        speed_label.pack(side=tk.LEFT, padx=(0, 8))
        self.sim_speed_var = tk.StringVar(value="1:1")
        speed_options = [
            ("–ú–∏–Ω—É—Ç–∞ = –º–∏–Ω—É—Ç–µ", "1:1"),
            ("–ú–∏–Ω—É—Ç–∞ = —á–∞—Å—É", "1:60"),
            ("–ú–∏–Ω—É—Ç–∞ = 1 –¥–Ω—é", "1:1440")
        ]
        speed_menu = tk.OptionMenu(speed_frame, self.sim_speed_var,
                                  *[opt[0] for opt in speed_options])
        speed_menu.config(font=("Arial", 11), bg=CURSOR_BG,
                         fg=CURSOR_TEXT,
                         highlightthickness=0, relief=tk.FLAT, width=16)
        speed_menu.pack(side=tk.LEFT)
        self.sim_speed_map = {opt[0]: opt[1] for opt in speed_options}

    def create_timeframe_selection(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        tf_frame = tk.Frame(parent, bg=CURSOR_BG)
        tf_frame.pack(side=tk.LEFT, padx=(20, 0))
        tf_label = tk.Label(tf_frame, text="–¢–§:", font=CURSOR_FONT_HEADER, fg=CURSOR_TEXT, bg=CURSOR_BG)
        tf_label.pack(side=tk.LEFT, padx=(0, 8))
        self.timeframe_options = ["1m", "5m", "15m", "1h", "4h", "1d"]
        self.timeframe_vars = {}
        self.selected_timeframes = []
        def on_tf_change():
            self.selected_timeframes = [tf for tf, var in self.timeframe_vars.items() if var.get()]
        for tf in self.timeframe_options:
            var = tk.BooleanVar(value=(tf in ["5m", "1h"]))  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã 5m –∏ 1h
            cb = tk.Checkbutton(tf_frame, text=tf, variable=var,
                                font=CURSOR_FONT_HEADER,
                                fg=CURSOR_TEXT,
                                bg=CURSOR_CARD,
                                selectcolor=CURSOR_CARD,
                                activebackground="#2d2d2d",
                                activeforeground=CURSOR_TEXT,
                                borderwidth=1, relief=tk.RIDGE, command=on_tf_change)
            cb.pack(side=tk.LEFT, padx=2)
            self.timeframe_vars[tf] = var
        on_tf_change()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤



    def create_status_block(self, header_canvas):
        """
        –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ API –∏ –±–∞–ª–∞–Ω—Å–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤
        """
        # –°—Ç–∞—Ç—É—Å API —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        api_status_label = tk.Label(header_canvas, textvariable=self.core.api_status_var, 
                                  font=("Arial", 6, "bold"), 
                                  fg=CURSOR_TEXT, 
                                  bg=CURSOR_BG)
        api_status_label.pack(side=tk.RIGHT, padx=4, pady=(0, 25))
        
        # –ë–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ API
        futures_balance_label = tk.Label(header_canvas, textvariable=self.core.futures_balance_var, 
                                  font=("Arial", 6, "bold"), 
                                  fg=CURSOR_TEXT, 
                                  bg=CURSOR_BG)
        futures_balance_label.pack(side=tk.RIGHT, padx=4, pady=(0, 25))

    def create_time_block(self, header_canvas):
        """
        –ë–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        """
        # –í—Ä–µ–º—è —Å–ø—Ä–∞–≤–∞
        self.trading_time_label = tk.Label(header_canvas, text="", 
                                         font=("Arial", 6, "bold"),
                                         fg=CURSOR_TEXT, 
                                         bg=CURSOR_BG)
        self.trading_time_label.pack(side=tk.RIGHT, padx=8, pady=(0, 25))

    def start_time_update(self):
        """
        –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        """
        def update_trading_time():
            current_time = datetime.now().strftime("%H:%M:%S")
            if hasattr(self, 'trading_time_label') and self.trading_time_label:
                self.trading_time_label.config(text=f"üïê {current_time}")
            self.core.root.after(1000, update_trading_time)
        update_trading_time()
    
    def create_empty_bottom_space(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤–Ω–∏–∑—É (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)"""
        # –ü–∞–Ω–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π (20% –æ—Ç 1080px = 216px)
        positions_frame = tk.Frame(parent, bg=CURSOR_BG, height=216)
        positions_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(10, 0))
        positions_frame.pack_propagate(False)

        # –£–î–ê–õ–Ø–ï–ú –ó–ê–ì–û–õ–û–í–û–ö
        # positions_title = tk.Label(positions_frame, text="üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏", 
        #                          font=CURSOR_FONT_FOOTER,
        #                          fg=CURSOR_TEXT, 
        #                          bg=CURSOR_CARD)
        # positions_title.pack(anchor=tk.W, padx=10, pady=5, fill='x')

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        columns = [
            "–°–∏–º–≤–æ–ª", "–†–∞–∑–º–µ—Ä", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", "–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–∫–∞", "–¶–µ–Ω–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", "–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏",
            "–ö–æ—ç—Ñ. –º–∞—Ä–∂–∏", "–ú–∞—Ä–∂–∞", "PnL", "–°—Ç–æ–ø-–ª–æ—Å—Å", "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç", "–î–µ–π—Å—Ç–≤–∏—è"
        ]
        style = ttk.Style()
        style.theme_use('clam')
        self.positions_table = ttk.Treeview(positions_frame, columns=columns, show="headings", height=7)
        for col in columns:
            self.positions_table.heading(col, text=col)
            self.positions_table.column(col, anchor=tk.CENTER, width=110)
        self.positions_table.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        style = ttk.Style()
        style.configure("Treeview.Heading", font=('Inter', 9, 'bold'), background=CURSOR_CARD, foreground=CURSOR_TEXT)
        style.configure("Treeview", font=('Inter', 9), rowheight=32, background=CURSOR_CARD, fieldbackground=CURSOR_CARD, foreground=CURSOR_TEXT)
        style.map("Treeview", background=[('selected', CURSOR_CARD)])

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        update_btn = tk.Button(positions_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                              command=lambda: self.update_positions_table([]), 
                              font=("Arial", 10), 
                              bg=CURSOR_BG, 
                              fg=CURSOR_TEXT)
        update_btn.pack(side=tk.RIGHT, padx=10, pady=5)

        self.positions_frame = positions_frame

        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
        self.start_positions_update()
    
    def create_trading_controls(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π"""
        trading_frame = tk.Frame(parent, bg=CURSOR_BG, relief='raised', bd=1)
        trading_frame.pack(fill='x', padx=5, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(trading_frame, text="üöÄ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–†–ì–û–í–õ–ï–ô", 
                              font=('Arial', 12, 'bold'), fg=CURSOR_TEXT, bg=CURSOR_BG)
        title_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(trading_frame, bg=CURSOR_BG)
        button_frame.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.start_trading_btn = tk.Button(button_frame, text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –¢–û–†–ì–û–í–õ–Æ", 
                                          font=('Arial', 10, 'bold'),
                                          bg=CURSOR_CARD, fg=CURSOR_TEXT, 
                                          command=self.start_aggressive_trading,
                                          relief='raised', bd=2)
        self.start_trading_btn.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.stop_trading_btn = tk.Button(button_frame, text="‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨", 
                                         font=('Arial', 10, 'bold'),
                                         bg=CURSOR_CARD, fg=CURSOR_TEXT, 
                                         command=self.stop_aggressive_trading,
                                         relief='raised', bd=2)
        self.stop_trading_btn.pack(side='left', padx=5)
        
        # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_status_label = tk.Label(trading_frame, text="–°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–ê", 
                                            font=('Arial', 10), fg=CURSOR_TEXT, bg=CURSOR_BG)
        self.trading_status_label.pack(pady=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        stats_frame = tk.Frame(trading_frame, bg=CURSOR_BG)
        stats_frame.pack(fill='x', padx=10, pady=5)
        
        # –ë–∞–ª–∞–Ω—Å
        self.balance_label = tk.Label(stats_frame, text="üí∞ –ë–∞–ª–∞–Ω—Å: $10,000.00", 
                                     font=('Arial', 9), fg=CURSOR_TEXT, bg=CURSOR_BG)
        self.balance_label.pack(anchor='w')
        
        # –í–∏–Ω—Ä–µ–π—Ç
        self.winrate_label = tk.Label(stats_frame, text="üìä –í–∏–Ω—Ä–µ–π—Ç: 0.0%", 
                                     font=('Arial', 9), fg=CURSOR_TEXT, bg=CURSOR_BG)
        self.winrate_label.pack(anchor='w')
        
        # P&L
        self.pnl_label = tk.Label(stats_frame, text="üìà P&L: $0.00", 
                                 font=('Arial', 9), fg=CURSOR_TEXT, bg=CURSOR_BG)
        self.pnl_label.pack(anchor='w')
        
        # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.positions_label = tk.Label(stats_frame, text="üìã –ü–æ–∑–∏—Ü–∏–π: 0", 
                                       font=('Arial', 9), fg=CURSOR_TEXT, bg=CURSOR_BG)
        self.positions_label.pack(anchor='w')
        
        return trading_frame

    def start_aggressive_trading(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            print("[DEBUG] –ö–Ω–æ–ø–∫–∞ –ó–ê–ü–£–°–¢–ò–¢–¨ –¢–û–†–ì–û–í–õ–Æ –Ω–∞–∂–∞—Ç–∞")
            self.add_terminal_message("[DEBUG] –ö–Ω–æ–ø–∫–∞ –ó–ê–ü–£–°–¢–ò–¢–¨ –¢–û–†–ì–û–í–õ–Æ –Ω–∞–∂–∞—Ç–∞", "DEBUG")
            if hasattr(self, 'core') and hasattr(self.core, 'logic'):
                print("[DEBUG] –í—ã–∑–æ–≤ self.core.logic.start_aggressive_trading()")
                self.add_terminal_message("[DEBUG] –í—ã–∑–æ–≤ self.core.logic.start_aggressive_trading()", "DEBUG")
                self.core.logic.start_aggressive_trading()
            else:
                print("[DEBUG] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ core.logic!")
                self.add_terminal_message("[DEBUG] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ core.logic!", "ERROR")
        except Exception as e:
            print(f"[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}", "ERROR")

    def stop_aggressive_trading(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            if hasattr(self, 'core') and hasattr(self.core, 'logic'):
                self.core.logic.stop_aggressive_trading()
            self.trading_status_label.config(text="–°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–ê", fg=CURSOR_TEXT)
            self.start_trading_btn.config(state='normal')
            self.stop_trading_btn.config(state='disabled')
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}", "ERROR")
    
    def sync_to_github(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub"""
        try:
            if hasattr(self, 'core') and hasattr(self.core, 'logic'):
                self.core.logic.sync_knowledge_to_github()
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
    
    def sync_from_github(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub"""
        try:
            if hasattr(self, 'core') and hasattr(self.core, 'logic'):
                self.core.logic.sync_knowledge_from_github()
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", "ERROR")
    
    def analyze_knowledge_base(self):
        """–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            if hasattr(self, 'core') and hasattr(self.core, 'logic'):
                self.core.logic.analyze_knowledge_base()
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", "ERROR")

    def update_trading_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            if hasattr(self, 'core') and hasattr(self.core, 'logic'):
                status = self.core.logic.get_trading_status()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if status['active']:
                    self.trading_status_label.config(text="–°—Ç–∞—Ç—É—Å: –ê–ö–¢–ò–í–ù–ê", fg=CURSOR_TEXT)
                else:
                    self.trading_status_label.config(text="–°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–ê", fg=CURSOR_TEXT)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.balance_label.config(text=f"üí∞ –ë–∞–ª–∞–Ω—Å: ${status['balance']:,.2f}")
                self.winrate_label.config(text=f"üìä –í–∏–Ω—Ä–µ–π—Ç: {status['winrate']:.1f}%")
                
                pnl_color = CURSOR_TEXT if status['total_pnl'] >= 0 else CURSOR_TEXT
                self.pnl_label.config(text=f"üìà P&L: ${status['total_pnl']:,.2f}", fg=pnl_color)
                self.positions_label.config(text=f"üìã –ü–æ–∑–∏—Ü–∏–π: {status['open_positions']}")
            
        except Exception as e:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    def create_right_column(self, parent):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º (–±–µ–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π)
        """
        right_frame = tk.Frame(parent, bg=CURSOR_BG, width=int(900*0.9))
        right_frame.pack(side='right', fill='y', padx=5, pady=5)
        right_frame.pack_propagate(False)
        
        # –¢–æ–ª—å–∫–æ —Ç–µ—Ä–º–∏–Ω–∞–ª
        terminal_frame = tk.Frame(right_frame, bg=CURSOR_BG)
        terminal_frame.pack(fill='both', expand=True, pady=0)  # —É–±—Ä–∞–Ω –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ScrolledText –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
        self.terminal_text = scrolledtext.ScrolledText(
            terminal_frame, 
            wrap=tk.WORD, 
            height=25,  # –≤—ã—à–µ
            state=tk.DISABLED,
            font=("Consolas", 11), 
            bg=CURSOR_CARD, 
            fg=CURSOR_TEXT,
            insertbackground=CURSOR_TEXT,
            selectbackground=CURSOR_CARD,
            selectforeground=CURSOR_TEXT
        )
        self.terminal_text.pack(fill='both', expand=True, padx=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ
        self.terminal_text.config(state=tk.NORMAL)
        self.terminal_text.insert(tk.END, "[–ò–ù–§–û] –¢–µ—Ä–º–∏–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–æ–ª–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n")
        self.terminal_text.insert(tk.END, "[–ò–ù–§–û] üñ±Ô∏è –ö–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –∏–ª–∏ –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–ø—Ä–∞–≤–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n")
        self.terminal_text.insert(tk.END, "[–ò–ù–§–û] üì± –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—é—Ç—Å—è –≤–Ω–∏–∑.\n\n")
        self.terminal_text.config(state=tk.DISABLED)
        
        return right_frame

    def create_rounded_rectangle(self, canvas, x1, y1, x2, y2, radius, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ canvas"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        points = [
            x1 + radius, y1,
            x2 - radius, y1,
            x2, y1,
            x2, y1 + radius,
            x2, y2 - radius,
            x2, y2,
            x2 - radius, y2,
            x1 + radius, y2,
            x1, y2,
            x1, y2 - radius,
            x1, y1 + radius,
            x1, y1
        ]
        
        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        canvas.create_polygon(points, smooth=True, **kwargs)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
        canvas.create_arc(x1, y1, x1 + 2*radius, y1 + 2*radius, 
                         start=90, extent=90, **kwargs)
        canvas.create_arc(x2 - 2*radius, y1, x2, y1 + 2*radius, 
                         start=0, extent=90, **kwargs)
        canvas.create_arc(x2 - 2*radius, y2 - 2*radius, x2, y2, 
                         start=270, extent=90, **kwargs)
        canvas.create_arc(x1, y2 - 2*radius, x1 + 2*radius, y2, 
                         start=180, extent=90, **kwargs)

    def create_fallback_right_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ò–ò"""
        # Canvas –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        right_canvas = tk.Canvas(parent, bg=CURSOR_BG, 
                               highlightthickness=0, width=400)
        right_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        self.create_rounded_rectangle(right_canvas, 0, 0, 400, 600, 12, 
                                    fill=CURSOR_BG, 
                                    outline=CURSOR_TEXT, width=2)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        header_label = tk.Label(right_canvas, text="üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                               font=("Arial", 14, "bold"),
                               fg=CURSOR_TEXT, 
                               bg=CURSOR_BG)
        header_label.pack(pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        info_label = tk.Label(right_canvas, text="–ò–ò –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª ai_integration.py", 
                             font=("Arial", 12),
                             fg=CURSOR_TEXT, 
                             bg=CURSOR_BG)
        info_label.pack(pady=50)
    
    def create_compact_grid(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ—Ç–∫–∏ –º–æ–Ω–µ—Ç"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç—Ä–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ
        for col in range(5):
            parent.grid_columnconfigure(col, weight=1)
        for row in range(6):
            parent.grid_rowconfigure(row, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 6x5 –¥–ª—è –≤—Å–µ—Ö 30 –º–æ–Ω–µ—Ç
        self.coin_cards = {}
        for i, symbol in enumerate(self.core.symbols):
            row = i // 5
            col = i % 5
            
            card = self.create_compact_coin_card(parent, symbol)
            card.grid(row=row, column=col, padx=1, pady=1, sticky="nsew")
            
            self.coin_cards[symbol] = card
    
    def create_compact_coin_card(self, parent, symbol):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–Ω–µ—Ç—ã"""
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏, —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ
        card = tk.Frame(parent, bg=CURSOR_BG, 
                       relief=tk.FLAT, bd=0)
        
        # Canvas –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        card_canvas = tk.Canvas(card, bg=CURSOR_CARD, 
                              highlightthickness=0, height=80)
        card_canvas.pack(fill=tk.BOTH, expand=True, padx=1, pady=1)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
        def draw_card_background():
            canvas_width = card_canvas.winfo_width()
            canvas_height = card_canvas.winfo_height()
            if canvas_width > 0 and canvas_height > 0:
                card_canvas.delete("all")
                self.create_rounded_rectangle(card_canvas, 0, 0, canvas_width, canvas_height, 6, 
                                            fill=CURSOR_CARD, 
                                            outline=CURSOR_TEXT, width=1)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞ canvas
        card_canvas.bind('<Configure>', lambda e: draw_card_background())
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        self.core.root.after(100, draw_card_background)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–∏–º–≤–æ–ª)
        symbol_label = tk.Label(card_canvas, text=symbol, 
                               font=("Arial", 7, "bold"),
                               fg=CURSOR_TEXT, 
                               bg=CURSOR_CARD)
        symbol_label.pack(anchor=tk.W, padx=(5, 0), pady=(2, 0))
        
        # –¶–µ–Ω–∞ (–∫—Ä—É–ø–Ω–æ)
        price_label = tk.Label(card_canvas, text="$0.00", 
                              font=("Arial", 9, "bold"),
                              fg=CURSOR_TEXT, 
                              bg=CURSOR_CARD)
        price_label.pack(anchor=tk.W, padx=(5, 0))
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        change_label = tk.Label(card_canvas, text="0.00%", 
                               font=("Arial", 7),
                               fg=CURSOR_TEXT, 
                               bg=CURSOR_CARD)
        change_label.pack(anchor=tk.W, padx=(5, 0))
        
        # –û–±—ä–µ–º (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        volume_label = tk.Label(card_canvas, text="Vol: $0", 
                               font=("Arial", 6),
                               fg=CURSOR_TEXT, 
                               bg=CURSOR_CARD)
        volume_label.pack(anchor=tk.W, padx=(5, 0), pady=(0, 2))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ç–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
        setattr(card, 'labels', {
            'price': price_label,
            'change': change_label,
            'volume': volume_label,
            'symbol': symbol_label
        })
        
        return card
    
    def create_compact_status(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        status_frame = tk.Frame(parent, bg=CURSOR_BG, height=20)
        status_frame.pack(fill=tk.X, pady=(10, 0))
        status_frame.pack_propagate(False)
        
        # Canvas –¥–ª—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        status_canvas = tk.Canvas(status_frame, bg=CURSOR_BG, 
                                highlightthickness=0, height=20)
        status_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
        self.create_rounded_rectangle(status_canvas, 0, 0, 1920, 20, 6, 
                                    fill=CURSOR_BG, 
                                    outline=CURSOR_TEXT, width=1)
        
        self.status_var = tk.StringVar(value="üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        status_label = tk.Label(status_canvas, textvariable=self.status_var, 
                               font=("Arial", 6),
                               fg=CURSOR_TEXT, 
                               bg=CURSOR_BG)
        status_label.pack(side=tk.LEFT, padx=10)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π (–æ—Ç–∫–ª—é—á–µ–Ω—ã)
    def start_simulation(self):
        pass
    
    def stop_simulation(self):
        pass
    
    def create_terminal_panel(self, parent):
        """–°–æ–∑–¥–∞—ë—Ç —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        terminal_frame = tk.Frame(parent, bg=CURSOR_BG)
        terminal_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        self.terminal_text = scrolledtext.ScrolledText(
            terminal_frame, wrap=tk.WORD, height=15, state=tk.DISABLED,
            font=("Consolas", 11), bg=CURSOR_CARD, fg=CURSOR_TEXT
        )
        self.terminal_text.pack(fill=tk.BOTH, expand=True)

    def add_terminal_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–æ–º –≤–Ω–∏–∑"""
        if hasattr(self, 'terminal_text') and self.terminal_text is not None:
            try:
                self.terminal_text.config(state=tk.NORMAL)
                timestamp = datetime.now().strftime("%H:%M:%S")
                formatted_message = f"[{timestamp}] {message}\n"
                self.terminal_text.insert(tk.END, formatted_message)
                
                # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                self.terminal_text.see(tk.END)
                
                # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ - –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ —Å–∫—Ä–æ–ª–ª–∏—Ç—å
                # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                
                self.terminal_text.config(state=tk.DISABLED)
            except Exception as e:
                # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                pass

    def clear_terminal(self):
        if not self.terminal_text:
            return
        try:
            self.terminal_text.config(state=tk.NORMAL)
            self.terminal_text.delete(1.0, tk.END)
            self.terminal_text.config(state=tk.DISABLED)
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            pass

    def update_positions_table(self, positions):
        if not self.positions_table:
            return
        try:
            for row in self.positions_table.get_children():
                self.positions_table.delete(row)
            for pos in positions:
                symbol = pos.get('symbol', '')
                size = f"{pos.get('size', 0):.4f} {symbol.replace('USDT','')}"
                entry = f"{pos.get('entry_price', 0):.2f}"
                breakeven = f"{pos.get('entry_price', 0):.2f}"
                mark = f"{pos.get('current_price', 0):.2f}"
                leverage = pos.get('leverage', 1)
                side = pos.get('side', 'LONG')
                if side == 'LONG':
                    liq = f"{pos.get('entry_price', 0) * (1 - 1/max(leverage,1)):.2f}"
                else:
                    liq = f"{pos.get('entry_price', 0) * (1 + 1/max(leverage,1)):.2f}"
                margin_rate = f"{100/max(leverage,1):.2f}%"
                margin = f"{(pos.get('size',0)*pos.get('entry_price',0)/max(leverage,1)):.2f} USDT"
                pnl = f"{pos.get('pnl_dollars',0):+.2f} USDT ({pos.get('pnl_pct',0)*100:+.2f}%)"
                stop = f"{pos.get('stop_loss', 0):.2f}"
                take = f"{pos.get('take_profit', 0):.2f}"
                iid = self.positions_table.insert("", "end", values=(symbol, size, entry, breakeven, mark, liq, margin_rate, margin, pnl, stop, take, "–ó–∞–∫—Ä—ã—Ç—å"))
                self.positions_table.set(iid, column="–î–µ–π—Å—Ç–≤–∏—è", value="–ó–∞–∫—Ä—ã—Ç—å")
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π
            pass
    
    def start_positions_update(self):
        pass
    
    def update_market_data(self):
        pass
    
    def animate_market_ticker(self):
        pass
    
    def apply_calendar_period(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
            start_date = f"{self.start_year_var.get()}-{self.start_month_var.get()}-01"
            end_date = f"{self.end_year_var.get()}-{self.end_month_var.get()}-31"
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
            from datetime import datetime
            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_dt = datetime.strptime(end_date, "%Y-%m-%d")
            
            if start_dt >= end_dt:
                self.add_terminal_message("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π", "ERROR")
                return
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –ª–æ–≥–∏–∫—É
            if hasattr(self.core, 'logic') and self.core.logic:
                self.core.logic.set_analysis_period(start_date, end_date)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text = f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} - {end_date}"
            self.add_terminal_message(f"‚úÖ {status_text}", "INFO")
            
        except ValueError as e:
            self.add_terminal_message("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã", "ERROR")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", "ERROR")

    def apply_period_selection(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        self.apply_calendar_period()



    def check_available_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
            start_date = f"{self.start_year_var.get()}-{self.start_month_var.get()}-01"
            end_date = f"{self.end_year_var.get()}-{self.end_month_var.get()}-31"
            
            if not start_date or not end_date:
                self.add_terminal_message("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", "ERROR")
                return

            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_dt = datetime.strptime(end_date, "%Y-%m-%d")

            if start_dt >= end_dt:
                self.add_terminal_message("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", "ERROR")
                return

            if hasattr(self.core, 'logic') and self.core.logic:
                available = self.core.logic.check_data_availability(start_date, end_date)
                if available:
                    self.add_terminal_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {start_date} - {end_date} –¥–æ—Å—Ç—É–ø–Ω—ã.", "INFO")
                else:
                    self.add_terminal_message(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {start_date} - {end_date} –ù–ï –¥–æ—Å—Ç—É–ø–Ω—ã.", "ERROR")
            else:
                self.add_terminal_message("‚ùå –õ–æ–≥–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", "ERROR")
        except ValueError as e:
            self.add_terminal_message("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã", "ERROR")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")

    def create_tooltip(self, widget, text):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""
        tooltip = tk.Toplevel(widget)
        tooltip.wm_overrideredirect(True)
        tooltip.wm_geometry("+%d+%d" % (widget.winfo_x() + widget.winfo_width() + 5, widget.winfo_y() + widget.winfo_height() + 5))
        label = tk.Label(tooltip, text=text, bg="black", fg="white", font=("Arial", 10))
        label.pack(ipadx=5, ipady=3)
        tooltip.wm_attributes("-topmost", True)
        return tooltip


 