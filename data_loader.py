"""
üìä –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import pandas as pd
import numpy as np
import zipfile
import os
import random
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta

class RawDataLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    
    def __init__(self, data_path: str = '.venv/data/historical'):
        self.data_path = data_path
        self.available_data = []
        self.symbols = []
        self.timeframes = []
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._scan_available_data()
    
    def _scan_available_data(self):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ ZIP-—Ñ–∞–π–ª—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏ –º–æ–Ω–µ—Ç"""
        if not os.path.exists(self.data_path):
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.data_path}")
            return
        
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤: {self.data_path}")
        
        for timeframe_folder in os.listdir(self.data_path):
            timeframe_path = os.path.join(self.data_path, timeframe_folder)
            if not os.path.isdir(timeframe_path):
                continue
            timeframe = timeframe_folder
            for symbol_folder in os.listdir(timeframe_path):
                symbol_path = os.path.join(timeframe_path, symbol_folder)
                if not os.path.isdir(symbol_path):
                    continue
                symbol = symbol_folder
                for filename in os.listdir(symbol_path):
                    if filename.endswith('.zip'):
                        file_path = os.path.join(symbol_path, filename)
                        self.available_data.append({
                            'symbol': symbol,
                            'timeframe': timeframe,
                            'file_path': file_path,
                            'filename': filename
                        })
                        if symbol not in self.symbols:
                            self.symbols.append(symbol)
                        if timeframe not in self.timeframes:
                            self.timeframes.append(timeframe)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(self.available_data)} —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        print(f"üí∞ –°–∏–º–≤–æ–ª—ã: {len(self.symbols)}")
        print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {len(self.timeframes)}")
    
    def scan_available_data(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.available_data
    
    def get_all_symbols(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        return self.symbols
    
    def get_all_timeframes(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        return self.timeframes
    
    def get_market_data_sample(self, symbol: str, timeframe: str, sample_size: int = 100) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        target_file = None
        for data_file in self.available_data:
            if data_file['symbol'] == symbol and data_file['timeframe'] == timeframe:
                target_file = data_file
                break
        
        if not target_file:
            print(f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {symbol}_{timeframe}")
            return None
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ZIP —Ñ–∞–π–ª–∞
            with zipfile.ZipFile(target_file['file_path'], 'r') as zip_file:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è CSV —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä–∏ ZIP
                csv_filename = zip_file.namelist()[0]
                
                with zip_file.open(csv_filename) as csv_file:
                    df = pd.read_csv(csv_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['open_time', 'open', 'high', 'low', 'close', 'volume']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ –≤ {symbol}_{timeframe}: {missing_columns}")
                return None
            
            # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É
            if len(df) > sample_size:
                df_sample = df.sample(n=sample_size)
            else:
                df_sample = df
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            latest_data = df_sample.iloc[-1]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —á–∞—Å –¥–Ω—è
            try:
                timestamp = pd.to_datetime(latest_data['open_time'], unit='ms')
                hour_of_day = timestamp.hour
            except:
                hour_of_day = random.randint(0, 23)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤!)
            market_data = {
                'symbol': symbol,
                'timeframe': timeframe,
                'open': float(latest_data['open']),
                'high': float(latest_data['high']),
                'low': float(latest_data['low']),
                'close': float(latest_data['close']),
                'volume': float(latest_data['volume']),
                'hour_of_day': hour_of_day,
                'timestamp': latest_data['open_time']
            }
            
            return market_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}_{timeframe}: {e}")
            return None
    
    def get_historical_data(self, symbol: str, timeframe: str, limit: int = 1000) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        target_file = None
        for data_file in self.available_data:
            if data_file['symbol'] == symbol and data_file['timeframe'] == timeframe:
                target_file = data_file
                break
        
        if not target_file:
            return None
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ZIP —Ñ–∞–π–ª–∞
            with zipfile.ZipFile(target_file['file_path'], 'r') as zip_file:
                csv_filename = zip_file.namelist()[0]
                
                with zip_file.open(csv_filename) as csv_file:
                    df = pd.read_csv(csv_file)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            if len(df) > limit:
                df = df.tail(limit)
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö {symbol}_{timeframe}: {e}")
            return None
    
    def get_data_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        stats = {
            'total_files': len(self.available_data),
            'symbols_count': len(self.symbols),
            'timeframes_count': len(self.timeframes),
            'symbols': self.symbols,
            'timeframes': self.timeframes,
            'data_files': self.available_data
        }
        
        return stats 