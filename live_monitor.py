"""
üìä –ñ–∏–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import json
import time
import os
from datetime import datetime

def live_monitor():
    """–ñ–∏–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üìä –ñ–ò–í–û–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    last_file_size = 0
    last_check_time = time.time()
    cycle_count = 0
    
    try:
        while True:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if os.path.exists('progressive_learning_state.json'):
                current_file_size = os.path.getsize('progressive_learning_state.json')
                file_modified = os.path.getmtime('progressive_learning_state.json')
                
                if current_file_size != last_file_size:
                    cycle_count += 1
                    print(f"\nüîÑ –¶–ò–ö–õ {cycle_count} - {datetime.fromtimestamp(file_modified).strftime('%H:%M:%S')}")
                    print("=" * 50)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                    try:
                        with open('final_neural_network_state.json', 'r') as f:
                            nn_state = json.load(f)
                        
                        learning_stats = nn_state.get('learning_stats', {})
                        win_rate_history = learning_stats.get('win_rate_history', [])
                        capital_history = learning_stats.get('capital_history', [])
                        experience_memory = nn_state.get('experience_memory', [])
                        
                        if win_rate_history:
                            current_win_rate = win_rate_history[-1]
                            avg_win_rate = sum(win_rate_history) / len(win_rate_history)
                            print(f"üéØ –¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {current_win_rate:.1%}")
                            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_win_rate:.1%}")
                            print(f"üìà –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(win_rate_history)}")
                        
                        if capital_history:
                            current_capital = capital_history[-1]
                            initial_capital = capital_history[0]
                            total_change = current_capital - initial_capital
                            print(f"üí∞ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${current_capital:.2f}")
                            print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${total_change:.2f}")
                        
                        total_profit = learning_stats.get('total_profit', 0)
                        print(f"üíπ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
                        print(f"üß† –ü–∞–º—è—Ç—å –æ–ø—ã—Ç–∞: {len(experience_memory)} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        if current_win_rate >= 0.65:
                            print("üèÜ –î–û–°–¢–ò–ì–ù–£–¢ –¶–ï–õ–ï–í–û–ô –í–ò–ù–†–ï–ô–¢ 65%+!")
                        elif current_win_rate >= 0.60:
                            print("üéØ –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏! –í–∏–Ω—Ä–µ–π—Ç 60%+")
                        elif current_win_rate >= 0.55:
                            print("üìà –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í–∏–Ω—Ä–µ–π—Ç 55%+")
                        else:
                            print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ...")
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
                        if experience_memory:
                            recent_trades = experience_memory[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏
                            print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
                            for i, trade in enumerate(recent_trades, 1):
                                decision = trade['decision']
                                result = trade['result']
                                profit = result['profit']
                                action = decision['action'].upper()
                                timeframe = decision['timeframe']
                                leverage = decision['leverage']
                                
                                if profit > 0:
                                    print(f"   ‚úÖ {action} {timeframe}: +${profit:.2f} ({leverage}x)")
                                else:
                                    print(f"   ‚ùå {action} {timeframe}: ${profit:.2f} ({leverage}x)")
                        
                        last_file_size = current_file_size
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                if current_time - last_check_time >= 60:
                    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} - –û–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ...")
                    last_check_time = current_time
            
            time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
    except KeyboardInterrupt:
        print(f"\n‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        
        try:
            with open('final_neural_network_state.json', 'r') as f:
                nn_state = json.load(f)
            
            learning_stats = nn_state.get('learning_stats', {})
            win_rate_history = learning_stats.get('win_rate_history', [])
            capital_history = learning_stats.get('capital_history', [])
            
            if win_rate_history:
                current_win_rate = win_rate_history[-1]
                print(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç: {current_win_rate:.1%}")
            
            if capital_history:
                current_capital = capital_history[-1]
                print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${current_capital:.2f}")
            
            total_profit = learning_stats.get('total_profit', 0)
            print(f"üíπ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
            print(f"üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {cycle_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    live_monitor() 