"""
üé® –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
–í—Å–µ 30 –º–æ–Ω–µ—Ç –Ω–∞ –æ–¥–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞
–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
from datetime import datetime
import random
import sys
import os

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
try:
    from core.dashboard_core import DashboardCore
    from core.dashboard_ui import DashboardUI
    from core.dashboard_logic import DashboardLogic
    MODULES_AVAILABLE = True
except ImportError as e:
    print(f"ImportError: {e}")
    MODULES_AVAILABLE = False

class CompactTradingDashboard:
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, root):
        self.root = root
        
        if MODULES_AVAILABLE:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            self.core = DashboardCore(root)
            self.ui = DashboardUI(self.core)
            self.logic = DashboardLogic(self.core, self.ui)
            # –°–≤—è–∑—ã–≤–∞–µ–º core, ui, logic –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            self.core.logic = self.logic
            self.core.ui = self.ui
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.ui.setup_compact_ui()
            
            # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
            self.logic.start_price_updates()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ò–ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI
            self.root.after(3000, self.logic.delayed_ai_start)
        else:
            # Fallback - –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –º–æ–¥—É–ª–µ–π
            self._init_fallback()
    
    def _init_fallback(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è fallback –≤–µ—Ä—Å–∏–∏"""
        self.root.title("üìä –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª (Fallback)")
        self.root.geometry("1920x1080")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        label = tk.Label(self.root, text="–ú–æ–¥—É–ª–∏ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ trading_bot/", 
                        font=("Arial", 16), fg="white", bg="#0f1419")
        label.pack(expand=True)

    def start_simulation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        pass

    def stop_simulation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        pass

    def clear_terminal(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        if hasattr(self.ui, 'terminal_text') and self.ui.terminal_text is not None:
            self.ui.terminal_text.config(state=tk.NORMAL)
            self.ui.terminal_text.delete(1.0, tk.END)
            self.ui.terminal_text.config(state=tk.DISABLED)

    def update_positions_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        pass

    def on_position_action(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        pass

    def start_positions_update(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
    root.lift()
    root.attributes('-topmost', True)
    root.after_idle(root.attributes, '-topmost', False)
    
    app = CompactTradingDashboard(root)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–∫–Ω–æ –≤–∏–¥–∏–º–æ
    root.deiconify()
    root.focus_force()
    
    print("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω!")
    print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ –æ–∫–Ω–æ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º")
    
    root.mainloop()

if __name__ == "__main__":
    main() 