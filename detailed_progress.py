"""
üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import json
import os
from datetime import datetime

def detailed_progress_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_files = {
        'progressive_learning_state.json': '–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è',
        'learning_engine_state.json': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –æ–±—É—á–µ–Ω–∏—è',
        'final_neural_network_state.json': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
    }
    
    print("üìÅ –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –°–û–°–¢–û–Ø–ù–ò–Ø:")
    for file_name, description in state_files.items():
        if os.path.exists(file_name):
            file_size = os.path.getsize(file_name)
            mod_time = datetime.fromtimestamp(os.path.getmtime(file_name))
            print(f"‚úÖ {file_name}: {file_size:,} –±–∞–π—Ç")
            print(f"   üìù {description}")
            print(f"   üïí –ò–∑–º–µ–Ω–µ–Ω: {mod_time.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print(f"‚ùå {file_name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print()
    
    print("=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data_dir = '.venv/data/historical'
    if os.path.exists(data_dir):
        timeframes = [d for d in os.listdir(data_dir) if os.path.isdir(os.path.join(data_dir, d))]
        print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {len(timeframes)}")
        
        total_files = 0
        for tf in timeframes:
            tf_path = os.path.join(data_dir, tf)
            files = [f for f in os.listdir(tf_path) if f.endswith('.csv')]
            total_files += len(files)
            print(f"   üìä {tf}: {len(files)} —Ñ–∞–π–ª–æ–≤")
        
        print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {total_files}")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print("\n" + "=" * 60)
    print("üß† –ê–ù–ê–õ–ò–ó –ù–ï–ô–†–û–°–ï–¢–ò:")
    
    try:
        with open('final_neural_network_state.json', 'r') as f:
            nn_state = json.load(f)
        
        learning_stats = nn_state.get('learning_stats', {})
        experience_memory = nn_state.get('experience_memory', [])
        
        print(f"üìà –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {learning_stats.get('cycles_completed', 0)}")
        print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${learning_stats.get('total_profit', 0):.2f}")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {learning_stats.get('max_drawdown', 0):.1%}")
        
        win_rate_history = learning_stats.get('win_rate_history', [])
        if win_rate_history:
            current_win_rate = win_rate_history[-1]
            avg_win_rate = sum(win_rate_history) / len(win_rate_history)
            print(f"üéØ –¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {current_win_rate:.1%}")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_win_rate:.1%}")
            print(f"üìà –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç–∞: {len(win_rate_history)}")
        
        capital_history = learning_stats.get('capital_history', [])
        if capital_history:
            current_capital = capital_history[-1]
            initial_capital = capital_history[0]
            print(f"üí∞ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${current_capital:.2f}")
            print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞: ${current_capital - initial_capital:.2f}")
        
        print(f"üß† –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –æ–ø—ã—Ç–∞: {len(experience_memory)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
        if experience_memory:
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –°–î–ï–õ–û–ö:")
            recent_trades = experience_memory[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            for i, trade in enumerate(recent_trades, 1):
                decision = trade['decision']
                result = trade['result']
                print(f"   {i}. {decision['action'].upper()} {decision['timeframe']}: "
                      f"${result['profit']:.2f} (–ø–ª–µ—á–æ {decision['leverage']}x)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
    
    print("\n" + "=" * 60)
    print("‚öôÔ∏è –ê–ù–ê–õ–ò–ó –î–í–ò–ñ–ö–ê –û–ë–£–ß–ï–ù–ò–Ø:")
    
    try:
        with open('learning_engine_state.json', 'r') as f:
            engine_state = json.load(f)
        
        print(f"üîÑ –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª: {engine_state.get('current_cycle', 0)}")
        print(f"üìä –¢–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {engine_state.get('current_timeframe', 'N/A')}")
        print(f"üìà –ò–Ω–¥–µ–∫—Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {engine_state.get('current_timeframe_index', 0)}")
        print(f"üîÑ –¢–µ–∫—É—â–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {engine_state.get('current_restart', 0)}")
        
        timeframe_history = engine_state.get('timeframe_history', [])
        if timeframe_history:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {len(timeframe_history)}")
            for record in timeframe_history[-3:]:
                print(f"   üìä {record.get('timeframe', 'N/A')}: —Ü–∏–∫–ª {record.get('cycle', 0)}, "
                      f"–∫–∞–ø–∏—Ç–∞–ª ${record.get('capital', 0):.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–≤–∏–∂–∫–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ –í–´–í–û–î–´:")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if os.path.exists('progressive_learning_state.json'):
        file_size = os.path.getsize('progressive_learning_state.json')
        if file_size > 1000000:  # –ë–æ–ª—å—à–µ 1MB
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è)")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–±–æ–ª—å—à–æ–π - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª–æ—Å—å")
    
    try:
        with open('final_neural_network_state.json', 'r') as f:
            nn_state = json.load(f)
        
        learning_stats = nn_state.get('learning_stats', {})
        win_rate_history = learning_stats.get('win_rate_history', [])
        
        if win_rate_history:
            current_win_rate = win_rate_history[-1]
            if current_win_rate >= 0.65:
                print("üèÜ –î–û–°–¢–ò–ì–ù–£–¢ –¶–ï–õ–ï–í–û–ô –í–ò–ù–†–ï–ô–¢ 65%+!")
            elif current_win_rate >= 0.60:
                print("üéØ –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏! –í–∏–Ω—Ä–µ–π—Ç 60%+")
            elif current_win_rate >= 0.55:
                print("üìà –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í–∏–Ω—Ä–µ–π—Ç 55%+")
            else:
                print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
        
        total_profit = learning_stats.get('total_profit', 0)
        if total_profit > 0:
            print("‚úÖ –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å!")
        elif total_profit > -50:
            print("üìà –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
        else:
            print("‚ö†Ô∏è –ë–æ—Ç –ø–æ–∫–∞ –≤ —É–±—ã—Ç–∫–µ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

if __name__ == "__main__":
    detailed_progress_analysis() 