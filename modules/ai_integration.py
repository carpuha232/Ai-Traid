"""
ü§ñ AI Integration Module
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò —Å–∏—Å—Ç–µ–º—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º
"""

import sys
import os
import json
import threading
import time
from datetime import datetime
from typing import Dict, List, Optional
import tkinter as tk
from tkinter import scrolledtext, ttk
import queue
import random

class AIInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    
    def __init__(self):
        self.message_queue = queue.Queue()
        self.is_running = False
        self.current_status = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
        self.performance_metrics = {
            'winrate': 0.0,
            'total_trades': 0,
            'profit': 0.0,
            'balance': 100.0
        }
        
    def initialize_ai_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò —Å–∏—Å—Ç–µ–º...")
            
            self.current_status = "–ò–ò —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã"
            self.message_queue.put(("SUCCESS", "‚úÖ –í—Å–µ –ò–ò —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"))
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ò: {str(e)}"
            self.message_queue.put(("ERROR", error_msg))
            self.current_status = "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            print(error_msg)
    
    def start_ai_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ò–ò"""
        if not self.is_running:
            self.is_running = True
            self.message_queue.put(("INFO", "üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò..."))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            analysis_thread = threading.Thread(target=self._run_ai_analysis, daemon=True)
            analysis_thread.start()
    
    def _run_ai_analysis(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –ò–ò –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            while self.is_running:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ò–ò
                self._simulate_ai_analysis()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self._update_performance_metrics()
                
                # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                time.sleep(5)
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò: {str(e)}"
            self.message_queue.put(("ERROR", error_msg))
    
    def _simulate_ai_analysis(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ò–ò"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis_types = [
            "–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
            "–û—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π",
            "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤",
            "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        ]
        
        current_analysis = random.choice(analysis_types)
        self.message_queue.put(("INFO", f"üîç {current_analysis}"))
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –Ω–∞ —Å–∏–≥–Ω–∞–ª
            signals = ["LONG", "SHORT", "NEUTRAL"]
            signal = random.choice(signals)
            confidence = random.uniform(0.6, 0.95)
            
            self.message_queue.put(("SIGNAL", f"üìä –°–∏–≥–Ω–∞–ª: {signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"))
    
    def _update_performance_metrics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        self.performance_metrics['winrate'] += random.uniform(-1, 1)
        self.performance_metrics['winrate'] = max(0, min(100, self.performance_metrics['winrate']))
        
        self.performance_metrics['total_trades'] += random.randint(0, 2)
        
        profit_change = random.uniform(-10, 20)
        self.performance_metrics['profit'] += profit_change
        self.performance_metrics['balance'] += profit_change
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.message_queue.put(("METRICS", json.dumps(self.performance_metrics)))
    
    def stop_ai_analysis(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ò–ò"""
        self.is_running = False
        self.message_queue.put(("INFO", "‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ò–ò –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
    
    def get_current_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ò–ò"""
        return self.current_status
    
    def get_performance_metrics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.performance_metrics.copy()
    
    def get_message(self) -> Optional[tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            return self.message_queue.get_nowait()
        except queue.Empty:
            return None

class AIRightPanel:
    """–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ò–ò –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self, parent, ai_interface: AIInterface):
        self.parent = parent
        self.ai_interface = ai_interface
        self.colors = {
            'bg_dark': '#1a1a2e',        # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º
            'bg_card': '#16213e',        # –°–∏–Ω–∏–π —Å –≥–ª—É–±–∏–Ω–æ–π
            'bg_header': '#0f3460',      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
            'text_white': '#e94560',     # –†–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤
            'text_gray': '#c7c7c7',      # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            'green': '#00d4aa',          # –ë–∏—Ä—é–∑–æ–≤—ã–π –∑–µ–ª–µ–Ω—ã–π
            'red': '#ff6b6b',            # –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π –∫—Ä–∞—Å–Ω—ã–π
            'blue': '#4ecdc4',           # –ë–∏—Ä—é–∑–æ–≤—ã–π
            'yellow': '#ffe66d',         # –ú—è–≥–∫–∏–π –∂–µ–ª—Ç—ã–π
            'purple': '#a8e6cf',         # –ú—è—Ç–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
            'cyan': '#ffd93d',           # –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
            'orange': '#ff8b94'          # –†–æ–∑–æ–≤—ã–π
        }
        
        self.setup_ui()
        self.start_message_polling()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = tk.Frame(self.parent, bg=self.colors['bg_dark'])
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Canvas —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        self.canvas = tk.Canvas(self.main_frame, bg=self.colors['bg_header'], 
                              highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω
        self.create_rounded_rectangle(self.canvas, 0, 0, 400, 600, 12, 
                                    fill=self.colors['bg_header'], 
                                    outline=self.colors['blue'], width=2)
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_header()
        self.create_status_section()
        self.create_metrics_section()
        self.create_log_section()
        self.create_control_buttons()
    
    def create_rounded_rectangle(self, canvas, x1, y1, x2, y2, radius, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ canvas"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        points = [
            x1 + radius, y1,
            x2 - radius, y1,
            x2, y1,
            x2, y1 + radius,
            x2, y2 - radius,
            x2, y2,
            x2 - radius, y2,
            x1 + radius, y2,
            x1, y2,
            x1, y2 - radius,
            x1, y1 + radius,
            x1, y1
        ]
        
        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        canvas.create_polygon(points, smooth=True, **kwargs)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
        canvas.create_arc(x1, y1, x1 + 2*radius, y1 + 2*radius, 
                         start=90, extent=90, **kwargs)
        canvas.create_arc(x2 - 2*radius, y1, x2, y1 + 2*radius, 
                         start=0, extent=90, **kwargs)
        canvas.create_arc(x2 - 2*radius, y2 - 2*radius, x2, y2, 
                         start=270, extent=90, **kwargs)
        canvas.create_arc(x1, y2 - 2*radius, x1 + 2*radius, y2, 
                         start=180, extent=90, **kwargs)
    
    def create_header(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        header_label = tk.Label(self.canvas, text="üß† –ò–ò –ê–Ω–∞–ª–∏–∑", 
                               font=("Arial", 16, "bold"),
                               fg=self.colors['text_white'], 
                               bg=self.colors['bg_header'])
        header_label.pack(pady=20)
    
    def create_status_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞"""
        status_frame = tk.Frame(self.canvas, bg=self.colors['bg_header'])
        status_frame.pack(fill=tk.X, padx=20, pady=10)
        
        status_label = tk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å:", 
                               font=("Arial", 12, "bold"),
                               fg=self.colors['text_gray'], 
                               bg=self.colors['bg_header'])
        status_label.pack(anchor=tk.W)
        
        self.status_var = tk.StringVar(value="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        self.status_display = tk.Label(status_frame, textvariable=self.status_var,
                                      font=("Arial", 11),
                                      fg=self.colors['green'], 
                                      bg=self.colors['bg_header'])
        self.status_display.pack(anchor=tk.W, pady=5)
    
    def create_metrics_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –º–µ—Ç—Ä–∏–∫"""
        metrics_frame = tk.Frame(self.canvas, bg=self.colors['bg_header'])
        metrics_frame.pack(fill=tk.X, padx=20, pady=10)
        
        metrics_label = tk.Label(metrics_frame, text="–ú–µ—Ç—Ä–∏–∫–∏:", 
                                font=("Arial", 12, "bold"),
                                fg=self.colors['text_gray'], 
                                bg=self.colors['bg_header'])
        metrics_label.pack(anchor=tk.W)
        
        self.metrics_display = tk.Label(metrics_frame, text="–ó–∞–≥—Ä—É–∑–∫–∞...",
                                       font=("Arial", 10),
                                       fg=self.colors['text_white'], 
                                       bg=self.colors['bg_header'],
                                       justify=tk.LEFT)
        self.metrics_display.pack(anchor=tk.W, pady=5)
    
    def create_log_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ª–æ–≥–∞"""
        log_frame = tk.Frame(self.canvas, bg=self.colors['bg_header'])
        log_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        log_label = tk.Label(log_frame, text="–õ–æ–≥ –ò–ò:", 
                            font=("Arial", 12, "bold"),
                            fg=self.colors['text_gray'], 
                            bg=self.colors['bg_header'])
        log_label.pack(anchor=tk.W)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∞
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            width=40,
            height=15,
            font=("Consolas", 10),
            bg=self.colors['bg_card'],
            fg=self.colors['text_white'],
            insertbackground=self.colors['text_white'],
            selectbackground=self.colors['blue'],
            relief=tk.FLAT,
            borderwidth=0,
            wrap=tk.WORD
        )
        self.log_text.pack(fill=tk.BOTH, expand=True, pady=5)
        self.log_text.config(state=tk.DISABLED)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        self.log_text.tag_configure("INFO", foreground=self.colors['cyan'])
        self.log_text.tag_configure("SUCCESS", foreground=self.colors['green'])
        self.log_text.tag_configure("ERROR", foreground=self.colors['red'])
        self.log_text.tag_configure("SIGNAL", foreground=self.colors['yellow'])
        self.log_text.tag_configure("METRICS", foreground=self.colors['purple'])
    
    def create_control_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        button_frame = tk.Frame(self.canvas, bg=self.colors['bg_header'])
        button_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_button = tk.Button(
            button_frame,
            text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            command=self.toggle_ai_analysis,
            font=("Arial", 11, "bold"),
            bg=self.colors['green'],
            fg=self.colors['text_white'],
            relief=tk.FLAT,
            borderwidth=0,
            padx=15,
            pady=5
        )
        self.analysis_button.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
        clear_button = tk.Button(
            button_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=self.clear_log,
            font=("Arial", 11),
            bg=self.colors['red'],
            fg=self.colors['text_white'],
            relief=tk.FLAT,
            borderwidth=0,
            padx=15,
            pady=5
        )
        clear_button.pack(side=tk.RIGHT, padx=5)
    
    def toggle_ai_analysis(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò"""
        if self.ai_interface.is_running:
            self.ai_interface.stop_ai_analysis()
            self.analysis_button.config(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", bg=self.colors['green'])
        else:
            self.ai_interface.start_ai_analysis()
            self.analysis_button.config(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", bg=self.colors['red'])
    
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)
    
    def add_log_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            self.log_text.config(state=tk.NORMAL)
            timestamp = datetime.now().strftime("%H:%M:%S")
            formatted_message = f"[{timestamp}] {message}\n"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥ –¥–ª—è —Ü–≤–µ—Ç–∞
            self.log_text.insert(tk.END, formatted_message, level.upper())
            self.log_text.see(tk.END)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            lines = self.log_text.get(1.0, tk.END).split('\n')
            if len(lines) > 200:
                self.log_text.delete(1.0, f"{len(lines)-200}.0")
                
            self.log_text.config(state=tk.DISABLED)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ –ò–ò: {e}")
    
    def update_metrics(self, metrics: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        try:
            metrics_text = f"–í–∏–Ω—Ä–µ–π—Ç: {metrics.get('winrate', 0):.1f}%\n"
            metrics_text += f"–°–¥–µ–ª–æ–∫: {metrics.get('total_trades', 0)}\n"
            metrics_text += f"–ü—Ä–∏–±—ã–ª—å: ${metrics.get('profit', 0):.2f}\n"
            metrics_text += f"–ë–∞–ª–∞–Ω—Å: ${metrics.get('balance', 0):.2f}"
            
            self.metrics_display.config(text=metrics_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def update_status(self, status: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        try:
            self.status_var.set(status)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def start_message_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ò–ò"""
        def poll_messages():
            while True:
                try:
                    message = self.ai_interface.get_message()
                    if message:
                        level, content = message
                        
                        if level == "METRICS":
                            try:
                                metrics = json.loads(content)
                                self.update_metrics(metrics)
                            except:
                                pass
                        else:
                            self.add_log_message(content, level)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    self.update_status(self.ai_interface.get_current_status())
                    
                    time.sleep(0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò: {e}")
                    time.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        polling_thread = threading.Thread(target=poll_messages, daemon=True)
        polling_thread.start() 