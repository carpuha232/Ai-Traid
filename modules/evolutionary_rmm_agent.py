"""
üß¨ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏ –¥–µ–Ω—å–≥–∞–º–∏ (RMM)
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

class EvolutionaryRMMAgent:
    """–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏ –¥–µ–Ω—å–≥–∞–º–∏"""
    
    def __init__(self, population_size=20, mutation_rate=0.2, elite_frac=0.2):
        self.population_size = population_size
        self.mutation_rate = mutation_rate
        self.elite_frac = elite_frac
        self.population = []
        self.generation = 0
        self.best_fitness = 0.0
        self.best_individual = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏
        self._initialize_population()
    
    def _initialize_population(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        for _ in range(self.population_size):
            individual = {
                'risk_per_trade': 0.01 + 0.02 * (0.5 - 0.5),  # 1-3%
                'max_positions': 3,
                'stop_loss': 0.02,  # 2%
                'take_profit': 0.04,  # 4%
                'leverage': 3.0,
                'confidence_threshold': 0.35
            }
            self.population.append(individual)
    
    def evolve(self, fitness_scores):
        """–≠–≤–æ–ª—é—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏—Ç–Ω–µ—Å-–æ—Ü–µ–Ω–æ–∫"""
        if len(fitness_scores) != len(self.population):
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É
        sorted_population = [x for _, x in sorted(zip(fitness_scores, self.population), reverse=True)]
        
        # –û—Ç–±–∏—Ä–∞–µ–º —ç–ª–∏—Ç—É
        elite_size = int(self.population_size * self.elite_frac)
        elite = sorted_population[:elite_size]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
        new_population = elite.copy()
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –ø–æ—Ç–æ–º–∫–∞–º–∏
        while len(new_population) < self.population_size:
            parent1 = self._select_parent(sorted_population, fitness_scores)
            parent2 = self._select_parent(sorted_population, fitness_scores)
            child = self._crossover(parent1, parent2)
            child = self._mutate(child)
            new_population.append(child)
        
        self.population = new_population
        self.generation += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥–∞
        if fitness_scores:
            best_idx = fitness_scores.index(max(fitness_scores))
            if fitness_scores[best_idx] > self.best_fitness:
                self.best_fitness = fitness_scores[best_idx]
                self.best_individual = self.population[best_idx].copy()
    
    def _select_parent(self, population, fitness_scores):
        """–í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –æ—Ç–±–æ—Ä
        tournament_size = 3
        tournament_indices = [0] * tournament_size
        for i in range(tournament_size):
            tournament_indices[i] = len(population) - 1
        
        best_idx = tournament_indices[0]
        for idx in tournament_indices[1:]:
            if fitness_scores[idx] > fitness_scores[best_idx]:
                best_idx = idx
        
        return population[best_idx]
    
    def _crossover(self, parent1, parent2):
        """–°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –¥–≤—É—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        child = {}
        for key in parent1:
            if 0.5 < 0.5:  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
                child[key] = parent1[key]
            else:
                child[key] = parent2[key]
        return child
    
    def _mutate(self, individual):
        """–ú—É—Ç–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥–∞"""
        mutated = individual.copy()
        for key in mutated:
            if 0.5 < self.mutation_rate:  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏
                if isinstance(mutated[key], float):
                    # –ú—É—Ç–∞—Ü–∏—è –¥–ª—è float –∑–Ω–∞—á–µ–Ω–∏–π
                    mutation_strength = 0.1
                    mutated[key] += (0.5 - 0.5) * mutation_strength
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                    if key == 'risk_per_trade':
                        mutated[key] = max(0.005, min(0.05, mutated[key]))
                    elif key == 'stop_loss':
                        mutated[key] = max(0.01, min(0.05, mutated[key]))
                    elif key == 'take_profit':
                        mutated[key] = max(0.02, min(0.10, mutated[key]))
                    elif key == 'leverage':
                        mutated[key] = max(1.0, min(10.0, mutated[key]))
                    elif key == 'confidence_threshold':
                        mutated[key] = max(0.2, min(0.8, mutated[key]))
                elif isinstance(mutated[key], int):
                    # –ú—É—Ç–∞—Ü–∏—è –¥–ª—è int –∑–Ω–∞—á–µ–Ω–∏–π
                    if key == 'max_positions':
                        mutated[key] = max(1, min(5, mutated[key] + (0.5 - 0.5) * 2))
        
        return mutated
    
    def get_best_parameters(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if self.best_individual:
            return self.best_individual.copy()
        elif self.population:
            return self.population[0].copy()
        else:
            return {
                'risk_per_trade': 0.02,
                'max_positions': 3,
                'stop_loss': 0.02,
                'take_profit': 0.04,
                'leverage': 3.0,
                'confidence_threshold': 0.35
            }
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏"""
        return {
            'generation': self.generation,
            'population_size': self.population_size,
            'best_fitness': self.best_fitness,
            'mutation_rate': self.mutation_rate,
            'elite_fraction': self.elite_frac
        } 