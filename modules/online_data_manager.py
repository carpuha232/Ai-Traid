"""
üéØ –û–ù–õ–ê–ô–ù –ú–ï–ù–ï–î–ñ–ï–† –î–ê–ù–ù–´–• - –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Binance API
–≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤—ã–π –æ–Ω–ª–∞–π–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä
–≠—Ç–∞–ø 2: –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ  
–≠—Ç–∞–ø 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º
"""

import asyncio
import aiohttp
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import threading
from typing import Dict, List, Optional, Tuple
import logging
from dataclasses import dataclass
from collections import defaultdict
import json
import requests
import hmac
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BINANCE_FUTURES_URL = "https://fapi.binance.com"
API_KEY = "VIqLXtYAJNMEs3C8zqwPryL8XFBxaVoSCvaMjsU0GgVxhilGZEIh1KYWadxeyibu"
API_SECRET = "5l8UXlgVP4Fd4jqZLOR1SpkHtgAWAh0L18OkUzgURFCuZOp91q0ELvCD0LcgRuGz"

def get_futures_balance():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT-M —Ñ—å—é—á–µ—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ Binance API"""
    endpoint = "/fapi/v2/balance"
    timestamp = int(time.time() * 1000)
    params = f"timestamp={timestamp}"
    signature = hmac.new(API_SECRET.encode(), params.encode(), hashlib.sha256).hexdigest()
    headers = {"X-MBX-APIKEY": API_KEY}
    url = f"{BINANCE_FUTURES_URL}{endpoint}?{params}&signature={signature}"
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        return {"error": str(e)}

@dataclass
class MarketData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    symbol: str
    timeframe: str
    open_price: float
    high_price: float
    low_price: float
    close_price: float
    volume: float
    timestamp: int
    change_24h: float = 0.0
    change_pct_24h: float = 0.0

class OnlineDataManager:
    """
    üöÄ –û–ù–õ–ê–ô–ù –ú–ï–ù–ï–î–ñ–ï–† –î–ê–ù–ù–´–• - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Binance API
    
    –≠—Ç–∞–ø 1: ‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API
    –≠—Ç–∞–ø 2: ‚úÖ –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (8 –¢–§)
    –≠—Ç–∞–ø 3: ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    
    def __init__(self, symbols: List[str] = None):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.base_url = "https://api.binance.com/api/v3"
        self.websocket_url = "wss://stream.binance.com:9443/ws"
        
        # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç (30 –æ—Å–Ω–æ–≤–Ω—ã—Ö)
        self.symbols = symbols or [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'XRPUSDT',
            'DOGEUSDT', 'DOTUSDT', 'LTCUSDT', 'BCHUSDT', 'LINKUSDT',
            'EOSUSDT', 'TRXUSDT', 'XLMUSDT', 'VETUSDT', 'FILUSDT',
            'ATOMUSDT', 'NEARUSDT', 'FTMUSDT', 'ALGOUSDT', 'AVAXUSDT',
            'SHIBUSDT', 'MANAUSDT', 'SANDUSDT', 'CAKEUSDT', 'AAVEUSDT',
            'GALAUSDT', 'AXSUSDT', 'XLMUSDT', 'VETUSDT', 'CAKEUSDT'
        ]
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã (8 –æ—Å–Ω–æ–≤–Ω—ã—Ö)
        self.timeframes = ['1m', '5m', '15m', '30m', '1h', '2h', '4h', '1d']
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
        self.data_cache = defaultdict(dict)  # {symbol: {timeframe: [MarketData]}}
        self.current_prices = {}  # {symbol: current_price}
        self.last_update = {}  # {symbol: timestamp}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache_size = 1000  # –ú–∞–∫—Å–∏–º—É–º —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ
        self.update_interval = 5  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        self.retry_attempts = 3
        self.retry_delay = 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'requests_made': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'errors': 0,
            'last_successful_update': None
        }
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        self.is_connected = False
        self.fallback_mode = False
        
        # –°–µ—Å—Å–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = None
        
        # –ü–æ—Ç–æ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_thread = None
        self.websocket_thread = None
        
        logger.info("üéØ –û–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=10),
                headers={'User-Agent': 'TradingBot/1.0'}
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self._test_connection()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self._load_initial_data()
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self._start_background_updates()
            
            self.is_connected = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.fallback_mode = True
            self._start_fallback_mode()
    
    async def _test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            async with self.session.get(f"{self.base_url}/ping") as response:
                if response.status == 200:
                    logger.info("‚úÖ –¢–µ—Å—Ç API —É—Å–ø–µ—à–µ–Ω")
                    return True
                else:
                    raise Exception(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API: {e}")
            raise
    
    async def _load_initial_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        tasks = []
        for symbol in self.symbols:
            for timeframe in self.timeframes:
                tasks.append(self._fetch_historical_data(symbol, timeframe, limit=100))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        successful_loads = 0
        for result in results:
            if isinstance(result, Exception):
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result}")
            else:
                successful_loads += 1
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {successful_loads}/{len(tasks)}")
    
    async def _fetch_historical_data(self, symbol: str, timeframe: str, limit: int = 100) -> List[MarketData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance API"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç Binance
            interval_map = {
                '1m': '1m', '5m': '5m', '15m': '15m', '30m': '30m',
                '1h': '1h', '2h': '2h', '4h': '4h', '1d': '1d'
            }
            interval = interval_map.get(timeframe, '1h')
            
            url = f"{self.base_url}/klines"
            params = {
                'symbol': symbol,
                'interval': interval,
                'limit': limit
            }
            
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MarketData
                    market_data = []
                    for candle in data:
                        market_data.append(MarketData(
                            symbol=symbol,
                            timeframe=timeframe,
                            open_price=float(candle[1]),
                            high_price=float(candle[2]),
                            low_price=float(candle[3]),
                            close_price=float(candle[4]),
                            volume=float(candle[5]),
                            timestamp=int(candle[0])
                        ))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    self.data_cache[symbol][timeframe] = market_data
                    self.stats['requests_made'] += 1
                    
                    return market_data
                else:
                    raise Exception(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {e}")
            self.stats['errors'] += 1
            raise
    
    async def get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if symbol in self.current_prices:
                last_update = self.last_update.get(symbol, 0)
                if time.time() - last_update < 5:  # –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω 5 —Å–µ–∫—É–Ω–¥
                    self.stats['cache_hits'] += 1
                    return self.current_prices[symbol]
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å API
            url = f"{self.base_url}/ticker/price"
            params = {'symbol': symbol}
            
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    price = float(data['price'])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    self.current_prices[symbol] = price
                    self.last_update[symbol] = time.time()
                    self.stats['requests_made'] += 1
                    
                    return price
                else:
                    raise Exception(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            self.stats['errors'] += 1
            return None
    
    async def get_klines(self, symbol: str, timeframe: str, limit: int = 100) -> List[MarketData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if symbol in self.data_cache and timeframe in self.data_cache[symbol]:
                cached_data = self.data_cache[symbol][timeframe]
                if len(cached_data) >= limit:
                    self.stats['cache_hits'] += 1
                    return cached_data[-limit:]
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.stats['cache_misses'] += 1
            return await self._fetch_historical_data(symbol, timeframe, limit)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol} {timeframe}: {e}")
            return []
    
    async def get_24h_stats(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ 24-—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            url = f"{self.base_url}/ticker/24hr"
            params = {'symbol': symbol}
            
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return {
                        'symbol': symbol,
                        'price_change': float(data['priceChange']),
                        'price_change_pct': float(data['priceChangePercent']),
                        'volume': float(data['volume']),
                        'high_24h': float(data['highPrice']),
                        'low_24h': float(data['lowPrice'])
                    }
                else:
                    raise Exception(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {symbol}: {e}")
            return {}
    
    def _start_background_updates(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.is_running = True
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
        self.update_thread = threading.Thread(target=self._update_loop, daemon=True)
        self.update_thread.start()
        
        logger.info("üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ")
    
    def _update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                loop.run_until_complete(self._update_all_data())
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
                loop.close()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                time.sleep(self.update_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                time.sleep(self.update_interval * 2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _update_all_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            price_tasks = [self.get_current_price(symbol) for symbol in self.symbols]
            prices = await asyncio.gather(*price_tasks, return_exceptions=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_tasks = [self.get_24h_stats(symbol) for symbol in self.symbols]
            stats = await asyncio.gather(*stats_tasks, return_exceptions=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            important_timeframes = ['1m', '5m', '15m', '1h']
            for symbol in self.symbols[:10]:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –º–æ–Ω–µ—Ç
                for timeframe in important_timeframes:
                    try:
                        await self._fetch_historical_data(symbol, timeframe, limit=10)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol} {timeframe}: {e}")
            
            self.stats['last_successful_update'] = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _start_fallback_mode(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ fallback (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        logger.warning("‚ö†Ô∏è –†–µ–∂–∏–º fallback –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for symbol in self.symbols:
            base_price = 100.0 + hash(symbol) % 1000  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
            self.current_prices[symbol] = base_price
            
            for timeframe in self.timeframes:
                # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                simulated_data = []
                for i in range(100):
                    timestamp = int(time.time() * 1000) - i * 60000  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞–∑–∞–¥
                    price_change = (np.random.random() - 0.5) * 0.02  # ¬±1% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    price = base_price * (1 + price_change)
                    
                    simulated_data.append(MarketData(
                        symbol=symbol,
                        timeframe=timeframe,
                        open_price=price,
                        high_price=price * 1.01,
                        low_price=price * 0.99,
                        close_price=price,
                        volume=np.random.random() * 1000000,
                        timestamp=timestamp
                    ))
                
                self.data_cache[symbol][timeframe] = simulated_data
    
    def get_dataframe(self, symbol: str, timeframe: str, limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            data = self.data_cache.get(symbol, {}).get(timeframe, [])
            if not data:
                return pd.DataFrame()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            df_data = []
            for candle in data[-limit:]:
                df_data.append({
                    'timestamp': candle.timestamp,
                    'datetime': datetime.fromtimestamp(candle.timestamp / 1000),
                    'open': candle.open_price,
                    'high': candle.high_price,
                    'low': candle.low_price,
                    'close': candle.close_price,
                    'volume': candle.volume,
                    'symbol': candle.symbol,
                    'timeframe': candle.timeframe
                })
            
            df = pd.DataFrame(df_data)
            if not df.empty:
                df.set_index('datetime', inplace=True)
                df.sort_index(inplace=True)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DataFrame {symbol} {timeframe}: {e}")
            return pd.DataFrame()
    
    def get_all_current_prices(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω"""
        return self.current_prices.copy()
    
    def get_cache_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        cache_info = {}
        for symbol in self.symbols:
            cache_info[symbol] = {}
            for timeframe in self.timeframes:
                data = self.data_cache.get(symbol, {}).get(timeframe, [])
                cache_info[symbol][timeframe] = len(data)
        
        return {
            'cache_info': cache_info,
            'stats': self.stats,
            'is_connected': self.is_connected,
            'fallback_mode': self.fallback_mode,
            'last_update': self.stats['last_successful_update']
        }
    
    def cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        try:
            current_time = time.time()
            for symbol in self.data_cache:
                for timeframe in self.data_cache[symbol]:
                    data = self.data_cache[symbol][timeframe]
                    
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
                    if len(data) > self.cache_size:
                        self.data_cache[symbol][timeframe] = data[-self.cache_size:]
            
            logger.info("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        self.is_running = False
        
        if self.session:
            await self.session.close()
        
        if self.update_thread and self.update_thread.is_alive():
            self.update_thread.join(timeout=5)
        
        logger.info("‚úÖ –û–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_global_data_manager = None

def get_data_manager() -> OnlineDataManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    global _global_data_manager
    if _global_data_manager is None:
        _global_data_manager = OnlineDataManager()
    return _global_data_manager

async def initialize_data_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    global _global_data_manager
    if _global_data_manager is None:
        _global_data_manager = OnlineDataManager()
        await _global_data_manager.initialize()
    return _global_data_manager 