"""
üß† –ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
"""

from typing import Dict, List
from datetime import datetime

class AIAnalysisEngine:
    """–ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    
    def __init__(self, multi_timeframe_analyzer=None):
        self.multi_timeframe_analyzer = multi_timeframe_analyzer
        self.analysis_history = []
        self.market_sentiment = 'neutral'
        
    def analyze_market_conditions(self, prices: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"""
        analysis = {
            'timestamp': datetime.now().isoformat(),
            'market_sentiment': 'neutral',
            'volatility': 'low',
            'trend_strength': 'weak',
            'risk_level': 'medium',
            'opportunity_score': 0.0,
            'recommendation': 'HOLD',
            'confidence': 0.0,
            'reasoning': []
        }
        
        if not prices:
            return analysis
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
        positive_count = sum(1 for data in prices.values() if data.get('change_24h', 0) > 0)
        negative_count = sum(1 for data in prices.values() if data.get('change_24h', 0) < 0)
        total_coins = len(prices)
        
        if total_coins > 0:
            positive_ratio = positive_count / total_coins
            
            if positive_ratio > 0.6:
                analysis['market_sentiment'] = 'bullish'
                analysis['reasoning'].append(f"üìà –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫: {positive_count}/{total_coins} –º–æ–Ω–µ—Ç —Ä–∞—Å—Ç—É—Ç")
            elif positive_ratio < 0.4:
                analysis['market_sentiment'] = 'bearish'
                analysis['reasoning'].append(f"üìâ –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫: {negative_count}/{total_coins} –º–æ–Ω–µ—Ç –ø–∞–¥–∞—é—Ç")
            else:
                analysis['reasoning'].append(f"‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫: {positive_count}/{total_coins} —Ä–∞—Å—Ç—É—Ç, {negative_count}/{total_coins} –ø–∞–¥–∞—é—Ç")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        max_change = max(abs(data.get('change_24h', 0)) for data in prices.values()) if prices else 0
        if max_change > 10:
            analysis['volatility'] = 'high'
            analysis['reasoning'].append(f"‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –º–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ {max_change:.1f}%")
        elif max_change > 5:
            analysis['volatility'] = 'medium'
            analysis['reasoning'].append(f"üìä –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –º–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ {max_change:.1f}%")
        else:
            analysis['reasoning'].append(f"üõ°Ô∏è –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –º–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ {max_change:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
        total_volume = sum(data.get('volume_24h', 0) for data in prices.values())
        if total_volume > 1000000000:  # 1B+
            analysis['reasoning'].append("üí∞ –í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π –æ–±—ä–µ–º - —Å–∏–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
            analysis['opportunity_score'] += 0.2
        elif total_volume < 100000000:  # 100M-
            analysis['reasoning'].append("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ–±—â–∏–π –æ–±—ä–µ–º - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
            analysis['opportunity_score'] -= 0.1
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
        if analysis['volatility'] == 'high':
            analysis['risk_level'] = 'high'
        elif analysis['volatility'] == 'low':
            analysis['risk_level'] = 'low'
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis['opportunity_score'] > 0.3:
            if analysis['market_sentiment'] == 'bullish':
                analysis['recommendation'] = 'LONG'
                analysis['confidence'] = min(0.9, 0.5 + analysis['opportunity_score'])
                analysis['reasoning'].append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É—é LONG - –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
            elif analysis['market_sentiment'] == 'bearish':
                analysis['recommendation'] = 'SHORT'
                analysis['confidence'] = min(0.9, 0.5 + analysis['opportunity_score'])
                analysis['reasoning'].append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É—é SHORT - –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        else:
            analysis['reasoning'].append("‚è∏Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é HOLD - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        return analysis
    
    def add_multi_timeframe_analysis(self, symbols: List[str], prices: Dict, log_callback=None) -> List[Dict]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
        if not self.multi_timeframe_analyzer:
            return []
        
        results = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö
        sorted_symbols = sorted(symbols, 
                              key=lambda s: abs(prices.get(s, {}).get('change_24h', 0)), 
                              reverse=True)[:5]
        
        if log_callback:
            log_callback("üß† –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú–û–í–´–ô –ê–ù–ê–õ–ò–ó:", "SIGNAL")
        
        for symbol in sorted_symbols:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                analysis = self.multi_timeframe_analyzer.analyze_symbol_multi_timeframe(symbol)
                
                if analysis and 'recommendation' in analysis:
                    recommendation = analysis['recommendation']
                    confidence = analysis['aggregated_signals'].get('confidence', 0)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if log_callback:
                        if recommendation == 'BUY':
                            message = f"üü¢ {symbol}: BUY (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"
                            log_callback(message, "SIGNAL")
                        elif recommendation == 'SELL':
                            message = f"üî¥ {symbol}: SELL (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"
                            log_callback(message, "SIGNAL")
                        else:
                            message = f"‚ö™ {symbol}: HOLD (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"
                            log_callback(message, "INFO")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
                        for reason in analysis.get('reasoning', [])[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–∏—á–∏–Ω—ã
                            log_callback(f"   ‚Ä¢ {reason}", "INFO")
                    
                    results.append(analysis)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue
        
        return results
    
    def add_market_summary(self, symbols: List[str], log_callback=None) -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä—ã–Ω–∫—É"""
        summary = {
            'buy_signals': 0,
            'sell_signals': 0,
            'hold_signals': 0,
            'total_analyzed': 0,
            'market_sentiment': 'neutral'
        }
        
        if not self.multi_timeframe_analyzer:
            return summary
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        for symbol in symbols[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –º–æ–Ω–µ—Ç
            try:
                analysis = self.multi_timeframe_analyzer.analyze_symbol_multi_timeframe(symbol)
                if analysis and 'recommendation' in analysis:
                    if analysis['recommendation'] == 'BUY':
                        summary['buy_signals'] += 1
                    elif analysis['recommendation'] == 'SELL':
                        summary['sell_signals'] += 1
                    else:
                        summary['hold_signals'] += 1
                    summary['total_analyzed'] += 1
            except:
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        if log_callback and summary['total_analyzed'] > 0:
            summary_text = f"üìä –°–≤–æ–¥–∫–∞: BUY: {summary['buy_signals']} | SELL: {summary['sell_signals']} | HOLD: {summary['hold_signals']}"
            log_callback(summary_text, "METRICS")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            if summary['buy_signals'] > summary['sell_signals'] * 2:
                summary['market_sentiment'] = 'bullish'
                log_callback("üéØ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ë–´–ß–¨–ï - –∏—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫", "SIGNAL")
            elif summary['sell_signals'] > summary['buy_signals'] * 2:
                summary['market_sentiment'] = 'bearish'
                log_callback("üéØ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ú–ï–î–í–ï–ñ–¨–ï - –∏—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂", "SIGNAL")
            else:
                summary['market_sentiment'] = 'neutral'
                log_callback("üéØ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ù–ï–ô–¢–†–ê–õ–¨–ù–û–ï - –∂–¥—É —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", "INFO")
        
        return summary
    
    def search_trading_opportunities(self, prices: Dict, log_callback=None) -> List[str]:
        """–ò—â–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        opportunities = []
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            for symbol, price_data in prices.items():
                # –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                change_24h = price_data.get('change_24h', 0)
                volume = price_data.get('volume_24h', 0)
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: —Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                if change_24h > 5 and volume > 50000000:  # 5% —Ä–æ—Å—Ç + 50M –æ–±—ä–µ–º
                    opportunities.append(f"üöÄ {symbol}: –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{change_24h:.1f}% (–æ–±—ä–µ–º: ${volume/1e6:.1f}M)")
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                elif change_24h < -5 and volume > 50000000:  # 5% –ø–∞–¥–µ–Ω–∏–µ + 50M –æ–±—ä–µ–º
                    opportunities.append(f"üìâ {symbol}: –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {change_24h:.1f}% (–æ–±—ä–µ–º: ${volume/1e6:.1f}M)")
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç: —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                elif change_24h > 15:  # –ë–æ–ª–µ–µ 15% —Ä–æ—Å—Ç–∞ - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç
                    opportunities.append(f"‚ö†Ô∏è {symbol}: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{change_24h:.1f}% - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç")
                elif change_24h < -15:  # –ë–æ–ª–µ–µ 15% –ø–∞–¥–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç
                    opportunities.append(f"‚ö†Ô∏è {symbol}: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {change_24h:.1f}% - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if log_callback:
                if opportunities:
                    log_callback("üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", "SIGNAL")
                    for opp in opportunities[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                        log_callback(f"   ‚Ä¢ {opp}", "INFO")
                else:
                    log_callback("üîç –¢–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∂–¥—É –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π", "INFO")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        
        return opportunities
    
    def learn_from_trade(self, trade_result: Dict):
        """–£—á–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        insight = {
            'timestamp': datetime.now().isoformat(),
            'symbol': trade_result.get('symbol', ''),
            'entry_price': trade_result.get('entry_price', 0),
            'exit_price': trade_result.get('exit_price', 0),
            'pnl': trade_result.get('pnl', 0),
            'pnl_pct': trade_result.get('pnl_pct', 0),
            'duration': trade_result.get('duration', 0),
            'analysis_at_entry': trade_result.get('analysis_at_entry', {}),
            'lessons_learned': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if trade_result.get('pnl_pct', 0) > 0:
            insight['lessons_learned'].append("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞ - —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏")
            if trade_result.get('pnl_pct', 0) > 2:
                insight['lessons_learned'].append("üéØ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
        else:
            insight['lessons_learned'].append("‚ùå –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞ - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—Ö–æ–¥–∞")
            if trade_result.get('pnl_pct', 0) < -2:
                insight['lessons_learned'].append("‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = trade_result.get('duration', 0)
        if duration < 300:  # 5 –º–∏–Ω—É—Ç
            insight['lessons_learned'].append("‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–¥–µ–ª–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–ª—å—à–µ –¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é")
        elif duration > 3600:  # 1 —á–∞—Å
            insight['lessons_learned'].append("‚è∞ –î–æ–ª–≥–∞—è —Å–¥–µ–ª–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å")
        
        self.analysis_history.append(insight)
        
        return insight
    
    def get_recent_insights(self, limit: int = 5) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏"""
        recent_insights = []
        for insight in self.analysis_history[-limit:]:
            for lesson in insight.get('lessons_learned', []):
                recent_insights.append(f"{insight.get('symbol', '')}: {lesson}")
        return recent_insights 