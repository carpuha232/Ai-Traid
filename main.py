"""
üöÄ –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º —Å —Ü–µ–ª—å—é –≤–∏–Ω—Ä–µ–π—Ç–∞ 70%+ –Ω–∞ –∫–∞–∂–¥–æ–º
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from learning_engine import ProgressiveLearningEngine
from data_loader import RawDataLoader

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üß† –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ê–í–¢–û–ù–û–ú–ù–û–ô –ù–ï–ô–†–û–°–ï–¢–ò")
    print("=" * 60)
    print("üéØ –¶–µ–ª—å: –≤–∏–Ω—Ä–µ–π—Ç 70%+ –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ")
    print("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è: 1M ‚Üí 1w ‚Üí 1d ‚Üí 12h ‚Üí 8h ‚Üí 6h ‚Üí 4h ‚Üí 2h ‚Üí 1h ‚Üí 30m ‚Üí 15m ‚Üí 5m ‚Üí 3m ‚Üí 1m")
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∏—á—å 70%+ –≤–∏–Ω—Ä–µ–π—Ç–∞")
    print("üìä –û–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ü–µ–Ω–∞, –æ–±—ä–µ–º, –≤—Ä–µ–º—è)")
    print("üö´ –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (RSI, MA, MACD –∏ —Ç.–¥.)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_loader = RawDataLoader()
    available_data = data_loader.scan_available_data()
    
    if not available_data:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
        print("üìÅ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ .venv/data/historical –µ—Å—Ç—å ZIP —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(available_data)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫ –æ–±—É—á–µ–Ω–∏—è
    learning_engine = ProgressiveLearningEngine(initial_capital=100.0)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    try:
        start_time = time.time()
        learning_engine.start_progressive_learning()
        end_time = time.time()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = learning_engine.get_learning_summary()
        
        print(f"\nüèÅ –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60)
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {(end_time - start_time) / 60:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –¢–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {summary['current_timeframe']}")
        print(f"üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {summary['current_cycle']}")
        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${summary['current_capital']:.2f}")
        print(f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${summary['current_profit']:.2f}")
        
        if summary['timeframe_history']:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–ù–´–ï –¢–ê–ô–ú–§–†–ï–ô–ú–´:")
            for record in summary['timeframe_history']:
                print(f"   üìä {record['timeframe']}: —Ü–∏–∫–ª {record['cycle']}, –∫–∞–ø–∏—Ç–∞–ª ${record['capital']:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        if summary['current_timeframe_index'] >= len(learning_engine.timeframe_progression):
            print(f"\nüèÜ –í–°–ï –¢–ê–ô–ú–§–†–ï–ô–ú–´ –ü–†–û–ô–î–ï–ù–´! –û–ë–£–ß–ï–ù–ò–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–û!")
        else:
            print(f"\n‚è∏Ô∏è –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {summary['current_timeframe']}")
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {summary['current_timeframe_index'] + 1}/{len(learning_engine.timeframe_progression)}")
        
    except KeyboardInterrupt:
        print(f"\n‚è∏Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        summary = learning_engine.get_learning_summary()
        print(f"üìä –¢–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {summary['current_timeframe']}")
        print(f"üí∞ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${summary['current_capital']:.2f}")
        print(f"üìà –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${summary['current_profit']:.2f}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 