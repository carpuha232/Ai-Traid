#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
from trading_bot.data_loader import HistoricalDataLoader
import matplotlib.pyplot as plt
from datetime import datetime

def test_data_loader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    loader = HistoricalDataLoader()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    coins = loader.get_available_coins()
    timeframes = loader.get_available_timeframes()
    
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {len(coins)}")
    print(f"üìà –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö BTCUSDT
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ BTCUSDT...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    btc_1h = loader.get_coin_data('BTCUSDT', '1h', start_date='2025-05-01')
    print(f"BTCUSDT 1h (–º–∞–π 2025): {len(btc_1h)} —Å—Ç—Ä–æ–∫")
    
    if len(btc_1h) > 0:
        print(f"–ü–µ—Ä–∏–æ–¥: {btc_1h['open_time'].min()} - {btc_1h['open_time'].max()}")
        print(f"–¶–µ–Ω–∞: {btc_1h['close'].min():.2f} - {btc_1h['close'].max():.2f}")
        print(f"–û–±—ä–µ–º: {btc_1h['volume'].sum():,.0f}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
    btc_all = loader.get_coin_data('BTCUSDT', '1h')
    print(f"BTCUSDT 1h (–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥): {len(btc_all)} —Å—Ç—Ä–æ–∫")
    
    if len(btc_all) > 0:
        print(f"–ü–µ—Ä–∏–æ–¥: {btc_all['open_time'].min()} - {btc_all['open_time'].max()}")
        print(f"–¶–µ–Ω–∞: {btc_all['close'].min():.2f} - {btc_all['close'].max():.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤...")
    
    for tf in ['5m', '15m', '30m', '1h', '2h', '4h']:
        data = loader.get_coin_data('BTCUSDT', tf, start_date='2025-05-01')
        print(f"BTCUSDT {tf}: {len(data)} —Å—Ç—Ä–æ–∫")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–æ–Ω–µ—Ç...")
    
    test_coins = ['ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
    for coin in test_coins:
        data = loader.get_coin_data(coin, '1h', start_date='2025-05-01')
        print(f"{coin} 1h: {len(data)} —Å—Ç—Ä–æ–∫")
    
    return btc_all

def analyze_data_quality(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    if len(df) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    missing = df.isnull().sum()
    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n{missing}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = df.duplicated().sum()
    print(f"–î—É–±–ª–∏–∫–∞—Ç—ã: {duplicates}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
    df_sorted = df.sort_values('open_time')
    time_diff = df_sorted['open_time'].diff()
    print(f"–°—Ä–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: {time_diff.mean()}")
    print(f"–ú–∏–Ω. –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: {time_diff.min()}")
    print(f"–ú–∞–∫—Å. –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: {time_diff.max()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Ü–µ–Ω–∞—Ö
    price_stats = df[['open', 'high', 'low', 'close']].describe()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω:\n{price_stats}")

def create_sample_chart(df):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"""
    if len(df) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return
    
    print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞...")
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–æ—á–µ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    df_chart = df.tail(100).copy()
    
    plt.figure(figsize=(12, 6))
    plt.plot(df_chart['open_time'], df_chart['close'], label='Close Price')
    plt.title('BTCUSDT Price Chart (Last 100 points)')
    plt.xlabel('Time')
    plt.ylabel('Price (USDT)')
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.savefig('btc_sample_chart.png', dpi=300, bbox_inches='tight')
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'btc_sample_chart.png'")
    plt.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
        btc_data = test_data_loader()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        analyze_data_quality(btc_data)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        create_sample_chart(btc_data)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 