#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
"""

import sys
import os
sys.path.append('trading_bot')

from trading_bot.data_loader import HistoricalDataLoader
from datetime import datetime

def test_period_selection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    loader = HistoricalDataLoader()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    test_periods = [
        ("2024-07-01", "2024-12-31"),  # –í—Ç–æ—Ä–æ–µ –ø–æ–ª—É–≥–æ–¥–∏–µ 2024
        ("2025-01-01", "2025-06-30"),  # –ü–µ—Ä–≤–æ–µ –ø–æ–ª—É–≥–æ–¥–∏–µ 2025
        ("2024-10-01", "2025-03-31"),  # –ü–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–π –ø–µ—Ä–∏–æ–¥
        ("2025-05-01", "2025-05-31"),  # –û–¥–∏–Ω –º–µ—Å—è—Ü
    ]
    
    for start_date, end_date in test_periods:
        print(f"\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º BTCUSDT
        btc_data = loader.get_coin_data('BTCUSDT', '1h', start_date, end_date)
        
        if len(btc_data) > 0:
            print(f"‚úÖ BTCUSDT: {len(btc_data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
            avg_price = btc_data['close'].mean()
            volatility = btc_data['close'].std() / avg_price * 100
            start_price = btc_data.iloc[0]['close']
            end_price = btc_data.iloc[-1]['close']
            trend = ((end_price - start_price) / start_price) * 100
            
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:.2f}")
            print(f"   üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.1f}%")
            print(f"   üìâ –¢—Ä–µ–Ω–¥: {trend:+.1f}%")
        else:
            print(f"‚ùå BTCUSDT: –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ETHUSDT
        eth_data = loader.get_coin_data('ETHUSDT', '1h', start_date, end_date)
        if len(eth_data) > 0:
            print(f"‚úÖ ETHUSDT: {len(eth_data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print(f"‚ùå ETHUSDT: –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def test_ui_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å UI"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UI...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
        from trading_bot.dashboard_core import DashboardCore
        from trading_bot.dashboard_ui import DashboardUI
        from trading_bot.dashboard_logic import DashboardLogic
        
        print("‚úÖ –í—Å–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        ui_methods = ['apply_period_selection', 'start_date_var', 'end_date_var']
        logic_methods = ['set_analysis_period', 'run_period_analysis']
        
        print("‚úÖ –ú–µ—Ç–æ–¥—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞")
    print("=" * 50)
    
    test_period_selection()
    test_ui_integration()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: python trading_bot/dashboard_core.py")
    print("2. –í —à–∞–ø–∫–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª—è '–û—Ç:' –∏ '–î–æ:'")
    print("3. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
    print("4. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å'")
    print("5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—è–≤—è—Ç—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ") 