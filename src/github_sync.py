"""
üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
"""

import os
import json
import shutil
import subprocess
import tempfile
from datetime import datetime
from typing import Dict, List, Any, Optional
import git
from pathlib import Path

class GitHubKnowledgeSync:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    """
    
    def __init__(self, repo_url: str = None, branch: str = "knowledge-base", 
                 local_data_dir: str = "learning_data", 
                 remote_data_dir: str = "knowledge_data"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            repo_url: URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ None, –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)
            branch: –í–µ—Ç–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            local_data_dir: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            remote_data_dir: –ü–∞–ø–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        """
        self.repo_url = repo_url
        self.branch = branch
        self.local_data_dir = local_data_dir
        self.remote_data_dir = remote_data_dir
        self.repo = None
        self.sync_enabled = True
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(self.local_data_dir, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        self._init_repository()
    
    def _init_repository(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            if os.path.exists('.git'):
                self.repo = git.Repo('.')
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {self.repo.remotes.origin.url if self.repo.remotes else '–õ–æ–∫–∞–ª—å–Ω—ã–π'}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                self.repo = git.Repo.init('.')
                print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL, –¥–æ–±–∞–≤–ª—è–µ–º remote
            if self.repo_url and not self.repo.remotes:
                self.repo.create_remote('origin', self.repo_url)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω remote: {self.repo_url}")
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if self.branch not in [b.name for b in self.repo.branches]:
                self.repo.git.checkout('-b', self.branch)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ç–∫–∞: {self.branch}")
            else:
                self.repo.git.checkout(self.branch)
                print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –≤–µ—Ç–∫—É: {self.branch}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            os.makedirs(self.remote_data_dir, exist_ok=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º .gitkeep —á—Ç–æ–±—ã –ø–∞–ø–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª–∞—Å—å
            gitkeep_file = os.path.join(self.remote_data_dir, '.gitkeep')
            if not os.path.exists(gitkeep_file):
                with open(gitkeep_file, 'w') as f:
                    f.write('# This file ensures the directory is tracked by Git\n')
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Git: {e}")
            self.sync_enabled = False
    
    def sync_to_github(self, commit_message: str = None) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å GitHub
        
        Args:
            commit_message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        if not self.sync_enabled or not self.repo:
            print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
            if not commit_message:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                commit_message = f"ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {timestamp}"
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            self._copy_data_to_repo()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            self.repo.git.add(self.remote_data_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if not self.repo.index.diff('HEAD'):
                print("üìù –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
                return True
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.repo.index.commit(commit_message)
            print(f"‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {commit_message}")
            
            # –ü—É—à–∏–º –≤ GitHub
            if self.repo.remotes:
                self.repo.remotes.origin.push(self.branch)
                print(f"üöÄ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub (–≤–µ—Ç–∫–∞: {self.branch})")
            
            # –ü–æ—Å–ª–µ push:
            info = self.get_last_commit_info()
            print(f"[GIT] –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {info}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub: {e}")
            return False
    
    def sync_from_github(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å GitHub
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        """
        if not self.sync_enabled or not self.repo:
            print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–µ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
            self.repo.git.checkout(self.branch)
            
            # –ü—É–ª–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if self.repo.remotes:
                self.repo.remotes.origin.pull(self.branch)
                print(f"üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å GitHub (–≤–µ—Ç–∫–∞: {self.branch})")
            
            # –ü–æ—Å–ª–µ pull:
            info = self.get_last_commit_info()
            print(f"[GIT] –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {info}")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
            self._copy_data_from_repo()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å GitHub: {e}")
            return False
    
    def _copy_data_to_repo(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        try:
            # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            if os.path.exists(self.remote_data_dir):
                for file in os.listdir(self.remote_data_dir):
                    if file != '.gitkeep':
                        os.remove(os.path.join(self.remote_data_dir, file))
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
            if os.path.exists(self.local_data_dir):
                for file in os.listdir(self.local_data_dir):
                    if file.endswith('.json') or file.endswith('.txt'):
                        src = os.path.join(self.local_data_dir, file)
                        dst = os.path.join(self.remote_data_dir, file)
                        shutil.copy2(src, dst)
            
            print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {self.remote_data_dir}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _copy_data_from_repo(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
            os.makedirs(self.local_data_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            if os.path.exists(self.remote_data_dir):
                for file in os.listdir(self.remote_data_dir):
                    if file != '.gitkeep' and (file.endswith('.json') or file.endswith('.txt')):
                        src = os.path.join(self.remote_data_dir, file)
                        dst = os.path.join(self.local_data_dir, file)
                        shutil.copy2(src, dst)
            
            print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {self.local_data_dir}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_sync_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self.repo:
                return {
                    'sync_enabled': False,
                    'repo_initialized': False,
                    'last_commit': None,
                    'branch': None,
                    'remote_url': None
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
            last_commit = None
            if self.repo.head.is_valid():
                last_commit = {
                    'hash': self.repo.head.commit.hexsha[:8],
                    'message': self.repo.head.commit.message.strip(),
                    'author': self.repo.head.commit.author.name,
                    'date': datetime.fromtimestamp(self.repo.head.commit.committed_date).isoformat()
                }
            
            return {
                'sync_enabled': self.sync_enabled,
                'repo_initialized': True,
                'last_commit': last_commit,
                'branch': self.repo.active_branch.name,
                'remote_url': self.repo.remotes.origin.url if self.repo.remotes else None,
                'local_data_files': len([f for f in os.listdir(self.local_data_dir) if f.endswith(('.json', '.txt'))]) if os.path.exists(self.local_data_dir) else 0
            }
            
        except Exception as e:
            return {
                'sync_enabled': False,
                'error': str(e)
            }
    
    def merge_knowledge_bases(self) -> Dict[str, Any]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å GitHub
            if self.sync_from_github():
                print("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–∞–∑ –∑–Ω–∞–Ω–∏–π...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
                local_files = set()
                remote_files = set()
                
                if os.path.exists(self.local_data_dir):
                    local_files = set([f for f in os.listdir(self.local_data_dir) if f.endswith('.json')])
                
                if os.path.exists(self.remote_data_dir):
                    remote_files = set([f for f in os.listdir(self.remote_data_dir) if f.endswith('.json')])
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                new_files = remote_files - local_files
                
                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                for file in new_files:
                    src = os.path.join(self.remote_data_dir, file)
                    dst = os.path.join(self.local_data_dir, file)
                    shutil.copy2(src, dst)
                
                return {
                    'success': True,
                    'local_files': len(local_files),
                    'remote_files': len(remote_files),
                    'new_files': len(new_files),
                    'merged_files': list(new_files)
                }
            
            return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å GitHub'}
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def create_backup(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_dir = f"backup_knowledge_{timestamp}"
            
            if os.path.exists(self.local_data_dir):
                shutil.copytree(self.local_data_dir, backup_dir)
                print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
                return backup_dir
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return ""
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return ""
    
    def setup_auto_sync(self, interval_minutes: int = 1):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_script = f"""#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
cd "{os.getcwd()}"
python -c "
from trading_bot.github_sync import GitHubKnowledgeSync
sync = GitHubKnowledgeSync()
sync.sync_from_github()
sync.sync_to_github('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è')
"
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
            script_path = "auto_sync.sh"
            with open(script_path, 'w') as f:
                f.write(sync_script)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(script_path, 0o755)
            
            # –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á—É (–¥–ª—è Linux/Mac)
            cron_job = f"*/{interval_minutes} * * * * cd {os.getcwd()} && ./{script_path}\n"
            
            print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç)")
            print(f"üìù Cron –∑–∞–¥–∞—á–∞: {cron_job}")
            print("üí° –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")
            
            return script_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return ""

    def get_last_commit_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ –∏ —Ñ–∞–π–ª–∞—Ö –≤ knowledge_data"""
        try:
            commit = self.repo.head.commit
            files = os.listdir(self.remote_data_dir) if os.path.exists(self.remote_data_dir) else []
            return {
                'commit_hash': commit.hexsha[:8],
                'commit_message': commit.message.strip(),
                'commit_date': datetime.fromtimestamp(commit.committed_date).isoformat(),
                'files': files
            }
        except Exception as e:
            return {'error': str(e)}

class KnowledgeSyncManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
    """
    
    def __init__(self, dashboard_logic):
        self.dashboard_logic = dashboard_logic
        self.sync = GitHubKnowledgeSync()
        self.last_sync_time = None
    
    def sync_after_learning(self, commit_message: str = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            self.dashboard_logic.add_terminal_message("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub...", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_dir = self.sync.create_backup()
            if backup_dir:
                self.dashboard_logic.add_terminal_message(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}", "INFO")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å GitHub
            if self.sync.sync_to_github(commit_message):
                self.dashboard_logic.add_terminal_message("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å GitHub", "SUCCESS")
                self.last_sync_time = datetime.now()
            else:
                self.dashboard_logic.add_terminal_message("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub", "ERROR")
                
        except Exception as e:
            self.dashboard_logic.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
    
    def sync_before_learning(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—É—á–µ–Ω–∏—è"""
        try:
            self.dashboard_logic.add_terminal_message("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub...", "INFO")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            result = self.sync.merge_knowledge_bases()
            
            if result['success']:
                self.dashboard_logic.add_terminal_message(
                    f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {result['new_files']} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤", 
                    "SUCCESS"
                )
            else:
                self.dashboard_logic.add_terminal_message(
                    f"‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", 
                    "WARNING"
                )
                
        except Exception as e:
            self.dashboard_logic.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", "ERROR")
    
    def get_sync_status_message(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        status = self.sync.get_sync_status()
        
        if not status['sync_enabled']:
            return "‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        if not status['repo_initialized']:
            return "‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        msg = f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ | –í–µ—Ç–∫–∞: {status['branch']} | –§–∞–π–ª–æ–≤: {status['local_data_files']}"
        
        if status['last_commit']:
            msg += f" | –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {status['last_commit']['date'][:10]}"
        
        if self.last_sync_time:
            msg += f" | –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {self.last_sync_time.strftime('%H:%M:%S')}"
        
        return msg 