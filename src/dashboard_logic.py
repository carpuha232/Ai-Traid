"""
üß† –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω, –∞–Ω–∞–ª–∏–∑, —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import threading
import time
from datetime import datetime
import random
import tkinter as tk
from typing import Dict

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
from .aggressive_trade_system import AggressiveTradeSystem
import trading_bot.online_data_manager as online_data_manager

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
from evolutionary_rmm_agent import EvolutionaryRMMAgent
# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–Ω–∞–Ω–∏–π
from .knowledge_analyzer import KnowledgeAnalyzer
# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub
from .github_sync import KnowledgeSyncManager

class DashboardLogic:
    """–õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self, dashboard_core, dashboard_ui):
        self.core = dashboard_core
        self.ui = dashboard_ui
        self.colors = dashboard_core.colors
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.message_count = 0
        self.update_counter = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        self.aggressive_system = AggressiveTradeSystem(initial_balance=100.0)
        self.rmm_agent = EvolutionaryRMMAgent(population_size=20, mutation_rate=0.2, elite_frac=0.2)
        self.rmm_logs = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ –∏ –æ—à–∏–±–æ–∫ –∞–≥–µ–Ω—Ç–∞
        self.knowledge_analyzer = KnowledgeAnalyzer()  # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        self.sync_manager = KnowledgeSyncManager(self)  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub
        self.trading_active = False
        self.last_trading_check = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_settings = {
            'auto_trading': False,
            'risk_per_trade': 0.01,  # 1%
            'max_positions': 3,
            'min_confidence': 0.35,
            'aggression_mode': True
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_period = {
            'start_date': '2024-07-01',
            'end_date': '2025-05-31'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ –º–∞—è 2025
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞)
        self.trading_period = {
            'start_date': '2024-10-01',  # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–∫—Ç—è–±—Ä—è 2024
            'end_date': '2024-12-31'     # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –¥–µ–∫–∞–±—Ä–µ–º 2024
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        try:
            from .data_loader import HistoricalDataLoader
            self.data_loader = HistoricalDataLoader()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._check_available_data()
        except ImportError:
            try:
                from data_loader import HistoricalDataLoader
                self.data_loader = HistoricalDataLoader()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self._check_available_data()
            except ImportError:
                self.data_loader = None
                print("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def _check_available_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if not self.data_loader:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            available_coins = self.data_loader.get_available_coins()
            available_timeframes = self.data_loader.get_available_timeframes()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT –Ω–∞ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
            btc_data = self.data_loader.get_coin_data('BTCUSDT', '1h')
            
            if len(btc_data) > 0:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
                min_date = btc_data['open_time'].min()
                max_date = btc_data['open_time'].max()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
                self.analysis_period['start_date'] = min_date.strftime('%Y-%m-%d')
                self.analysis_period['end_date'] = max_date.strftime('%Y-%m-%d')
                
                self.add_terminal_message(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –ú–æ–Ω–µ—Ç: {len(available_coins)}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {len(available_timeframes)}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {self.analysis_period['start_date']} - {self.analysis_period['end_date']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö BTC: {len(btc_data)}", "INFO")
            else:
                self.add_terminal_message("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ BTCUSDT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "WARNING")
                
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", "ERROR")
    
    def start_price_updates(self):
        """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã"""
        def update_loop():
            # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
            while True:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ price_manager –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    api_ok = False
                    if hasattr(self.core, 'price_manager') and self.core.price_manager:
                        api_ok = self.core.price_manager.simulate_price_change()
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ core –∏–∑ price_manager
                        for symbol in self.core.symbols:
                            if symbol in self.core.price_manager.prices:
                                price_data = self.core.price_manager.prices[symbol]
                                if symbol not in self.core.prices:
                                    self.core.prices[symbol] = {}
                                self.core.prices[symbol].update(price_data)
                                if symbol in self.core.price_manager.price_history:
                                    self.core.price_history[symbol] = self.core.price_history[symbol].copy()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–æ–≤
                    balance_info = online_data_manager.get_futures_balance()
                    usdt_balance = None
                    if isinstance(balance_info, list):
                        for acc in balance_info:
                            if acc.get('asset') == 'USDT':
                                usdt_balance = float(acc.get('balance', 0))
                                break
                    elif isinstance(balance_info, dict) and 'error' in balance_info:
                        usdt_balance = None
                    if usdt_balance is not None:
                        self.core.futures_balance_var.set(f"Futures USDT: {usdt_balance:.2f}")
                    else:
                        self.core.futures_balance_var.set("Futures USDT: --")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    for symbol in self.core.symbols:
                        self.update_coin_card(symbol)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.update_statistics()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
                    self.update_trading_stats()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    current_time = datetime.now().strftime("%H:%M:%S")
                    if api_ok:
                        api_status = "üü¢ API: OK"
                    else:
                        api_status = "üî¥ API: –û—à–∏–±–∫–∞"
                    self.core.api_status_var.set(api_status)
                    status_text = f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} | –ú–æ–Ω–µ—Ç: 30 | üì° –†–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã Binance"
                    self.ui.status_var.set(status_text)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                    self.update_counter += 1
                    
                    # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                    time.sleep(3)
                    
                except Exception as e:
                    # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
                    time.sleep(5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        update_thread = threading.Thread(target=update_loop, daemon=True)
        update_thread.start()
    
    def simulate_price_change(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Å Binance API —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º price_manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if hasattr(self.core, 'price_manager') and self.core.price_manager:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ price_manager
            self.core.price_manager.simulate_price_change()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ core –∏–∑ price_manager
            for symbol in self.core.symbols:
                if symbol in self.core.price_manager.prices:
                    price_data = self.core.price_manager.prices[symbol]
                    if symbol not in self.core.prices:
                        self.core.prices[symbol] = {}
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    self.core.prices[symbol].update(price_data)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    if symbol in self.core.price_manager.price_history:
                        self.core.price_history[symbol] = self.core.price_history[symbol].copy()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    
    def update_coin_card(self, symbol):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–Ω–µ—Ç—ã"""
        if symbol not in self.ui.coin_cards or symbol not in self.core.prices:
            return
        
        card = self.ui.coin_cards[symbol]
        price_data = self.core.prices[symbol]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        current_price = price_data['current']
        if current_price >= 1:
            price_text = f"${current_price:.2f}"
        elif current_price >= 0.01:
            price_text = f"${current_price:.4f}"
        else:
            price_text = f"${current_price:.8f}"
        
        card.labels['price'].config(text=price_text)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        change_24h = price_data['change_24h']
        if change_24h > 0:
            change_text = f"+{change_24h:.1f}%"
            change_color = self.colors.colors['green']
        elif change_24h < 0:
            change_text = f"{change_24h:.1f}%"
            change_color = self.colors.colors['red']
        else:
            change_text = f"{change_24h:.1f}%"
            change_color = self.colors.colors['text_gray']
        
        card.labels['change'].config(text=change_text, fg=change_color)
        
        # –û–±—ä–µ–º (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        volume = price_data['volume_24h']
        if volume >= 1_000_000_000:
            volume_text = f"Vol: ${volume/1_000_000_000:.1f}B"
        elif volume >= 1_000_000:
            volume_text = f"Vol: ${volume/1_000_000:.1f}M"
        else:
            volume_text = f"Vol: ${volume/1_000:.1f}K"
        
        card.labels['volume'].config(text=volume_text)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        if price_data['current'] > price_data['previous']:
            card.configure(bg=self.colors.colors['green'])
            card.after(200, lambda: card.configure(bg=self.colors.colors['bg_dark']))
        elif price_data['current'] < price_data['previous']:
            card.configure(bg=self.colors.colors['red'])
            card.after(200, lambda: card.configure(bg=self.colors.colors['bg_dark']))
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        positive_count = 0
        negative_count = 0
        total_volume = 0
        
        for symbol, price_data in self.core.prices.items():
            if price_data['change_24h'] > 0:
                positive_count += 1
            elif price_data['change_24h'] < 0:
                negative_count += 1
            
            total_volume += price_data['volume_24h']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.ui.stats_labels["üìà 0"].config(text=f"üìà {positive_count}")
        self.ui.stats_labels["üìâ 0"].config(text=f"üìâ {negative_count}")
        
        if total_volume >= 1_000_000_000:
            volume_text = f"üí∞ ${total_volume/1_000_000_000:.1f}B"
        elif total_volume >= 1_000_000:
            volume_text = f"üí∞ ${total_volume/1_000_000:.1f}M"
        else:
            volume_text = f"üí∞ ${total_volume/1_000:.1f}K"
        
        self.ui.stats_labels["üí∞ $0"].config(text=volume_text)
    
    def update_trading_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏
        stats = self.core.simulation.stats
        balance = self.core.simulation.balance
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–Ω—Ä–µ–π—Ç
        winrate = 0.0
        if stats['total_trades'] > 0:
            winrate = (stats['winning_trades'] / stats['total_trades']) * 100
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É
        max_drawdown = 0.0
        if self.core.simulation.initial_balance > 0:
            current_drawdown = ((self.core.simulation.initial_balance - balance) / self.core.simulation.initial_balance) * 100
            max_drawdown = max(max_drawdown, current_drawdown)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
        self.ui.trading_stats_labels["üí∞ –ë–∞–ª–∞–Ω—Å: $100.00"].config(
            text=f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
        
        self.ui.trading_stats_labels["üìà –í–∏–Ω—Ä–µ–π—Ç: 0.0%"].config(
            text=f"üìà –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%")
        
        self.ui.trading_stats_labels["üìä –°–¥–µ–ª–æ–∫: 0"].config(
            text=f"üìä –°–¥–µ–ª–æ–∫: {stats['total_trades']}")
        
        self.ui.trading_stats_labels["üíµ PnL: $0.00"].config(
            text=f"üíµ PnL: ${stats['total_pnl']:+.2f}")
        
        self.ui.trading_stats_labels["üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 0"].config(
            text=f"üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['winning_trades']}")
        
        self.ui.trading_stats_labels["‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: 0"].config(
            text=f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['losing_trades']}")
        
        self.ui.trading_stats_labels["üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: 0.0%"].config(
            text=f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.1f}%")
        
        self.ui.trading_stats_labels["‚ö° –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: 0"].config(
            text=f"‚ö° –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.core.simulation.open_positions)}")
    
    def start_aggressive_trading(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ RM/MM –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            print("[DEBUG] start_aggressive_trading –≤—ã–∑–≤–∞–Ω")
            self.trading_active = True
            self.trading_settings['auto_trading'] = True
            self.add_terminal_message("üöÄ –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô RM/MM –ê–ì–ï–ù–¢ –ó–ê–ü–£–©–ï–ù", "SUCCESS")
            self.add_terminal_message("ü§ñ –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É—á–∏—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è", "INFO")
            self.add_terminal_message("")
            trading_thread = threading.Thread(target=self._evolutionary_trading_loop, daemon=True)
            trading_thread.start()
            print("[DEBUG] –ü–æ—Ç–æ–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}", "ERROR")

    def stop_aggressive_trading(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            self.trading_active = False
            self.trading_settings['auto_trading'] = False
            self.add_terminal_message("‚èπÔ∏è –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô RM/MM –ê–ì–ï–ù–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù", "WARNING")
            self.add_terminal_message("")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}", "ERROR")

    def _evolutionary_trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            print("[DEBUG] _evolutionary_trading_loop —Å—Ç–∞—Ä—Ç—É–µ—Ç")
            self.trading_active = True  # –Ø–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            self.add_terminal_message("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞", "DEBUG")
            symbols = self.core.symbols if hasattr(self.core, 'symbols') else []
            timeframe = self.ui.get_selected_timeframes() if hasattr(self.ui, 'get_selected_timeframes') else ['1h']
            speed = self.ui.sim_speed_var.get() if hasattr(self.ui, 'sim_speed_var') else '1:1'
            self.add_terminal_message(f"DEBUG: symbols={symbols}", "DEBUG")
            self.add_terminal_message(f"DEBUG: timeframes={timeframe}", "DEBUG")
            print(f"[DEBUG] symbols={symbols}")
            print(f"[DEBUG] timeframes={timeframe}")
            if not symbols:
                self.add_terminal_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!", "ERROR")
                print("[DEBUG] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
                return
            max_generations = 20
            trades_per_individual = 30
            generation = 0
            while self.trading_active and generation < max_generations:
                self.add_terminal_message(f"\nüß¨ –ü–æ–∫–æ–ª–µ–Ω–∏–µ {self.rmm_agent.generation+1}", "INFO")
                for i, ind in enumerate(self.rmm_agent.population):
                    if not self.trading_active:
                        break
                    log = f"\nü§ñ –ò–Ω–¥–∏–≤–∏–¥ {i+1}: {ind.describe()}"
                    self.add_terminal_message(log, "INFO")
                    self.rmm_logs.append({'generation': self.rmm_agent.generation+1, 'individual': i+1, 'params': ind.describe(), 'actions': []})
                    fitness, errors, actions = self._simulate_trading(ind, symbols, timeframe, trades_per_individual)
                    ind.fitness = fitness
                    for err in errors:
                        self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞: {err}", "ERROR")
                        self.rmm_logs[-1]['actions'].append({'error': err})
                    for act in actions:
                        self.add_terminal_message(f"üìù {act}", "INFO")
                        self.rmm_logs[-1]['actions'].append({'action': act})
                    self._update_trading_stats(fitness)
                if not self.trading_active:
                    break
                self.rmm_agent.log_population()
                self.rmm_agent.evolve()
                generation += 1
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                self.show_learning_statistics()
            self.add_terminal_message("üèÅ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            try:
                kb_file = self.rmm_agent.save_knowledge_base()
                self.add_terminal_message(f"üíæ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {kb_file}", "SUCCESS")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
                stats = self.rmm_agent.get_learning_statistics()
                self.add_terminal_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –ü–æ–∫–æ–ª–µ–Ω–∏–π: {stats['generation']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π winrate: {stats['avg_winrate']:.1f}%", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –õ—É—á—à–∏–π winrate: {stats['best_winrate']:.1f}%", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {stats['knowledge_base_size']} –∑–∞–ø–∏—Å–µ–π", "INFO")
            except Exception as e:
                self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}", "ERROR")
            self.add_terminal_message("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "WARNING")
            print("[DEBUG] –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            import traceback
            self.add_terminal_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}", "ERROR")
            self.add_terminal_message(traceback.format_exc(), "ERROR")
            print(f"[DEBUG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    def _simulate_trading(self, ind, symbols, timeframes, trades_per_individual):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–º–µ—Å—Ç–æ —Å–±—Ä–æ—Å–∞ –∫ 100
        balance = self.aggressive_system.current_balance
        win_trades = 0
        total_trades = 0
        errors = []
        actions = []
        open_positions = []
        margin_call_count = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ç–æ—Ä–≥–æ–≤–ª–∏
        historical_data = {}
        for symbol in symbols:
            for tf in timeframes:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    if self.data_loader is None:
                        self.add_terminal_message("‚ùå –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
                        return 0.0, ["–ù–µ—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"], []
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    data = self.data_loader.get_coin_data(symbol, tf)
                    if data is not None and len(data) > 0:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ç–æ—Ä–≥–æ–≤–ª–∏
                        filtered_data = self._filter_data_by_period(
                            data, 
                            self.trading_period['start_date'], 
                            self.trading_period['end_date']
                        )
                        if len(filtered_data) > 0:
                            historical_data[f"{symbol}_{tf}"] = filtered_data
                            self.add_terminal_message(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} {tf} –≤ –ø–µ—Ä–∏–æ–¥–µ {self.trading_period['start_date']} - {self.trading_period['end_date']}", "DEBUG")
                        else:
                            self.add_terminal_message(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {tf} –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ", "WARNING")
                except Exception as e:
                    self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol} {tf}: {e}", "ERROR")
        
        if not historical_data:
            self.add_terminal_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "ERROR")
            return 0.0, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"], []
        
        self.add_terminal_message(f"üìÖ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {self.trading_period['start_date']} - {self.trading_period['end_date']}", "INFO")
        
        t = 0
        while t < trades_per_individual:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
                symbol = random.choice(symbols)
                tf = random.choice(timeframes)
                data_key = f"{symbol}_{tf}"
                
                if data_key not in historical_data or len(historical_data[data_key]) == 0:
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–≤–µ—á—É –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                candle = historical_data[data_key].iloc[random.randint(0, len(historical_data[data_key]) - 1)]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ —Å–≤–µ—á–∏
                open_price = float(candle['open'])
                high_price = float(candle['high'])
                low_price = float(candle['low'])
                close_price = float(candle['close'])
                volume = float(candle['volume'])
                candle_time = candle['open_time']
                
                direction = random.choice(['LONG', 'SHORT'])
                entry_price = open_price  # –í—Ö–æ–¥–∏–º –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
                
                # –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –° –£–ß–ï–¢–û–ú –ü–õ–ï–ß–ê
                risk_amount = balance * ind.position_size
                leverage = ind.leverage
                position_size = (risk_amount * leverage) / entry_price
                margin_used = risk_amount / leverage
                open_time = candle_time.strftime('%Y-%m-%d %H:%M:%S')
                
                pos = {
                    'symbol': symbol,
                    'size': position_size,
                    'entry_price': entry_price,
                    'leverage': leverage,
                    'side': direction,
                    'budget': risk_amount,
                    'margin_used': margin_used,
                    'pnl_dollars': 0,
                    'pnl_pct': 0,
                    'open': True,
                    'open_time': open_time,
                    'close_time': None
                }
                open_positions.append(pos)
                actions.append(f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol} {direction} —Ä–∞–∑–º–µ—Ä {position_size:.4f} –ø–æ —Ü–µ–Ω–µ {entry_price:.2f} (—Ä–∏—Å–∫ ${risk_amount:.2f}, –ø–ª–µ—á–æ {leverage}x, –º–∞—Ä–∂–∞ ${margin_used:.2f}) –≤ {open_time}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞
                candle_volatility = (high_price - low_price) / open_price
                
                # –ë–ê–ó–û–í–´–ô –í–ò–ù–†–ï–ô–¢ - –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                base_winrate = 0.45  # –ë–∞–∑–æ–≤—ã–π –≤–∏–Ω—Ä–µ–π—Ç 45% (–±–ª–∏–∂–µ –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º winrate –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                # –í–º–µ—Å—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–≤–µ—á–∏
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ —Å–≤–µ—á–∏
                candle_trend = 'bullish' if close_price > open_price else 'bearish'
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ —Ç—Ä–µ–Ω–¥–∞ —Å–≤–µ—á–∏
                if (direction == 'LONG' and candle_trend == 'bullish') or (direction == 'SHORT' and candle_trend == 'bearish'):
                    base_winrate += 0.05  # +5% –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç—Ä–µ–Ω–¥–æ–º
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                if candle_volatility > 0.05:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    base_winrate -= 0.1  # -10% –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                elif candle_volatility < 0.01:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    base_winrate += 0.05  # +5% –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                winrate = min(0.65, max(0.25, base_winrate + random.uniform(-0.05, 0.05)))
                
                is_win = random.random() < winrate
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
                if is_win:
                    if direction == 'LONG':
                        exit_price = close_price  # –í—ã—Ö–æ–¥–∏–º –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                    else:  # SHORT
                        exit_price = low_price  # –î–ª—è —à–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º —Å–≤–µ—á–∏
                    pnl_pct = (exit_price - entry_price) / entry_price if direction == 'LONG' else (entry_price - exit_price) / entry_price
                else:
                    if direction == 'LONG':
                        exit_price = low_price  # –î–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ –ª–æ–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º
                    else:  # SHORT
                        exit_price = high_price  # –î–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ —à–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º
                    pnl_pct = (exit_price - entry_price) / entry_price if direction == 'LONG' else (entry_price - exit_price) / entry_price
                
                pnl = risk_amount * pnl_pct * leverage
                commission_rate = 0.0004
                position_volume = position_size * entry_price
                commission = position_volume * commission_rate * 2
                final_pnl = pnl - commission
                old_balance = balance
                balance += final_pnl
                
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] –°–≤–µ—á–∞: {open_time} | O:{open_price:.2f} H:{high_price:.2f} L:{low_price:.2f} C:{close_price:.2f}", "DEBUG")
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {candle_volatility:.3f} | –¢—Ä–µ–Ω–¥: {candle_trend}", "DEBUG")
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1%} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–û–ë–ï–î–ê' if is_win else '–ü–û–†–ê–ñ–ï–ù–ò–ï'}", "DEBUG")
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] PnL: ${final_pnl:+.2f} ({pnl_pct*100:+.1f}% * {leverage}x)", "DEBUG")
                
                pos['pnl_dollars'] = final_pnl
                pos['pnl_pct'] = final_pnl / risk_amount if risk_amount > 0 else 0
                pos['open'] = False
                close_time = candle_time.strftime('%Y-%m-%d %H:%M:%S')
                pos['close_time'] = close_time
                
                trade_data = {
                    'win': is_win,
                    'symbol': symbol,
                    'timeframe': tf,
                    'direction': direction,
                    'entry_price': entry_price,
                    'exit_price': exit_price,
                    'pnl': final_pnl,
                    'pnl_pct': final_pnl / risk_amount if risk_amount > 0 else 0,
                    'size': position_size,
                    'leverage': leverage,
                    'budget': risk_amount,
                    'margin_used': margin_used,
                    'commission': commission,
                    'duration': 'instant',
                    'open_time': open_time,
                    'close_time': close_time,
                    'market_conditions': {
                        'volatility': candle_volatility,
                        'trend': candle_trend,
                        'volume': volume,
                        'candle_range': high_price - low_price
                    }
                }
                ind.update_history(trade_data)
                if is_win:
                    win_trades += 1
                total_trades += 1
                actions.append(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol} {direction} PnL {final_pnl:+.2f} (–∫–æ–º–∏—Å—Å–∏—è: {commission:.2f}) –ë–∞–ª–∞–Ω—Å: {balance:.2f} –≤ {close_time}")
                current_winrate = (win_trades / total_trades) * 100
                actions.append(f"Winrate –ø–æ —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞ {len(ind.trade_history)} —Å–¥–µ–ª–æ–∫: {current_winrate:.1f}%")
                if current_winrate < 40:
                    actions.append("‚ùó –ê–≥–µ–Ω—Ç –∑–∞–º–µ—á–∞–µ—Ç, —á—Ç–æ winrate –Ω–∏–∑–∫–∏–π ‚Äî –±—É–¥–µ—Ç –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                elif current_winrate > 60:
                    actions.append("‚úÖ –ê–≥–µ–Ω—Ç –¥–æ–≤–æ–ª–µ–Ω winrate –∏ –±—É–¥–µ—Ç —Å—Ç–∞—Ä–∞—Ç—å—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —É—Å–ø–µ—Ö")
                self._update_positions_table(open_positions)
                open_positions = [p for p in open_positions if p['open']]
                analysis = self.knowledge_analyzer.analyze_trade_result(trade_data) if hasattr(self.knowledge_analyzer, 'analyze_trade_result') else None
                if analysis:
                    self.add_terminal_message(f"[–ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–∫–∏] {analysis}", "INFO")
                # Margin-call: –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å <= 0, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                if balance <= 0:
                    margin_call_count += 1
                    self.add_terminal_message(f"‚ùå MARGIN CALL! –ë–∞–ª–∞–Ω—Å —É—à–µ–ª –≤ –º–∏–Ω—É—Å (${balance:.2f}). –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å $100.", "ERROR")
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    for p in open_positions:
                        p['open'] = False
                        p['close_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    open_positions.clear()
                    # –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
                    balance = 100.0
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—É–∑—É –∏–ª–∏ –∞–Ω–∞–ª–∏–∑, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                else:
                    t += 1
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º (–∫–∞–∫ –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
                if total_trades >= 5:
                    recent_trades = total_trades - 5
                    recent_wins = win_trades - (total_trades - 5) if total_trades > 5 else win_trades
                    recent_winrate = (recent_wins / 5) * 100 if total_trades >= 5 else 0
                    old_risk = ind.position_size
                    if recent_winrate > 60 and ind.position_size < 0.03:
                        ind.position_size = min(ind.position_size + 0.002, 0.03)
                        self.add_terminal_message(f"[–†–ò–°–ö] ‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–µ–Ω –¥–æ {ind.position_size*100:.1f}% (winrate: {recent_winrate:.1f}%)", "INFO")
                    elif recent_winrate < 40 and ind.position_size > 0.005:
                        ind.position_size = max(ind.position_size - 0.002, 0.005)
                        self.add_terminal_message(f"[–†–ò–°–ö] ‚¨áÔ∏è –£–º–µ–Ω—å—à–µ–Ω –¥–æ {ind.position_size*100:.1f}% (winrate: {recent_winrate:.1f}%)", "INFO")
                    if ind.position_size != old_risk:
                        self.add_terminal_message(f"[–†–ò–°–ö] –ù–æ–≤—ã–π —Ä–∏—Å–∫: {ind.position_size*100:.1f}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞", "INFO")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤ —Å–¥–µ–ª–∫–µ {t+1}: {e}"
                errors.append(error_msg)
                self.add_terminal_message(error_msg, "ERROR")
                ind.record_error({
                    'error_type': 'simulation_error',
                    'error_message': error_msg,
                    'trade_number': t+1
                })
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: winrate > –æ–±—â–∏–π PnL > –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫)
        if total_trades == 0:
            fitness = 0.0
        else:
            winrate = (win_trades / total_trades) * 100
            total_pnl = balance - 100.0
            pnl_ratio = total_pnl / 100.0
            fitness = (winrate * 0.6) + (pnl_ratio * 100 * 0.3) + (min(total_trades / 10, 1.0) * 100 * 0.1)
        old_aggressive_balance = self.aggressive_system.current_balance
        self.aggressive_system.current_balance = balance
        self.add_terminal_message(f"[–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ë–∞–ª–∞–Ω—Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: ${balance:.2f}", "DEBUG")
        self.add_terminal_message(f"[–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ë–∞–ª–∞–Ω—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${old_aggressive_balance:.2f} ‚Üí ${self.aggressive_system.current_balance:.2f}", "DEBUG")
        self.add_terminal_message(f"[–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ë–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å", "DEBUG")
        for trade_data in ind.trade_history[-total_trades:]:
            if 'pnl' in trade_data:
                closed_position = {
                    'symbol': trade_data.get('symbol', 'UNKNOWN'),
                    'direction': trade_data.get('direction', 'LONG'),
                    'entry_price': trade_data.get('entry_price', 0),
                    'close_price': trade_data.get('exit_price', 0),
                    'size': trade_data.get('size', 0),
                    'pnl': trade_data.get('pnl', 0),
                    'pnl_pct': trade_data.get('pnl_pct', 0),
                    'commission': trade_data.get('commission', 0),
                    'close_time': datetime.now(),
                    'reason': 'Evolutionary Trade'
                }
                self.aggressive_system.closed_positions.append(closed_position)
        self.add_terminal_message(f"[MARGIN CALL] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ margin-call –∑–∞ —Å–∏–º—É–ª—è—Ü–∏—é: {margin_call_count}", "WARNING")
        # –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        return fitness, errors, actions
    
    def _update_positions_table(self, positions):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ UI (–¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è)"""
        try:
            if hasattr(self.ui, 'positions_table'):
                open_pos = [p for p in positions if p.get('open', False)]
                for row in self.ui.positions_table.get_children():
                    self.ui.positions_table.delete(row)
                for pos in open_pos:
                    symbol = pos.get('symbol', '')
                    size = f"{pos.get('size', 0):.4f} {symbol.replace('USDT','')}"
                    entry = f"{pos.get('entry_price', 0):.2f}"
                    breakeven = f"{pos.get('entry_price', 0):.2f}"
                    mark = f"{pos.get('entry_price', 0):.2f}"
                    leverage = pos.get('leverage', 1)
                    side = pos.get('side', 'LONG')
                    if side == 'LONG':
                        liq = f"{pos.get('entry_price', 0) * (1 - 1/max(leverage,1)):.2f}"
                    else:
                        liq = f"{pos.get('entry_price', 0) * (1 + 1/max(leverage,1)):.2f}"
                    margin_rate = f"{100/max(leverage,1):.2f}%"
                    margin = f"{(pos.get('size',0)*pos.get('entry_price',0)/max(leverage,1)):.2f} USDT"
                    pnl = f"{pos.get('pnl_dollars',0):+.2f} USDT ({pos.get('pnl_pct',0)*100:+.2f}%)"
                    stop = "-"
                    take = "-"
                    open_time = pos.get('open_time', '-')
                    close_time = pos.get('close_time', '-')
                    iid = self.ui.positions_table.insert("", "end", values=(symbol, size, entry, breakeven, mark, liq, margin_rate, margin, pnl, stop, take, open_time))
                    self.ui.positions_table.set(iid, column="–î–µ–π—Å—Ç–≤–∏—è", value="–ó–∞–∫—Ä—ã—Ç—å")
        except Exception as e:
            pass

    def _update_trading_stats(self, fitness):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ UI"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fitness
            status = self.get_trading_status()
            balance = status['balance']
            winrate = status['winrate']
            
            if hasattr(self.ui, 'trading_stats_labels'):
                self.ui.trading_stats_labels["üí∞ –ë–∞–ª–∞–Ω—Å: $100.00"].config(text=f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:,.2f}")
                self.ui.trading_stats_labels["üìà –í–∏–Ω—Ä–µ–π—Ç: 0.0%"].config(text=f"üìà –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%")
        except Exception as e:
            pass

    def get_trading_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            return {
                'active': self.trading_active,
                'balance': self.aggressive_system.current_balance,
                'open_positions': len(self.aggressive_system.open_positions),
                'total_trades': len(self.aggressive_system.closed_positions),
                'winrate': self._calculate_winrate(),
                'total_pnl': self._calculate_total_pnl()
            }
        except Exception as e:
            return {
                'active': False,
                'balance': 100.0,
                'open_positions': 0,
                'total_trades': 0,
                'winrate': 0.0,
                'total_pnl': 0.0
            }

    def _calculate_winrate(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∏–Ω—Ä–µ–π—Ç"""
        try:
            if len(self.aggressive_system.closed_positions) == 0:
                return 0.0
            
            winning_trades = sum(1 for p in self.aggressive_system.closed_positions if p['pnl'] > 0)
            return (winning_trades / len(self.aggressive_system.closed_positions)) * 100
        except:
            return 0.0

    def _calculate_total_pnl(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π P&L"""
        try:
            return sum(p['pnl'] for p in self.aggressive_system.closed_positions)
        except:
            return 0.0
    
    def set_analysis_period(self, start_date: str, end_date: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            self.analysis_period['start_date'] = start_date
            self.analysis_period['end_date'] = end_date
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
            if not self.data_loader:
                self.ui.add_terminal_message("‚ùå –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
                return
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTCUSDT
            test_data = self.data_loader.get_coin_data(
                'BTCUSDT', '1h', 
                start_date=start_date, 
                end_date=end_date
            )
            
            if len(test_data) > 0:
                self.ui.add_terminal_message(
                    f"‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_date} - {end_date} | "
                    f"–î–∞–Ω–Ω—ã—Ö: {len(test_data)} —Å—Ç—Ä–æ–∫", 
                    "SUCCESS"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                self.run_period_analysis()
            else:
                self.ui.add_terminal_message(
                    f"‚ö†Ô∏è –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ {start_date} - {end_date} –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 
                    "ERROR"
                )
                
        except Exception as e:
            self.ui.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", "ERROR")
    
    def run_period_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            if not self.data_loader:
                return
            
            start_date = self.analysis_period['start_date']
            end_date = self.analysis_period['end_date']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-5 –º–æ–Ω–µ—Ç
            top_coins = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
            
            analysis_results = []
            for coin in top_coins:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                data = self.data_loader.get_coin_data(coin, '1h', start_date, end_date)
                
                if len(data) > 0:
                    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–¥
                    avg_price = data['close'].mean()
                    volatility = data['close'].std() / avg_price * 100
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞)
                    start_price = data.iloc[0]['close']
                    end_price = data.iloc[-1]['close']
                    trend = ((end_price - start_price) / start_price) * 100
                    
                    analysis_results.append({
                        'coin': coin,
                        'avg_price': avg_price,
                        'volatility': volatility,
                        'trend': trend,
                        'data_points': len(data)
                    })
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            if analysis_results:
                self.ui.add_terminal_message("üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", "INFO")
                for result in analysis_results:
                    trend_icon = "üìà" if result['trend'] > 0 else "üìâ"
                    self.ui.add_terminal_message(
                        f"{trend_icon} {result['coin']}: "
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${result['avg_price']:.2f}, "
                        f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {result['volatility']:.1f}%, "
                        f"–¢—Ä–µ–Ω–¥: {result['trend']:+.1f}%, "
                        f"–î–∞–Ω–Ω—ã—Ö: {result['data_points']}",
                        "INFO"
                    )
            
        except Exception as e:
            self.ui.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", "ERROR")
    
    def check_data_availability(self, start_date: str, end_date: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            if not self.data_loader:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT –Ω–∞ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
            test_data = self.data_loader.get_coin_data(
                'BTCUSDT', '1h', 
                start_date=start_date, 
                end_date=end_date
            )
            
            return len(test_data) > 0
            
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", "ERROR")
            return False
    
    def add_terminal_message(self, message: str, level: str = "INFO"):
        self.ui.add_terminal_message(message, level)

    def clear_terminal(self):
        self.ui.clear_terminal()

    def update_positions_table(self):
        if hasattr(self.core, 'simulation') and self.core.simulation:
            positions = self.core.simulation.get_open_positions_info()
            self.ui.update_positions_table(positions)
    
    def show_recent_ai_insights(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏ –ò–ò"""
        if not self.core.intelligent_system:
            return
            
        insights = self.core.intelligent_system.get_recent_insights(3)
        if insights:
            self.add_terminal_message("üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏ –ò–ò:", "INFO")
            for insight in insights:
                self.add_terminal_message(f"   ‚Ä¢ {insight}", "INFO")
    
    def add_ai_analysis_message(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        pass
    
    def add_multi_timeframe_analysis(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        pass
    
    def add_simple_market_analysis(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (fallback)"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            positive_count = sum(1 for data in self.core.prices.values() if data['change_24h'] > 0)
            negative_count = sum(1 for data in self.core.prices.values() if data['change_24h'] < 0)
            total_coins = len(self.core.prices)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
            if positive_count > total_coins * 0.6:
                sentiment = "üìà –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫"
                analysis = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —Ä–∞—Å—Ç—É—Ç, –∏—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π"
            elif negative_count > total_coins * 0.6:
                sentiment = "üìâ –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫"
                analysis = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø–∞–¥–∞—é—Ç, –∏—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"
            else:
                sentiment = "‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫"
                analysis = "–†—ã–Ω–æ–∫ –≤ –±–æ–∫–æ–≤–∏–∫–µ, –∂–¥—É —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞"
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-–º–æ–Ω–µ—Ç—ã
            sorted_coins = sorted(self.core.prices.items(), key=lambda x: abs(x[1]['change_24h']), reverse=True)
            top_volatile = [f"{symbol}: {data['change_24h']:+.1f}%" for symbol, data in sorted_coins[:3]]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üß† –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: {sentiment} | {analysis} | –¢–æ–ø –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {' | '.join(top_volatile)}"
            self.add_terminal_message(message, "SIGNAL")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            self.search_trading_opportunities()
            
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
            pass
    
    def search_trading_opportunities(self):
        """–ò—â–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            opportunities = []
            
            for symbol, price_data in self.core.prices.items():
                # –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                change_24h = price_data['change_24h']
                volume = price_data['volume_24h']
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: —Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                if change_24h > 5 and volume > 50000000:  # 5% —Ä–æ—Å—Ç + 50M –æ–±—ä–µ–º
                    opportunities.append(f"üöÄ {symbol}: –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{change_24h:.1f}% (–æ–±—ä–µ–º: ${volume/1e6:.1f}M)")
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                elif change_24h < -5 and volume > 50000000:  # 5% –ø–∞–¥–µ–Ω–∏–µ + 50M –æ–±—ä–µ–º
                    opportunities.append(f"üìâ {symbol}: –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {change_24h:.1f}% (–æ–±—ä–µ–º: ${volume/1e6:.1f}M)")
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç: —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                elif change_24h > 15:  # –ë–æ–ª–µ–µ 15% —Ä–æ—Å—Ç–∞ - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç
                    opportunities.append(f"‚ö†Ô∏è {symbol}: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{change_24h:.1f}% - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç")
                elif change_24h < -15:  # –ë–æ–ª–µ–µ 15% –ø–∞–¥–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç
                    opportunities.append(f"‚ö†Ô∏è {symbol}: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {change_24h:.1f}% - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if opportunities:
                self.add_terminal_message("üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", "SIGNAL")
                for opp in opportunities[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                    self.add_terminal_message(f"   ‚Ä¢ {opp}", "INFO")
            else:
                self.add_terminal_message("üîç –¢–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∂–¥—É –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π", "INFO")
                
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            pass
    
    def start_ai_analysis_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ò–ò –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        pass
    
    def delayed_ai_start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        pass
    
    def update_market_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞"""
        # –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
        total_market_cap = sum(price_data['current'] * random.randint(1000000, 10000000) 
                              for price_data in self.core.prices.values())
        
        total_volume = sum(price_data['volume_24h'] for price_data in self.core.prices.values())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-–º–æ–Ω–µ—Ç—ã
        sorted_coins = sorted(self.core.prices.items(), 
                            key=lambda x: x[1]['change_24h'], reverse=True)
        
        top_gainers = [f"{symbol}: +{data['change_24h']:.1f}%" 
                      for symbol, data in sorted_coins[:3]]
        top_losers = [f"{symbol}: {data['change_24h']:.1f}%" 
                     for symbol, data in sorted_coins[-3:]]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
        positive_count = sum(1 for data in self.core.prices.values() if data['change_24h'] > 0)
        if positive_count > len(self.core.prices) * 0.7:
            sentiment = "bullish"
        elif positive_count < len(self.core.prices) * 0.3:
            sentiment = "bearish"
        else:
            sentiment = "neutral"
        
        self.ui.market_data = {
            'total_market_cap': total_market_cap,
            'total_volume_24h': total_volume,
            'bitcoin_dominance': random.uniform(40, 55),
            'market_sentiment': sentiment,
            'top_gainers': top_gainers,
            'top_losers': top_losers
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.core.root.after(5000, self.update_market_data)
    
    def animate_market_ticker(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Ä—ã–Ω–∫–∞"""
        # –û—á–∏—â–∞–µ–º canvas
        self.ui.ticker_canvas.delete("all")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        canvas_width = self.ui.ticker_canvas.winfo_width()
        canvas_height = self.ui.ticker_canvas.winfo_height()
        
        if canvas_width > 0:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            sentiment_emoji = {
                'bullish': 'üìà',
                'bearish': 'üìâ',
                'neutral': '‚û°Ô∏è'
            }
            
            ticker_text = (
                f"üåê –†–´–ù–û–ö –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ ‚Ä¢ "
                f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${self.ui.market_data['total_market_cap']/1e12:.1f}T ‚Ä¢ "
                f"–û–±—ä–µ–º 24—á: ${self.ui.market_data['total_volume_24h']/1e9:.1f}B ‚Ä¢ "
                f"BTC –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.ui.market_data['bitcoin_dominance']:.1f}% ‚Ä¢ "
                f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment_emoji[self.ui.market_data['market_sentiment']]} "
                f"{self.ui.market_data['market_sentiment'].upper()} ‚Ä¢ "
                f"–¢–æ–ø —Ä–æ—Å—Ç: {' | '.join(self.ui.market_data['top_gainers'])} ‚Ä¢ "
                f"–¢–æ–ø –ø–∞–¥–µ–Ω–∏–µ: {' | '.join(self.ui.market_data['top_losers'])} ‚Ä¢ "
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            text_id = self.ui.ticker_canvas.create_text(
                canvas_width - self.ui.ticker_position, 
                canvas_height // 2,
                text=ticker_text,
                font=("Arial", 12, "bold"),
                fill=self.colors.colors['text_white'],
                anchor=tk.W
            )
            
            # –î—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            text_width = self.ui.ticker_canvas.bbox(text_id)[2] - self.ui.ticker_canvas.bbox(text_id)[0]
            if self.ui.ticker_position > text_width:
                self.ui.ticker_canvas.create_text(
                    canvas_width - self.ui.ticker_position + text_width, 
                    canvas_height // 2,
                    text=ticker_text,
                    font=("Arial", 12, "bold"),
                    fill=self.colors.colors['text_white'],
                    anchor=tk.W
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            self.ui.ticker_position += 1.5
            if self.ui.ticker_position > text_width:
                self.ui.ticker_position = 0
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.core.root.after(50, self.animate_market_ticker) 

    def start_aggressive_trading(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ RM/MM –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            print("[DEBUG] start_aggressive_trading –≤—ã–∑–≤–∞–Ω")
            self.trading_active = True
            self.trading_settings['auto_trading'] = True
            self.add_terminal_message("üöÄ –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô RM/MM –ê–ì–ï–ù–¢ –ó–ê–ü–£–©–ï–ù", "SUCCESS")
            self.add_terminal_message("ü§ñ –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É—á–∏—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è", "INFO")
            self.add_terminal_message("")
            trading_thread = threading.Thread(target=self._evolutionary_trading_loop, daemon=True)
            trading_thread.start()
            print("[DEBUG] –ü–æ—Ç–æ–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}", "ERROR")

    def stop_aggressive_trading(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            self.trading_active = False
            self.trading_settings['auto_trading'] = False
            self.add_terminal_message("‚èπÔ∏è –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô RM/MM –ê–ì–ï–ù–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù", "WARNING")
            self.add_terminal_message("")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}", "ERROR")

    def _evolutionary_trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            print("[DEBUG] _evolutionary_trading_loop —Å—Ç–∞—Ä—Ç—É–µ—Ç")
            self.trading_active = True  # –Ø–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            self.add_terminal_message("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞", "DEBUG")
            symbols = self.core.symbols if hasattr(self.core, 'symbols') else []
            timeframe = self.ui.get_selected_timeframes() if hasattr(self.ui, 'get_selected_timeframes') else ['1h']
            speed = self.ui.sim_speed_var.get() if hasattr(self.ui, 'sim_speed_var') else '1:1'
            self.add_terminal_message(f"DEBUG: symbols={symbols}", "DEBUG")
            self.add_terminal_message(f"DEBUG: timeframes={timeframe}", "DEBUG")
            print(f"[DEBUG] symbols={symbols}")
            print(f"[DEBUG] timeframes={timeframe}")
            if not symbols:
                self.add_terminal_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!", "ERROR")
                print("[DEBUG] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
                return
            max_generations = 20
            trades_per_individual = 30
            generation = 0
            while self.trading_active and generation < max_generations:
                self.add_terminal_message(f"\nüß¨ –ü–æ–∫–æ–ª–µ–Ω–∏–µ {self.rmm_agent.generation+1}", "INFO")
                for i, ind in enumerate(self.rmm_agent.population):
                    if not self.trading_active:
                        break
                    log = f"\nü§ñ –ò–Ω–¥–∏–≤–∏–¥ {i+1}: {ind.describe()}"
                    self.add_terminal_message(log, "INFO")
                    self.rmm_logs.append({'generation': self.rmm_agent.generation+1, 'individual': i+1, 'params': ind.describe(), 'actions': []})
                    fitness, errors, actions = self._simulate_trading(ind, symbols, timeframe, trades_per_individual)
                    ind.fitness = fitness
                    for err in errors:
                        self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞: {err}", "ERROR")
                        self.rmm_logs[-1]['actions'].append({'error': err})
                    for act in actions:
                        self.add_terminal_message(f"üìù {act}", "INFO")
                        self.rmm_logs[-1]['actions'].append({'action': act})
                    self._update_trading_stats(fitness)
                if not self.trading_active:
                    break
                self.rmm_agent.log_population()
                self.rmm_agent.evolve()
                generation += 1
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                self.show_learning_statistics()
            self.add_terminal_message("üèÅ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            try:
                kb_file = self.rmm_agent.save_knowledge_base()
                self.add_terminal_message(f"üíæ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {kb_file}", "SUCCESS")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
                stats = self.rmm_agent.get_learning_statistics()
                self.add_terminal_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –ü–æ–∫–æ–ª–µ–Ω–∏–π: {stats['generation']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π winrate: {stats['avg_winrate']:.1f}%", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –õ—É—á—à–∏–π winrate: {stats['best_winrate']:.1f}%", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {stats['knowledge_base_size']} –∑–∞–ø–∏—Å–µ–π", "INFO")
            except Exception as e:
                self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}", "ERROR")
            self.add_terminal_message("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "WARNING")
            print("[DEBUG] –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            import traceback
            self.add_terminal_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}", "ERROR")
            self.add_terminal_message(traceback.format_exc(), "ERROR")
            print(f"[DEBUG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    def _simulate_trading(self, ind, symbols, timeframes, trades_per_individual):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–º–µ—Å—Ç–æ —Å–±—Ä–æ—Å–∞ –∫ 100
        balance = self.aggressive_system.current_balance
        win_trades = 0
        total_trades = 0
        errors = []
        actions = []
        open_positions = []
        margin_call_count = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ç–æ—Ä–≥–æ–≤–ª–∏
        historical_data = {}
        for symbol in symbols:
            for tf in timeframes:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    if self.data_loader is None:
                        self.add_terminal_message("‚ùå –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
                        return 0.0, ["–ù–µ—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"], []
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    data = self.data_loader.get_coin_data(symbol, tf)
                    if data is not None and len(data) > 0:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ç–æ—Ä–≥–æ–≤–ª–∏
                        filtered_data = self._filter_data_by_period(
                            data, 
                            self.trading_period['start_date'], 
                            self.trading_period['end_date']
                        )
                        if len(filtered_data) > 0:
                            historical_data[f"{symbol}_{tf}"] = filtered_data
                            self.add_terminal_message(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} {tf} –≤ –ø–µ—Ä–∏–æ–¥–µ {self.trading_period['start_date']} - {self.trading_period['end_date']}", "DEBUG")
                        else:
                            self.add_terminal_message(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {tf} –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ", "WARNING")
                except Exception as e:
                    self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol} {tf}: {e}", "ERROR")
        
        if not historical_data:
            self.add_terminal_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "ERROR")
            return 0.0, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"], []
        
        self.add_terminal_message(f"üìÖ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {self.trading_period['start_date']} - {self.trading_period['end_date']}", "INFO")
        
        t = 0
        while t < trades_per_individual:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
                symbol = random.choice(symbols)
                tf = random.choice(timeframes)
                data_key = f"{symbol}_{tf}"
                
                if data_key not in historical_data or len(historical_data[data_key]) == 0:
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–≤–µ—á—É –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                candle = historical_data[data_key].iloc[random.randint(0, len(historical_data[data_key]) - 1)]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ —Å–≤–µ—á–∏
                open_price = float(candle['open'])
                high_price = float(candle['high'])
                low_price = float(candle['low'])
                close_price = float(candle['close'])
                volume = float(candle['volume'])
                candle_time = candle['open_time']
                
                direction = random.choice(['LONG', 'SHORT'])
                entry_price = open_price  # –í—Ö–æ–¥–∏–º –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
                
                # –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –° –£–ß–ï–¢–û–ú –ü–õ–ï–ß–ê
                risk_amount = balance * ind.position_size
                leverage = ind.leverage
                position_size = (risk_amount * leverage) / entry_price
                margin_used = risk_amount / leverage
                open_time = candle_time.strftime('%Y-%m-%d %H:%M:%S')
                
                pos = {
                    'symbol': symbol,
                    'size': position_size,
                    'entry_price': entry_price,
                    'leverage': leverage,
                    'side': direction,
                    'budget': risk_amount,
                    'margin_used': margin_used,
                    'pnl_dollars': 0,
                    'pnl_pct': 0,
                    'open': True,
                    'open_time': open_time,
                    'close_time': None
                }
                open_positions.append(pos)
                actions.append(f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol} {direction} —Ä–∞–∑–º–µ—Ä {position_size:.4f} –ø–æ —Ü–µ–Ω–µ {entry_price:.2f} (—Ä–∏—Å–∫ ${risk_amount:.2f}, –ø–ª–µ—á–æ {leverage}x, –º–∞—Ä–∂–∞ ${margin_used:.2f}) –≤ {open_time}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞
                candle_volatility = (high_price - low_price) / open_price
                
                # –ë–ê–ó–û–í–´–ô –í–ò–ù–†–ï–ô–¢ - –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                base_winrate = 0.45  # –ë–∞–∑–æ–≤—ã–π –≤–∏–Ω—Ä–µ–π—Ç 45% (–±–ª–∏–∂–µ –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º winrate –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                # –í–º–µ—Å—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–≤–µ—á–∏
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ —Å–≤–µ—á–∏
                candle_trend = 'bullish' if close_price > open_price else 'bearish'
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ —Ç—Ä–µ–Ω–¥–∞ —Å–≤–µ—á–∏
                if (direction == 'LONG' and candle_trend == 'bullish') or (direction == 'SHORT' and candle_trend == 'bearish'):
                    base_winrate += 0.05  # +5% –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç—Ä–µ–Ω–¥–æ–º
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                if candle_volatility > 0.05:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    base_winrate -= 0.1  # -10% –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                elif candle_volatility < 0.01:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    base_winrate += 0.05  # +5% –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                winrate = min(0.65, max(0.25, base_winrate + random.uniform(-0.05, 0.05)))
                
                is_win = random.random() < winrate
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
                if is_win:
                    if direction == 'LONG':
                        exit_price = close_price  # –í—ã—Ö–æ–¥–∏–º –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                    else:  # SHORT
                        exit_price = low_price  # –î–ª—è —à–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º —Å–≤–µ—á–∏
                    pnl_pct = (exit_price - entry_price) / entry_price if direction == 'LONG' else (entry_price - exit_price) / entry_price
                else:
                    if direction == 'LONG':
                        exit_price = low_price  # –î–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ –ª–æ–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º
                    else:  # SHORT
                        exit_price = high_price  # –î–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ —à–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º
                    pnl_pct = (exit_price - entry_price) / entry_price if direction == 'LONG' else (entry_price - exit_price) / entry_price
                
                pnl = risk_amount * pnl_pct * leverage
                commission_rate = 0.0004
                position_volume = position_size * entry_price
                commission = position_volume * commission_rate * 2
                final_pnl = pnl - commission
                old_balance = balance
                balance += final_pnl
                
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] –°–≤–µ—á–∞: {open_time} | O:{open_price:.2f} H:{high_price:.2f} L:{low_price:.2f} C:{close_price:.2f}", "DEBUG")
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {candle_volatility:.3f} | –¢—Ä–µ–Ω–¥: {candle_trend}", "DEBUG")
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1%} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–û–ë–ï–î–ê' if is_win else '–ü–û–†–ê–ñ–ï–ù–ò–ï'}", "DEBUG")
                self.add_terminal_message(f"[–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï] PnL: ${final_pnl:+.2f} ({pnl_pct*100:+.1f}% * {leverage}x)", "DEBUG")
                
                pos['pnl_dollars'] = final_pnl
                pos['pnl_pct'] = final_pnl / risk_amount if risk_amount > 0 else 0
                pos['open'] = False
                close_time = candle_time.strftime('%Y-%m-%d %H:%M:%S')
                pos['close_time'] = close_time
                
                trade_data = {
                    'win': is_win,
                    'symbol': symbol,
                    'timeframe': tf,
                    'direction': direction,
                    'entry_price': entry_price,
                    'exit_price': exit_price,
                    'pnl': final_pnl,
                    'pnl_pct': final_pnl / risk_amount if risk_amount > 0 else 0,
                    'size': position_size,
                    'leverage': leverage,
                    'budget': risk_amount,
                    'margin_used': margin_used,
                    'commission': commission,
                    'duration': 'instant',
                    'open_time': open_time,
                    'close_time': close_time,
                    'market_conditions': {
                        'volatility': candle_volatility,
                        'trend': candle_trend,
                        'volume': volume,
                        'candle_range': high_price - low_price
                    }
                }
                ind.update_history(trade_data)
                if is_win:
                    win_trades += 1
                total_trades += 1
                actions.append(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol} {direction} PnL {final_pnl:+.2f} (–∫–æ–º–∏—Å—Å–∏—è: {commission:.2f}) –ë–∞–ª–∞–Ω—Å: {balance:.2f} –≤ {close_time}")
                current_winrate = (win_trades / total_trades) * 100
                actions.append(f"Winrate –ø–æ —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞ {len(ind.trade_history)} —Å–¥–µ–ª–æ–∫: {current_winrate:.1f}%")
                if current_winrate < 40:
                    actions.append("‚ùó –ê–≥–µ–Ω—Ç –∑–∞–º–µ—á–∞–µ—Ç, —á—Ç–æ winrate –Ω–∏–∑–∫–∏–π ‚Äî –±—É–¥–µ—Ç –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                elif current_winrate > 60:
                    actions.append("‚úÖ –ê–≥–µ–Ω—Ç –¥–æ–≤–æ–ª–µ–Ω winrate –∏ –±—É–¥–µ—Ç —Å—Ç–∞—Ä–∞—Ç—å—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —É—Å–ø–µ—Ö")
                self._update_positions_table(open_positions)
                open_positions = [p for p in open_positions if p['open']]
                analysis = self.knowledge_analyzer.analyze_trade_result(trade_data) if hasattr(self.knowledge_analyzer, 'analyze_trade_result') else None
                if analysis:
                    self.add_terminal_message(f"[–ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–∫–∏] {analysis}", "INFO")
                # Margin-call: –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å <= 0, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                if balance <= 0:
                    margin_call_count += 1
                    self.add_terminal_message(f"‚ùå MARGIN CALL! –ë–∞–ª–∞–Ω—Å —É—à–µ–ª –≤ –º–∏–Ω—É—Å (${balance:.2f}). –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å $100.", "ERROR")
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    for p in open_positions:
                        p['open'] = False
                        p['close_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    open_positions.clear()
                    # –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
                    balance = 100.0
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—É–∑—É –∏–ª–∏ –∞–Ω–∞–ª–∏–∑, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                else:
                    t += 1
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º (–∫–∞–∫ –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
                if total_trades >= 5:
                    recent_trades = total_trades - 5
                    recent_wins = win_trades - (total_trades - 5) if total_trades > 5 else win_trades
                    recent_winrate = (recent_wins / 5) * 100 if total_trades >= 5 else 0
                    old_risk = ind.position_size
                    if recent_winrate > 60 and ind.position_size < 0.03:
                        ind.position_size = min(ind.position_size + 0.002, 0.03)
                        self.add_terminal_message(f"[–†–ò–°–ö] ‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–µ–Ω –¥–æ {ind.position_size*100:.1f}% (winrate: {recent_winrate:.1f}%)", "INFO")
                    elif recent_winrate < 40 and ind.position_size > 0.005:
                        ind.position_size = max(ind.position_size - 0.002, 0.005)
                        self.add_terminal_message(f"[–†–ò–°–ö] ‚¨áÔ∏è –£–º–µ–Ω—å—à–µ–Ω –¥–æ {ind.position_size*100:.1f}% (winrate: {recent_winrate:.1f}%)", "INFO")
                    if ind.position_size != old_risk:
                        self.add_terminal_message(f"[–†–ò–°–ö] –ù–æ–≤—ã–π —Ä–∏—Å–∫: {ind.position_size*100:.1f}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞", "INFO")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤ —Å–¥–µ–ª–∫–µ {t+1}: {e}"
                errors.append(error_msg)
                self.add_terminal_message(error_msg, "ERROR")
                ind.record_error({
                    'error_type': 'simulation_error',
                    'error_message': error_msg,
                    'trade_number': t+1
                })
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: winrate > –æ–±—â–∏–π PnL > –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫)
        if total_trades == 0:
            fitness = 0.0
        else:
            winrate = (win_trades / total_trades) * 100
            total_pnl = balance - 100.0
            pnl_ratio = total_pnl / 100.0
            fitness = (winrate * 0.6) + (pnl_ratio * 100 * 0.3) + (min(total_trades / 10, 1.0) * 100 * 0.1)
        old_aggressive_balance = self.aggressive_system.current_balance
        self.aggressive_system.current_balance = balance
        self.add_terminal_message(f"[–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ë–∞–ª–∞–Ω—Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: ${balance:.2f}", "DEBUG")
        self.add_terminal_message(f"[–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ë–∞–ª–∞–Ω—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${old_aggressive_balance:.2f} ‚Üí ${self.aggressive_system.current_balance:.2f}", "DEBUG")
        self.add_terminal_message(f"[–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ë–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å", "DEBUG")
        for trade_data in ind.trade_history[-total_trades:]:
            if 'pnl' in trade_data:
                closed_position = {
                    'symbol': trade_data.get('symbol', 'UNKNOWN'),
                    'direction': trade_data.get('direction', 'LONG'),
                    'entry_price': trade_data.get('entry_price', 0),
                    'close_price': trade_data.get('exit_price', 0),
                    'size': trade_data.get('size', 0),
                    'pnl': trade_data.get('pnl', 0),
                    'pnl_pct': trade_data.get('pnl_pct', 0),
                    'commission': trade_data.get('commission', 0),
                    'close_time': datetime.now(),
                    'reason': 'Evolutionary Trade'
                }
                self.aggressive_system.closed_positions.append(closed_position)
        self.add_terminal_message(f"[MARGIN CALL] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ margin-call –∑–∞ —Å–∏–º—É–ª—è—Ü–∏—é: {margin_call_count}", "WARNING")
        # –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        return fitness, errors, actions
    
    def _update_positions_table(self, positions):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ UI (–¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è)"""
        try:
            if hasattr(self.ui, 'positions_table'):
                open_pos = [p for p in positions if p.get('open', False)]
                for row in self.ui.positions_table.get_children():
                    self.ui.positions_table.delete(row)
                for pos in open_pos:
                    symbol = pos.get('symbol', '')
                    size = f"{pos.get('size', 0):.4f} {symbol.replace('USDT','')}"
                    entry = f"{pos.get('entry_price', 0):.2f}"
                    breakeven = f"{pos.get('entry_price', 0):.2f}"
                    mark = f"{pos.get('entry_price', 0):.2f}"
                    leverage = pos.get('leverage', 1)
                    side = pos.get('side', 'LONG')
                    if side == 'LONG':
                        liq = f"{pos.get('entry_price', 0) * (1 - 1/max(leverage,1)):.2f}"
                    else:
                        liq = f"{pos.get('entry_price', 0) * (1 + 1/max(leverage,1)):.2f}"
                    margin_rate = f"{100/max(leverage,1):.2f}%"
                    margin = f"{(pos.get('size',0)*pos.get('entry_price',0)/max(leverage,1)):.2f} USDT"
                    pnl = f"{pos.get('pnl_dollars',0):+.2f} USDT ({pos.get('pnl_pct',0)*100:+.2f}%)"
                    stop = "-"
                    take = "-"
                    open_time = pos.get('open_time', '-')
                    close_time = pos.get('close_time', '-')
                    iid = self.ui.positions_table.insert("", "end", values=(symbol, size, entry, breakeven, mark, liq, margin_rate, margin, pnl, stop, take, open_time))
                    self.ui.positions_table.set(iid, column="–î–µ–π—Å—Ç–≤–∏—è", value="–ó–∞–∫—Ä—ã—Ç—å")
        except Exception as e:
            pass

    def _update_trading_stats(self, fitness):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ UI"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fitness
            status = self.get_trading_status()
            balance = status['balance']
            winrate = status['winrate']
            
            if hasattr(self.ui, 'trading_stats_labels'):
                self.ui.trading_stats_labels["üí∞ –ë–∞–ª–∞–Ω—Å: $100.00"].config(text=f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:,.2f}")
                self.ui.trading_stats_labels["üìà –í–∏–Ω—Ä–µ–π—Ç: 0.0%"].config(text=f"üìà –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%")
        except Exception as e:
            pass

    def get_trading_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            return {
                'active': self.trading_active,
                'balance': self.aggressive_system.current_balance,
                'open_positions': len(self.aggressive_system.open_positions),
                'total_trades': len(self.aggressive_system.closed_positions),
                'winrate': self._calculate_winrate(),
                'total_pnl': self._calculate_total_pnl()
            }
        except Exception as e:
            return {
                'active': False,
                'balance': 100.0,
                'open_positions': 0,
                'total_trades': 0,
                'winrate': 0.0,
                'total_pnl': 0.0
            }

    def _calculate_winrate(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∏–Ω—Ä–µ–π—Ç"""
        try:
            if len(self.aggressive_system.closed_positions) == 0:
                return 0.0
            
            winning_trades = sum(1 for p in self.aggressive_system.closed_positions if p['pnl'] > 0)
            return (winning_trades / len(self.aggressive_system.closed_positions)) * 100
        except:
            return 0.0

    def _calculate_total_pnl(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π P&L"""
        try:
            return sum(p['pnl'] for p in self.aggressive_system.closed_positions)
        except:
            return 0.0
    
    def set_analysis_period(self, start_date: str, end_date: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            self.analysis_period['start_date'] = start_date
            self.analysis_period['end_date'] = end_date
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
            if not self.data_loader:
                self.ui.add_terminal_message("‚ùå –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
                return
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTCUSDT
            test_data = self.data_loader.get_coin_data(
                'BTCUSDT', '1h', 
                start_date=start_date, 
                end_date=end_date
            )
            
            if len(test_data) > 0:
                self.ui.add_terminal_message(
                    f"‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_date} - {end_date} | "
                    f"–î–∞–Ω–Ω—ã—Ö: {len(test_data)} —Å—Ç—Ä–æ–∫", 
                    "SUCCESS"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                self.run_period_analysis()
            else:
                self.ui.add_terminal_message(
                    f"‚ö†Ô∏è –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ {start_date} - {end_date} –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 
                    "ERROR"
                )
                
        except Exception as e:
            self.ui.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", "ERROR")
    
    def run_period_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            if not self.data_loader:
                return
            
            start_date = self.analysis_period['start_date']
            end_date = self.analysis_period['end_date']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-5 –º–æ–Ω–µ—Ç
            top_coins = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
            
            analysis_results = []
            for coin in top_coins:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                data = self.data_loader.get_coin_data(coin, '1h', start_date, end_date)
                
                if len(data) > 0:
                    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–¥
                    avg_price = data['close'].mean()
                    volatility = data['close'].std() / avg_price * 100
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞)
                    start_price = data.iloc[0]['close']
                    end_price = data.iloc[-1]['close']
                    trend = ((end_price - start_price) / start_price) * 100
                    
                    analysis_results.append({
                        'coin': coin,
                        'avg_price': avg_price,
                        'volatility': volatility,
                        'trend': trend,
                        'data_points': len(data)
                    })
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            if analysis_results:
                self.ui.add_terminal_message("üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", "INFO")
                for result in analysis_results:
                    trend_icon = "üìà" if result['trend'] > 0 else "üìâ"
                    self.ui.add_terminal_message(
                        f"{trend_icon} {result['coin']}: "
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${result['avg_price']:.2f}, "
                        f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {result['volatility']:.1f}%, "
                        f"–¢—Ä–µ–Ω–¥: {result['trend']:+.1f}%, "
                        f"–î–∞–Ω–Ω—ã—Ö: {result['data_points']}",
                        "INFO"
                    )
            
        except Exception as e:
            self.ui.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", "ERROR")
    
    def analyze_knowledge_base(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç"""
        try:
            self.add_terminal_message("üß† –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô –ó–ê–ü–£–©–ï–ù", "INFO")
            self.add_terminal_message("üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...", "INFO")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.knowledge_analyzer.load_knowledge_base()
            self.knowledge_analyzer.load_individuals_data()
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            self.knowledge_analyzer.create_trades_dataframe()
            self.knowledge_analyzer.create_errors_dataframe()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            self.add_terminal_message("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...", "INFO")
            success_patterns = self.knowledge_analyzer.analyze_successful_patterns()
            
            if success_patterns:
                self.add_terminal_message(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–π–¥–µ–Ω—ã:", "SUCCESS")
                self.add_terminal_message(f"   ‚Ä¢ –û–±—â–∏–π winrate: {success_patterns['winrate']}%", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {success_patterns['total_trades']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: {success_patterns['avg_pnl']:.4f}", "INFO")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            self.add_terminal_message("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫...", "INFO")
            error_patterns = self.knowledge_analyzer.analyze_error_patterns()
            
            if error_patterns:
                self.add_terminal_message(f"‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω—ã:", "WARNING")
                self.add_terminal_message(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_patterns['total_errors']}", "INFO")
                if 'error_types' in error_patterns and not error_patterns['error_types'].empty:
                    top_error = error_patterns['error_types'].iloc[0]
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–≤–æ–¥–∏–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    if hasattr(top_error, 'name'):
                        self.add_terminal_message(f"   ‚Ä¢ –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞: {top_error.name} ({top_error} —Ä–∞–∑)", "INFO")
                    elif isinstance(top_error, tuple) and len(top_error) == 2:
                        self.add_terminal_message(f"   ‚Ä¢ –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞: {top_error[0]} ({top_error[1]} —Ä–∞–∑)", "INFO")
                    else:
                        self.add_terminal_message(f"   ‚Ä¢ –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞: {top_error} —Ä–∞–∑", "INFO")
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.add_terminal_message("üéØ –ò—â—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...", "INFO")
            optimal_params = self.knowledge_analyzer.find_optimal_parameters()
            
            if optimal_params and 'recommendations' in optimal_params:
                self.add_terminal_message("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê–ô–î–ï–ù–´:", "SUCCESS")
                for rec in optimal_params['recommendations']:
                    self.add_terminal_message(f"   ‚Ä¢ {rec}", "INFO")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            report_file = self.knowledge_analyzer.save_analysis_report()
            self.add_terminal_message(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}", "SUCCESS")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            self.add_terminal_message("üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê:", "INFO")
            stats = self.knowledge_analyzer.get_learning_statistics() if hasattr(self.knowledge_analyzer, 'get_learning_statistics') else {}
            if stats:
                self.add_terminal_message(f"   ‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(self.knowledge_analyzer.individuals_data)}", "INFO")
                if self.knowledge_analyzer.trades_df is not None:
                    self.add_terminal_message(f"   ‚Ä¢ –°–¥–µ–ª–æ–∫ –≤ –±–∞–∑–µ: {len(self.knowledge_analyzer.trades_df)}", "INFO")
                if self.knowledge_analyzer.errors_df is not None:
                    self.add_terminal_message(f"   ‚Ä¢ –û—à–∏–±–æ–∫ –≤ –±–∞–∑–µ: {len(self.knowledge_analyzer.errors_df)}", "INFO")
            
            self.add_terminal_message("üèÅ –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù", "SUCCESS")
            
        except Exception as e:
            import traceback
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}", "ERROR")
            self.add_terminal_message(traceback.format_exc(), "ERROR")
    
    def sync_knowledge_to_github(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub"""
        try:
            self.add_terminal_message("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub...", "INFO")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å GitHub
            self.sync_manager.sync_after_learning("ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_msg = self.sync_manager.get_sync_status_message()
            self.add_terminal_message(status_msg, "INFO")
            
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
    
    def sync_knowledge_from_github(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub"""
        try:
            self.add_terminal_message("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å GitHub...", "INFO")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å GitHub
            self.sync_manager.sync_before_learning()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_msg = self.sync_manager.get_sync_status_message()
            self.add_terminal_message(status_msg, "INFO")
            
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", "ERROR")
    
    def get_sync_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub"""
        try:
            if hasattr(self, 'sync_manager') and self.sync_manager:
                return self.sync_manager.get_status()
            return "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {str(e)}"

    def get_learning_statistics(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            stats = {
                'total_trades': 0,
                'winrate': 0.0,
                'total_pnl': 0.0,
                'balance': 100.0,
                'generation': 0,
                'best_fitness': 0.0,
                'learning_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if hasattr(self, 'aggressive_system'):
                closed_positions = self.aggressive_system.closed_positions
                stats['total_trades'] = len(closed_positions)
                stats['balance'] = self.aggressive_system.current_balance
                
                if stats['total_trades'] > 0:
                    winning_trades = len([p for p in closed_positions if p.get('pnl', 0) > 0])
                    stats['winrate'] = (winning_trades / stats['total_trades']) * 100
                    stats['total_pnl'] = sum([p.get('pnl', 0) for p in closed_positions])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            if hasattr(self, 'rmm_agent'):
                stats['generation'] = getattr(self.rmm_agent, 'generation', 0)
                # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π fitness –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π
                if hasattr(self.rmm_agent, 'knowledge_base') and self.rmm_agent.knowledge_base.get('generation_history'):
                    best_fitness = max([gen.get('best_fitness', 0) for gen in self.rmm_agent.knowledge_base['generation_history']])
                    stats['best_fitness'] = best_fitness
            
            return stats
            
        except Exception as e:
            return {'error': str(e)}

    def show_learning_statistics(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∞–∫–æ–Ω–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        –§–æ—Ä–º–∞—Ç: –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ 1 –Ω–∞ –≥–∏—Ç–µ
        """
        stats = self.get_learning_statistics()
        # –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        target_winrate = 70.0
        target_pnl = 100.0
        target_trades = 1000
        # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
        winrate_progress = min(stats['winrate'] / target_winrate * 100, 100) if target_winrate else 0
        pnl_progress = min(stats['total_pnl'] / target_pnl * 100, 100) if target_pnl else 0
        trades_progress = min(stats['total_trades'] / target_trades * 100, 100) if target_trades else 0
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        summary = (
            f"\n=== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø ===\n"
            f"Winrate: {stats['winrate']:.1f}% (—Ü–µ–ª—å: {target_winrate}%) | –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {winrate_progress:.0f}%\n"
            f"PnL: ${stats['total_pnl']:+.2f} (—Ü–µ–ª—å: ${target_pnl:+.2f}) | –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {pnl_progress:.0f}%\n"
            f"–°–¥–µ–ª–æ–∫: {stats['total_trades']} (—Ü–µ–ª—å: {target_trades}) | –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {trades_progress:.0f}%\n"
            f"–ë–∞–ª–∞–Ω—Å: ${stats['balance']:.2f}\n"
            f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {stats['generation']} | –õ—É—á—à–∏–π fitness: {stats['best_fitness']:.2f}\n"
            f"–í—Ä–µ–º—è: {stats['learning_time']}\n"
            f"============================\n"
        )
        self.add_terminal_message(summary, "INFO")

    def start_turbo_learning(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            self.add_terminal_message("üöÄ –ó–ê–ü–£–°–ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø", "SUCCESS")
            self.add_terminal_message("‚ö° –¢—É—Ä–±–æ-—Ä–µ–∂–∏–º: –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫, –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª", "INFO")
            self.add_terminal_message("üéØ –¶–µ–ª—å: –º–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –∏ –æ–ø—ã—Ç–∞ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", "INFO")
            self.add_terminal_message("")
            
            # –í–∫–ª—é—á–∞–µ–º —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º
            self.trading_settings['turbo_mode'] = True
            self.trading_settings['silent_mode'] = True
            self.trading_settings['auto_trading'] = True
            self.trading_active = True
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            if hasattr(self, 'rmm_agent'):
                self.rmm_agent.population_size = 50  # –ë–æ–ª—å—à–µ –∏–Ω–¥–∏–≤–∏–¥–æ–≤
                self.rmm_agent.mutation_rate = 0.3   # –ë–æ–ª—å—à–µ –º—É—Ç–∞—Ü–∏–π
                self.rmm_agent.elite_frac = 0.1      # –ú–µ–Ω—å—à–µ —ç–ª–∏—Ç—ã –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
            self._evolutionary_trading_loop()
            
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–±–æ-–æ–±—É—á–µ–Ω–∏—è: {str(e)}", "ERROR")

    def stop_turbo_learning(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—É—Ä–±–æ-–æ–±—É—á–µ–Ω–∏–µ"""
        try:
            self.add_terminal_message("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –¢–£–†–ë–û-–û–ë–£–ß–ï–ù–ò–Ø", "WARNING")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º
            self.trading_settings['turbo_mode'] = False
            self.trading_settings['silent_mode'] = False
            self.trading_active = False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.show_learning_statistics()
            
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É—Ä–±–æ-–æ–±—É—á–µ–Ω–∏—è: {str(e)}", "ERROR")

    def set_trading_period(self, start_date: str, end_date: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            from datetime import datetime
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç
            datetime.strptime(start_date, '%Y-%m-%d')
            datetime.strptime(end_date, '%Y-%m-%d')
            
            self.trading_period['start_date'] = start_date
            self.trading_period['end_date'] = end_date
            
            self.add_terminal_message(f"üìÖ –ü–µ—Ä–∏–æ–¥ —Ç–æ—Ä–≥–æ–≤–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_date} - {end_date}", "INFO")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            self._show_trading_period_info()
            
        except ValueError as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD", "ERROR")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}", "ERROR")

    def _show_trading_period_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if self.data_loader is None:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT –Ω–∞ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
            btc_data = self.data_loader.get_coin_data('BTCUSDT', '1h')
            if len(btc_data) > 0:
                filtered_data = self._filter_data_by_period(
                    btc_data, 
                    self.trading_period['start_date'], 
                    self.trading_period['end_date']
                )
                
                self.add_terminal_message(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {self.trading_period['start_date']} - {self.trading_period['end_date']}", "INFO")
                self.add_terminal_message(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–≤–µ—á–µ–π BTC: {len(filtered_data)}", "INFO")
                
                if len(filtered_data) > 0:
                    min_date = filtered_data['open_time'].min().strftime('%Y-%m-%d')
                    max_date = filtered_data['open_time'].max().strftime('%Y-%m-%d')
                    self.add_terminal_message(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_date} - {max_date}", "INFO")
                else:
                    self.add_terminal_message(f"   ‚Ä¢ ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ", "WARNING")
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–∏–æ–¥–µ: {e}", "ERROR")

    def _filter_data_by_period(self, data, start_date, end_date):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"""
        try:
            import pandas as pd
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ pandas Timestamp
            start_dt = pd.to_datetime(start_date)
            end_dt = pd.to_datetime(end_date)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (open_time —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è pandas Timestamp)
            filtered_data = data[
                (data['open_time'] >= start_dt) & 
                (data['open_time'] <= end_dt)
            ]
            
            return filtered_data
        except Exception as e:
            self.add_terminal_message(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            return data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ