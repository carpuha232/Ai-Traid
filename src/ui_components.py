"""
üé® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–Ω–µ—Ç, –ø–∞–Ω–µ–ª–∏, –∫–Ω–æ–ø–∫–∏
"""

import tkinter as tk
from tkinter import ttk, scrolledtext
from datetime import datetime
from typing import Dict, List

class UIColors:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏"""
    
    def __init__(self):
        self.colors = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
            'bg_dark': '#0a0a0a',           # –û—á–µ–Ω—å —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
            'bg_card': '#1a1a1a',           # –ö–∞—Ä—Ç–æ—á–∫–∏
            'bg_header': '#2d2d2d',         # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            
            # –¢–µ–∫—Å—Ç
            'text_white': '#ffffff',        # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            'text_gray': '#b0b0b0',         # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
            
            # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
            'blue': '#6366f1',              # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π
            'green': '#10b981',             # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π
            'red': '#ef4444',               # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
            'yellow': '#f59e0b',            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∂—ë–ª—Ç—ã–π
            'cyan': '#06b6d4',              # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ü–∏–∞–Ω
            'purple': '#8b5cf6',            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'orange': '#f97316',            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            'pink': '#ec4899',              # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–æ–∑–æ–≤—ã–π
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            'blue_light': '#818cf8',        # –°–≤–µ—Ç–ª—ã–π —Å–∏–Ω–∏–π
            'green_light': '#34d399',       # –°–≤–µ—Ç–ª—ã–π –∑–µ–ª—ë–Ω—ã–π
            'red_light': '#f87171',         # –°–≤–µ—Ç–ª—ã–π –∫—Ä–∞—Å–Ω—ã–π
            'yellow_light': '#fbbf24',      # –°–≤–µ—Ç–ª—ã–π –∂—ë–ª—Ç—ã–π
        }

class RoundedCanvas:
    """Canvas —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
    
    @staticmethod
    def create_rounded_rectangle(canvas, x1, y1, x2, y2, radius, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ canvas"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        points = [
            x1 + radius, y1,
            x2 - radius, y1,
            x2, y1,
            x2, y1 + radius,
            x2, y2 - radius,
            x2, y2,
            x2 - radius, y2,
            x1 + radius, y2,
            x1, y2,
            x1, y2 - radius,
            x1, y1 + radius,
            x1, y1
        ]
        
        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        canvas.create_polygon(points, smooth=True, **kwargs)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
        canvas.create_arc(x1, y1, x1 + 2*radius, y1 + 2*radius, 
                         start=90, extent=90, **kwargs)
        canvas.create_arc(x2 - 2*radius, y1, x2, y1 + 2*radius, 
                         start=0, extent=90, **kwargs)
        canvas.create_arc(x2 - 2*radius, y2 - 2*radius, x2, y2, 
                         start=270, extent=90, **kwargs)
        canvas.create_arc(x1, y2 - 2*radius, x1 + 2*radius, y2, 
                         start=180, extent=90, **kwargs)

class TradingStatsPanel:
    """–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self, parent, colors: UIColors):
        self.colors = colors
        self.trading_stats_labels = {}
        self.api_status_var = tk.StringVar(value="API: ...")
        self.trading_time_label = None
        
        self.create_panel(parent)
    
    def create_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        stats_frame = tk.Frame(parent, bg=self.colors.colors['bg_dark'], height=60)
        stats_frame.pack(fill=tk.X, pady=(0, 10))
        stats_frame.pack_propagate(False)
        
        # Canvas –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        stats_canvas = tk.Canvas(stats_frame, bg=self.colors.colors['bg_header'], 
                               highlightthickness=0, height=60)
        stats_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        RoundedCanvas.create_rounded_rectangle(stats_canvas, 0, 0, 1920, 60, 8, 
                                            fill=self.colors.colors['bg_header'], 
                                            outline=self.colors.colors['blue'], width=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_stats = [
            ("üí∞ –ë–∞–ª–∞–Ω—Å: $100.00", self.colors.colors['yellow']),
            ("üìà –í–∏–Ω—Ä–µ–π—Ç: 0.0%", self.colors.colors['green']),
            ("üìä –°–¥–µ–ª–æ–∫: 0", self.colors.colors['cyan']),
            ("üíµ PnL: $0.00", self.colors.colors['text_white']),
            ("üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 0", self.colors.colors['green']),
            ("‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: 0", self.colors.colors['red']),
            ("üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: 0.0%", self.colors.colors['orange']),
            ("‚ö° –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: 0", self.colors.colors['purple'])
        ]
        
        for i, (text, color) in enumerate(trading_stats):
            label = tk.Label(stats_canvas, text=text, 
                           font=("Arial", 11, "bold"),
                           fg=color, 
                           bg=self.colors.colors['bg_header'])
            label.pack(side=tk.LEFT, padx=15)
            self.trading_stats_labels[text] = label
        
        # –°—Ç–∞—Ç—É—Å API —Å–ø—Ä–∞–≤–∞
        api_status_label = tk.Label(stats_canvas, textvariable=self.api_status_var, 
                                  font=("Arial", 10, "bold"), 
                                  fg=self.colors.colors['yellow'], 
                                  bg=self.colors.colors['bg_header'])
        api_status_label.pack(side=tk.RIGHT, padx=10)
        
        # –í—Ä–µ–º—è —Å–ø—Ä–∞–≤–∞
        self.trading_time_label = tk.Label(stats_canvas, text="", 
                                         font=("Arial", 11, "bold"),
                                         fg=self.colors.colors['text_white'], 
                                         bg=self.colors.colors['bg_header'])
        self.trading_time_label.pack(side=tk.RIGHT, padx=20)
    
    def update_trading_stats(self, simulation):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–Ω—Ä–µ–π—Ç
        winrate = 0.0
        if stats['total_trades'] > 0:
            winrate = (stats['winning_trades'] / stats['total_trades']) * 100
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É
        max_drawdown = 0.0
        if simulation.initial_balance > 0:
            current_drawdown = ((simulation.initial_balance - balance) / simulation.initial_balance) * 100
            max_drawdown = max(max_drawdown, current_drawdown)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
        self.trading_stats_labels["üí∞ –ë–∞–ª–∞–Ω—Å: $100.00"].config(
            text=f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
        
        self.trading_stats_labels["üìà –í–∏–Ω—Ä–µ–π—Ç: 0.0%"].config(
            text=f"üìà –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%")
        
        self.trading_stats_labels["üìä –°–¥–µ–ª–æ–∫: 0"].config(
            text=f"üìä –°–¥–µ–ª–æ–∫: {stats['total_trades']}")
        
        self.trading_stats_labels["üíµ PnL: $0.00"].config(
            text=f"üíµ PnL: ${stats['total_pnl']:+.2f}")
        
        self.trading_stats_labels["üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 0"].config(
            text=f"üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['winning_trades']}")
        
        self.trading_stats_labels["‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: 0"].config(
            text=f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['losing_trades']}")
        
        self.trading_stats_labels["üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: 0.0%"].config(
            text=f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.1f}%")
        
        self.trading_stats_labels["‚ö° –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: 0"].config(
            text=f"‚ö° –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(simulation.open_positions)}")
    
    def update_time(self, root):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        def update_trading_time():
            current_time = datetime.now().strftime("%H:%M:%S")
            if self.trading_time_label:
                self.trading_time_label.config(text=f"üïê {current_time}")
            root.after(1000, update_trading_time)
        
        update_trading_time()

class MarketTicker:
    """–ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä—ã–Ω–∫–∞"""
    
    def __init__(self, parent, colors: UIColors):
        self.colors = colors
        self.ticker_position = 0
        self.market_data = {
            'total_market_cap': 0,
            'total_volume_24h': 0,
            'bitcoin_dominance': 0,
            'market_sentiment': 'neutral',
            'top_gainers': [],
            'top_losers': []
        }
        
        self.create_ticker(parent)
    
    def create_ticker(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä—ã–Ω–∫–∞"""
        ticker_frame = tk.Frame(parent, bg=self.colors.colors['bg_dark'], height=35)
        ticker_frame.pack(fill=tk.X, pady=(0, 10))
        ticker_frame.pack_propagate(False)
        
        # Canvas –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        self.ticker_canvas = tk.Canvas(ticker_frame, bg=self.colors.colors['bg_header'], 
                                     highlightthickness=0, height=35)
        self.ticker_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        RoundedCanvas.create_rounded_rectangle(self.ticker_canvas, 0, 0, 1920, 35, 8, 
                                            fill=self.colors.colors['bg_header'], 
                                            outline=self.colors.colors['blue'], width=1)
    
    def update_market_data(self, prices: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞"""
        # –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
        total_market_cap = sum(price_data['current'] * 1000000 
                              for price_data in prices.values())
        
        total_volume = sum(price_data['volume_24h'] for price_data in prices.values())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-–º–æ–Ω–µ—Ç—ã
        sorted_coins = sorted(prices.items(), 
                            key=lambda x: x[1]['change_24h'], reverse=True)
        
        top_gainers = [f"{symbol}: +{data['change_24h']:.1f}%" 
                      for symbol, data in sorted_coins[:3]]
        top_losers = [f"{symbol}: {data['change_24h']:.1f}%" 
                     for symbol, data in sorted_coins[-3:]]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
        positive_count = sum(1 for data in prices.values() if data['change_24h'] > 0)
        if positive_count > len(prices) * 0.7:
            sentiment = "bullish"
        elif positive_count < len(prices) * 0.3:
            sentiment = "bearish"
        else:
            sentiment = "neutral"
        
        self.market_data = {
            'total_market_cap': total_market_cap,
            'total_volume_24h': total_volume,
            'bitcoin_dominance': 45.5,
            'market_sentiment': sentiment,
            'top_gainers': top_gainers,
            'top_losers': top_losers
        }
    
    def animate_ticker(self, root):
        """–ê–Ω–∏–º–∞—Ü–∏—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Ä—ã–Ω–∫–∞"""
        # –û—á–∏—â–∞–µ–º canvas
        self.ticker_canvas.delete("all")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        canvas_width = self.ticker_canvas.winfo_width()
        canvas_height = self.ticker_canvas.winfo_height()
        
        if canvas_width > 0:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            sentiment_emoji = {
                'bullish': 'üìà',
                'bearish': 'üìâ',
                'neutral': '‚û°Ô∏è'
            }
            
            ticker_text = (
                f"üåê –†–´–ù–û–ö –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ ‚Ä¢ "
                f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${self.market_data['total_market_cap']/1e12:.1f}T ‚Ä¢ "
                f"–û–±—ä–µ–º 24—á: ${self.market_data['total_volume_24h']/1e9:.1f}B ‚Ä¢ "
                f"BTC –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.market_data['bitcoin_dominance']:.1f}% ‚Ä¢ "
                f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment_emoji[self.market_data['market_sentiment']]} "
                f"{self.market_data['market_sentiment'].upper()} ‚Ä¢ "
                f"–¢–æ–ø —Ä–æ—Å—Ç: {' | '.join(self.market_data['top_gainers'])} ‚Ä¢ "
                f"–¢–æ–ø –ø–∞–¥–µ–Ω–∏–µ: {' | '.join(self.market_data['top_losers'])} ‚Ä¢ "
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            text_id = self.ticker_canvas.create_text(
                canvas_width - self.ticker_position, 
                canvas_height // 2,
                text=ticker_text,
                font=("Arial", 12, "bold"),
                fill=self.colors.colors['text_white'],
                anchor=tk.W
            )
            
            # –î—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            text_width = self.ticker_canvas.bbox(text_id)[2] - self.ticker_canvas.bbox(text_id)[0]
            if self.ticker_position > text_width:
                self.ticker_canvas.create_text(
                    canvas_width - self.ticker_position + text_width, 
                    canvas_height // 2,
                    text=ticker_text,
                    font=("Arial", 12, "bold"),
                    fill=self.colors.colors['text_white'],
                    anchor=tk.W
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            self.ticker_position += 1.5
            if self.ticker_position > text_width:
                self.ticker_position = 0
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        root.after(50, lambda: self.animate_ticker(root))

class CompactStatsPanel:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, parent, colors: UIColors):
        self.colors = colors
        self.stats_labels = {}
        self.time_label = None
        
        self.create_panel(parent)
    
    def create_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = tk.Frame(parent, bg=self.colors.colors['bg_dark'], height=40)
        stats_frame.pack(fill=tk.X, pady=(0, 10))
        stats_frame.pack_propagate(False)
        
        # Canvas –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        stats_canvas = tk.Canvas(stats_frame, bg=self.colors.colors['bg_header'], 
                               highlightthickness=0, height=40)
        stats_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
        
        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        RoundedCanvas.create_rounded_rectangle(stats_canvas, 0, 0, 1920, 40, 8, 
                                            fill=self.colors.colors['bg_header'], 
                                            outline=self.colors.colors['blue'], width=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        stats_data = [
            ("üìä 30", "#06b6d4"),
            ("üìà 0", "#10b981"),
            ("üìâ 0", "#ef4444"),
            ("üí∞ $0", "#f59e0b"),
            ("‚ö° 30", "#8b5cf6")
        ]
        
        for i, (text, color) in enumerate(stats_data):
            label = tk.Label(stats_canvas, text=text, 
                           font=("Arial", 12, "bold"),
                           fg=color, 
                           bg=self.colors.colors['bg_header'])
            label.pack(side=tk.LEFT, padx=20)
            self.stats_labels[text] = label
        
        # –í—Ä–µ–º—è —Å–ø—Ä–∞–≤–∞
        self.time_label = tk.Label(stats_canvas, text="", 
                                 font=("Arial", 12, "bold"),
                                 fg=self.colors.colors['text_white'], 
                                 bg=self.colors.colors['bg_header'])
        self.time_label.pack(side=tk.RIGHT, padx=20)
    
    def update_statistics(self, prices: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        positive_count = 0
        negative_count = 0
        total_volume = 0
        
        for symbol, price_data in prices.items():
            if price_data['change_24h'] > 0:
                positive_count += 1
            elif price_data['change_24h'] < 0:
                negative_count += 1
            
            total_volume += price_data['volume_24h']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_labels["üìà 0"].config(text=f"üìà {positive_count}")
        self.stats_labels["üìâ 0"].config(text=f"üìâ {negative_count}")
        
        if total_volume >= 1_000_000_000:
            volume_text = f"üí∞ ${total_volume/1_000_000_000:.1f}B"
        elif total_volume >= 1_000_000:
            volume_text = f"üí∞ ${total_volume/1_000_000:.1f}M"
        else:
            volume_text = f"üí∞ ${total_volume/1_000:.1f}K"
        
        self.stats_labels["üí∞ $0"].config(text=volume_text)
    
    def update_time(self, root):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        def update_time():
            current_time = datetime.now().strftime("%H:%M:%S")
            if self.time_label:
                self.time_label.config(text=f"üïê {current_time}")
            root.after(1000, update_time)
        
        update_time() 