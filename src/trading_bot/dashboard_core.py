"""
üé® –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
from datetime import datetime
import random
from typing import Dict, List

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
try:
    from trading_bot.ui_components import UIColors
    from trading_bot.price_manager import PriceManager
    from trading_bot.terminal_manager import AITradingSystem, TradingOpportunityFinder
    from trading_bot.online_data_manager import get_data_manager, initialize_data_manager
    UI_MODULES_AVAILABLE = True
    ONLINE_DATA_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è UI –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    UI_MODULES_AVAILABLE = False
    ONLINE_DATA_AVAILABLE = False
    # Fallback –∫–ª–∞—Å—Å—ã
    class UIColors:
        def __init__(self):
            self.colors = {
                'bg_dark': '#0f1419', 'bg_card': '#1a1f2e', 'bg_header': '#2d3748',
                'text_white': '#ffffff', 'text_gray': '#a0aec0', 'green': '#48bb78',
                'red': '#f56565', 'blue': '#4299e1', 'yellow': '#ed8936',
                'purple': '#9f7aea', 'cyan': '#38b2ac', 'orange': '#ed64a6'
            }
    
    class PriceManager:
        def __init__(self, symbols, simulation=None): pass
    
    class AITradingSystem:
        def __init__(self, log_callback=None): pass
        def get_recent_insights(self, limit=5): return []
    
    class TradingOpportunityFinder:
        def __init__(self, log_callback=None): pass

# –ò–º–ø–æ—Ä—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from ai_integration import AIInterface, AIRightPanel
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å –ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    AIInterface = None
    AIRightPanel = None



try:
    from trading_bot.multi_timeframe_analyzer import MultiTimeframeAnalyzer
    from trading_bot.ai_analysis_engine import AIAnalysisEngine
    PANDAS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    MultiTimeframeAnalyzer = None
    AIAnalysisEngine = None
    PANDAS_AVAILABLE = False

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ –º–æ–¥—É–ª–µ–π
if UI_MODULES_AVAILABLE:
    IntelligentTradingSystem = AITradingSystem
else:
    # Fallback –∫–ª–∞—Å—Å
    class IntelligentTradingSystem:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π (fallback)"""
        
        def __init__(self, log_callback=None):
            self.log_callback = log_callback
            self.trading_history = []
            self.learning_insights = []
            self.current_market_analysis = {}
            self.decision_reasons = {}
        
        def get_recent_insights(self, limit: int = 5):
            return []

class Colors:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏"""
    
    def __init__(self):
        self.colors = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
            'bg_dark': '#0a0a0a',           # –û—á–µ–Ω—å —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
            'bg_card': '#1a1a1a',           # –ö–∞—Ä—Ç–æ—á–∫–∏
            'bg_header': '#2d2d2d',         # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            
            # –¢–µ–∫—Å—Ç
            'text_white': '#ffffff',        # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            'text_gray': '#b0b0b0',         # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
            
            # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
            'blue': '#6366f1',              # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π
            'green': '#10b981',             # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π
            'red': '#ef4444',               # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
            'yellow': '#f59e0b',            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∂—ë–ª—Ç—ã–π
            'cyan': '#06b6d4',              # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ü–∏–∞–Ω
            'purple': '#8b5cf6',            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'orange': '#f97316',            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            'pink': '#ec4899',              # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–æ–∑–æ–≤—ã–π
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            'blue_light': '#818cf8',        # –°–≤–µ—Ç–ª—ã–π —Å–∏–Ω–∏–π
            'green_light': '#34d399',       # –°–≤–µ—Ç–ª—ã–π –∑–µ–ª—ë–Ω—ã–π
            'red_light': '#f87171',         # –°–≤–µ—Ç–ª—ã–π –∫—Ä–∞—Å–Ω—ã–π
            'yellow_light': '#fbbf24',      # –°–≤–µ—Ç–ª—ã–π –∂—ë–ª—Ç—ã–π
        }

class DashboardCore:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("üìä –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª")
        self.root.geometry("1920x1080")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
        self.colors = UIColors()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—É—Å–∞ API
        self.api_status_var = tk.StringVar()
        self.futures_balance_var = tk.StringVar()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–∫–Ω–∞
        self.root.configure(bg=self.colors.colors['bg_dark'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.symbols = [
            'BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'XRPUSDT', 'DOTUSDT',
            'LINKUSDT', 'LTCUSDT', 'BCHUSDT', 'EOSUSDT', 'TRXUSDT',
            'XLMUSDT', 'VETUSDT', 'FILUSDT', 'AAVEUSDT', 'ALGOUSDT',
            'NEARUSDT', 'FTMUSDT', 'SANDUSDT', 'MANAUSDT', 'AXSUSDT',
            'GALAUSDT', 'CHZUSDT', 'MATICUSDT', 'SOLUSDT', 'AVAXUSDT',
            'ATOMUSDT', 'UNIUSDT', 'CAKEUSDT', 'DOGEUSDT', 'SHIBUSDT'
        ]
        
        self.logic = None  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å self.core.logic
        self.ui = None     # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å self.core.ui
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._init_online_data_manager()
        self._init_price_manager()
        self._init_intelligent_system()
        self._init_analysis_engines()
        self._init_simulation()
        self._init_opportunity_finder()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self._send_init_messages()
    
    def _init_online_data_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.online_data_manager = None
        if ONLINE_DATA_AVAILABLE:
            try:
                self.online_data_manager = get_data_manager()
            except Exception as e:
                # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                self.online_data_manager = None
        else:
            pass
    
    def _init_price_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ü–µ–Ω —Å –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–º–∏"""
        # –í—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        self.prices = {}
        self.price_history = {}
        
        if UI_MODULES_AVAILABLE:
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π simulation engine, –∞ –Ω–µ online_data_manager
            self.price_manager = PriceManager(self.symbols, simulation=None)
        else:
            self.price_manager = None
        
        # –í—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        self.initialize_prices()
    
    def _init_intelligent_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.intelligent_system = IntelligentTradingSystem(self.add_terminal_message)
    
    def _init_analysis_engines(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        self.multi_timeframe_analyzer = None
        self.ai_analysis_engine = None
    
    def _init_simulation(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        self.simulation = None
    
    def _init_opportunity_finder(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        if UI_MODULES_AVAILABLE:
            self.opportunity_finder = TradingOpportunityFinder(self.add_terminal_message)
        else:
            self.opportunity_finder = None
    
    def _send_init_messages(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.add_terminal_message("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", "SUCCESS")
        self.add_terminal_message("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ", "INFO")
        
        # –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
        self.add_terminal_message("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ", "SUCCESS")
    
    def initialize_prices(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Å API"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
        for symbol in self.symbols:
            self.prices[symbol] = {
                'current': 0.0,
                'previous': 0.0,
                'change_24h': 0.0,
                'volume_24h': 0,
                'high_24h': 0.0,
                'low_24h': 0.0
            }
            self.price_history[symbol] = []
    
    def add_terminal_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ)"""
        print(f"[{level}] {message}")
    
    def start_price_updates(self):
        """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ)"""
        pass
    
    def setup_compact_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ)"""
        pass 

    def update_dashboard(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if hasattr(self, 'ui') and hasattr(self.ui, 'update_trading_stats'):
                self.ui.update_trading_stats()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.root.after(1000, self.update_dashboard)
            
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.root.after(5000, self.update_dashboard)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ 