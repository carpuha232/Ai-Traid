"""
üìä –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å OnlineDataManager –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
"""

import os
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
from online_data_manager import get_data_manager

class MultiTimeframeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–Ω–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–æ–º"""
    
    def __init__(self, data_path="enhanced_data"):
        self.data_path = data_path
        self.timeframes = ['1m', '5m', '15m', '30m', '1h', '2h', '4h', '1d']
        self.timeframe_weights = {
            '1m': 0.05,   # 5% –≤–µ—Å–∞
            '5m': 0.10,   # 10% –≤–µ—Å–∞
            '15m': 0.15,  # 15% –≤–µ—Å–∞
            '30m': 0.20,  # 20% –≤–µ—Å–∞
            '1h': 0.25,   # 25% –≤–µ—Å–∞
            '2h': 0.15,   # 15% –≤–µ—Å–∞
            '4h': 0.07,   # 7% –≤–µ—Å–∞
            '1d': 0.03    # 3% –≤–µ—Å–∞
        }
        self.cached_data = {}
        self.analysis_cache = {}
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
        self.data_manager = None
        self.online_mode = False
        self._initialize_online_manager()
    
    def _initialize_online_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.data_manager = get_data_manager()
            self.online_mode = True
            print("‚úÖ –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–º")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–º: {e}")
            self.online_mode = False
        
    def load_historical_data(self, symbol: str, timeframe: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{symbol}_{timeframe}"
            if cache_key in self.cached_data:
                return self.cached_data[cache_key]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ
            if self.online_mode and self.data_manager:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                    market_data = self.data_manager.get_dataframe(symbol, timeframe, limit=100)
                    if not market_data.empty:
                        # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        self.cached_data[cache_key] = market_data
                        return market_data
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {e}")
            
            # Fallback –Ω–∞ —Ñ–∞–π–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            file_path = os.path.join(self.data_path, symbol, f"{timeframe}.parquet")
            
            if os.path.exists(file_path):
                df = pd.read_parquet(file_path)
                # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                self.cached_data[cache_key] = df
                return df
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {e}")
            return None
    
    def calculate_technical_indicators(self, df) -> dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        if df is None or len(df) < 20:
            return {}
        
        try:
            close_prices = df['close']
            
            # RSI
            delta = close_prices.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            
            # MACD
            ema12 = close_prices.ewm(span=12).mean()
            ema26 = close_prices.ewm(span=26).mean()
            macd = ema12 - ema26
            signal = macd.ewm(span=9).mean()
            histogram = macd - signal
            
            # Bollinger Bands
            sma20 = close_prices.rolling(window=20).mean()
            std20 = close_prices.rolling(window=20).std()
            bb_upper = sma20 + (std20 * 2)
            bb_lower = sma20 - (std20 * 2)
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = close_prices.pct_change().rolling(window=20).std() * 100
            
            # –¢—Ä–µ–Ω–¥
            sma50 = close_prices.rolling(window=50).mean()
            sma200 = close_prices.rolling(window=200).mean()
            
            return {
                'rsi': rsi.iloc[-1] if not rsi.empty else 50,
                'macd': macd.iloc[-1] if not macd.empty else 0,
                'macd_signal': signal.iloc[-1] if not signal.empty else 0,
                'macd_histogram': histogram.iloc[-1] if not histogram.empty else 0,
                'bb_upper': bb_upper.iloc[-1] if not bb_upper.empty else close_prices.iloc[-1],
                'bb_lower': bb_lower.iloc[-1] if not bb_lower.empty else close_prices.iloc[-1],
                'bb_position': (close_prices.iloc[-1] - bb_lower.iloc[-1]) / (bb_upper.iloc[-1] - bb_lower.iloc[-1]) if not bb_upper.empty and not bb_lower.empty else 0.5,
                'volatility': volatility.iloc[-1] if not volatility.empty else 0,
                'trend_50': 'up' if close_prices.iloc[-1] > sma50.iloc[-1] else 'down' if not sma50.empty else 'neutral',
                'trend_200': 'up' if close_prices.iloc[-1] > sma200.iloc[-1] else 'down' if not sma200.empty else 'neutral',
                'price_change_1h': ((close_prices.iloc[-1] - close_prices.iloc[-12]) / close_prices.iloc[-12] * 100) if len(close_prices) >= 12 else 0,
                'price_change_4h': ((close_prices.iloc[-1] - close_prices.iloc[-48]) / close_prices.iloc[-48] * 100) if len(close_prices) >= 48 else 0,
                'volume_avg': df['volume'].rolling(window=20).mean().iloc[-1] if 'volume' in df.columns else 0
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def analyze_symbol_multi_timeframe(self, symbol: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª –Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if symbol in self.analysis_cache:
                return self.analysis_cache[symbol]
            
            analysis = {
                'symbol': symbol,
                'timeframes': {},
                'aggregated_signals': {
                    'buy_signals': 0,
                    'sell_signals': 0,
                    'hold_signals': 0,
                    'confidence': 0.0,
                    'trend_strength': 0.0,
                    'volatility_score': 0.0
                },
                'recommendation': 'HOLD',
                'reasoning': []
            }
            
            total_weight = 0
            weighted_buy = 0
            weighted_sell = 0
            weighted_hold = 0
            
            for timeframe in self.timeframes:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = self.load_historical_data(symbol, timeframe)
                if df is None or len(df) < 50:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                indicators = self.calculate_technical_indicators(df)
                if not indicators:
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                tf_analysis = self._analyze_timeframe_signals(indicators, timeframe)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                analysis['timeframes'][timeframe] = {
                    'indicators': indicators,
                    'signal': tf_analysis['signal'],
                    'strength': tf_analysis['strength'],
                    'reasoning': tf_analysis['reasoning']
                }
                
                # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                weight = self.timeframe_weights.get(timeframe, 0.1)
                total_weight += weight
                
                if tf_analysis['signal'] == 'BUY':
                    weighted_buy += weight * tf_analysis['strength']
                elif tf_analysis['signal'] == 'SELL':
                    weighted_sell += weight * tf_analysis['strength']
                else:
                    weighted_hold += weight * tf_analysis['strength']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if total_weight > 0:
                analysis['aggregated_signals']['buy_signals'] = weighted_buy / total_weight
                analysis['aggregated_signals']['sell_signals'] = weighted_sell / total_weight
                analysis['aggregated_signals']['hold_signals'] = weighted_hold / total_weight
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                max_signal = max(weighted_buy, weighted_sell, weighted_hold)
                if max_signal == weighted_buy and weighted_buy > 0.3:
                    analysis['recommendation'] = 'BUY'
                    analysis['aggregated_signals']['confidence'] = weighted_buy
                elif max_signal == weighted_sell and weighted_sell > 0.3:
                    analysis['recommendation'] = 'SELL'
                    analysis['aggregated_signals']['confidence'] = weighted_sell
                else:
                    analysis['recommendation'] = 'HOLD'
                    analysis['aggregated_signals']['confidence'] = weighted_hold
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                trend_strength = 0
                volatility_score = 0
                for tf, tf_data in analysis['timeframes'].items():
                    weight = self.timeframe_weights.get(tf, 0.1)
                    trend_strength += weight * tf_data['strength']
                    volatility_score += weight * tf_data['indicators'].get('volatility', 0)
                
                analysis['aggregated_signals']['trend_strength'] = trend_strength
                analysis['aggregated_signals']['volatility_score'] = volatility_score / len(analysis['timeframes'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            analysis['reasoning'] = self._generate_analysis_reasoning(analysis)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.analysis_cache[symbol] = analysis
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return {
                'symbol': symbol,
                'recommendation': 'HOLD',
                'reasoning': [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"]
            }
    
    def _analyze_timeframe_signals(self, indicators: dict, timeframe: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        signal = 'HOLD'
        strength = 0.0
        reasoning = []
        
        try:
            # RSI –∞–Ω–∞–ª–∏–∑
            rsi = indicators.get('rsi', 50)
            if rsi < 30:
                signal = 'BUY'
                strength += 0.3
                reasoning.append(f"RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω ({rsi:.1f})")
            elif rsi > 70:
                signal = 'SELL'
                strength += 0.3
                reasoning.append(f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω ({rsi:.1f})")
            
            # MACD –∞–Ω–∞–ª–∏–∑
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            macd_histogram = indicators.get('macd_histogram', 0)
            
            if macd > macd_signal and macd_histogram > 0:
                if signal == 'BUY':
                    strength += 0.2
                elif signal == 'HOLD':
                    signal = 'BUY'
                    strength += 0.2
                reasoning.append("MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏")
            elif macd < macd_signal and macd_histogram < 0:
                if signal == 'SELL':
                    strength += 0.2
                elif signal == 'HOLD':
                    signal = 'SELL'
                    strength += 0.2
                reasoning.append("MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏")
            
            # Bollinger Bands –∞–Ω–∞–ª–∏–∑
            bb_position = indicators.get('bb_position', 0.5)
            if bb_position < 0.2:
                if signal == 'BUY':
                    strength += 0.2
                elif signal == 'HOLD':
                    signal = 'BUY'
                    strength += 0.2
                reasoning.append("–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
            elif bb_position > 0.8:
                if signal == 'SELL':
                    strength += 0.2
                elif signal == 'HOLD':
                    signal = 'SELL'
                    strength += 0.2
                reasoning.append("–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
            
            # –¢—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑
            trend_50 = indicators.get('trend_50', 'neutral')
            trend_200 = indicators.get('trend_200', 'neutral')
            
            if trend_50 == 'up' and trend_200 == 'up':
                if signal == 'BUY':
                    strength += 0.15
                reasoning.append("–°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            elif trend_50 == 'down' and trend_200 == 'down':
                if signal == 'SELL':
                    strength += 0.15
                reasoning.append("–°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_change_1h = indicators.get('price_change_1h', 0)
            price_change_4h = indicators.get('price_change_4h', 0)
            
            if price_change_1h > 2 and price_change_4h > 5:
                if signal == 'BUY':
                    strength += 0.15
                reasoning.append(f"–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç: +{price_change_1h:.1f}% (1—á), +{price_change_4h:.1f}% (4—á)")
            elif price_change_1h < -2 and price_change_4h < -5:
                if signal == 'SELL':
                    strength += 0.15
                reasoning.append(f"–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: {price_change_1h:.1f}% (1—á), {price_change_4h:.1f}% (4—á)")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            strength = min(strength, 1.0)
            
            return {
                'signal': signal,
                'strength': strength,
                'reasoning': reasoning
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}: {e}")
            return {
                'signal': 'HOLD',
                'strength': 0.0,
                'reasoning': [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"]
            }
    
    def _generate_analysis_reasoning(self, analysis: dict) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        reasoning = []
        
        try:
            symbol = analysis['symbol']
            recommendation = analysis['recommendation']
            signals = analysis['aggregated_signals']
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            if recommendation == 'BUY':
                reasoning.append(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É—é BUY {symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signals['confidence']:.1%})")
            elif recommendation == 'SELL':
                reasoning.append(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É—é SELL {symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signals['confidence']:.1%})")
            else:
                reasoning.append(f"‚è∏Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é HOLD {symbol} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            strong_signals = []
            for tf, tf_data in analysis['timeframes'].items():
                if tf_data['strength'] > 0.5:
                    strong_signals.append(f"{tf}: {tf_data['signal']} ({tf_data['strength']:.1%})")
            
            if strong_signals:
                reasoning.append(f"üìä –°–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {' | '.join(strong_signals[:3])}")
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = signals.get('volatility_score', 0)
            if volatility > 5:
                reasoning.append(f"‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.1f}% - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫")
            elif volatility < 1:
                reasoning.append(f"üõ°Ô∏è –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.1f}% - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫")
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            trend_strength = signals.get('trend_strength', 0)
            if trend_strength > 0.7:
                reasoning.append(f"üöÄ –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥: {trend_strength:.1%}")
            elif trend_strength < 0.3:
                reasoning.append(f"üìâ –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥: {trend_strength:.1%}")
            
        except Exception as e:
            reasoning.append(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}")
        
        return reasoning 