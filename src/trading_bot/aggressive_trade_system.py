"""
üöÄ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ v1.0
–°–∫–∞–ª—å–ø–∏–Ω–≥ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∞–≥—Ä–µ—Å—Å–∏–µ–π –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
–¶–µ–ª—å: 100+ —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å —Å –≤–∏–Ω—Ä–µ–π—Ç–æ–º >70%
"""

import numpy as np
import pandas as pd
import requests
import time
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

class AggressiveTradeSystem:
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    
    def __init__(self, initial_balance: float = 100.0):
        self.initial_balance = initial_balance
        self.current_balance = initial_balance
        self.open_positions = []
        self.closed_positions = []
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_config = {
            'max_position_size': 0.01,  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (—Ä–∏—Å–∫)
            'risk_reward_ratio': 1/2,   # 1:2
            'leverage_range': (5, 20),  # –ú–µ–Ω—å—à–µ –ø–ª–µ—á–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'stop_loss_pct': 0.005,     # 0.5% —Å—Ç–æ–ø-–ª–æ—Å—Å
            'take_profit_pct': 0.01,    # 1% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            'max_positions': 3,         # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–∑–∏—Ü–∏–∏
            'monitoring_interval': 30,  # 30 —Å–µ–∫—É–Ω–¥
            'min_confidence': 0.25,     # –ï—â–µ –±–æ–ª–µ–µ –ø–æ–Ω–∏–∂–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            'min_signal_threshold': 0.08,  # –ï—â–µ –±–æ–ª–µ–µ –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
            'volatility_aggression': True,  # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏—è
            'scalping_mode': True       # –†–µ–∂–∏–º —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        }
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.timeframes = ['1m', '5m', '15m']
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log_file = f"aggressive_trade_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_signals': 0,
            'executed_trades': 0,
            'missed_opportunities': 0,
            'last_analysis_time': None
        }
        
        self.risk_per_trade = 0.01  # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∏—Å–∫ 1%
        self.min_risk = 0.003  # –º–∏–Ω–∏–º—É–º 0.3%
        self.max_risk = 0.05   # –º–∞–∫—Å–∏–º—É–º 5%
        self.risk_step = 0.002 # —à–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–∞
        self.last_lessons = [] # —É—Ä–æ–∫–∏ –∏–∑ –æ—à–∏–±–æ–∫
    
    def log_message(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_entry = f"[{timestamp}] {level}: {message}"
        
        print(log_entry)
        
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry + '\n')
    
    def get_online_data(self, symbol: str, timeframe: str, limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Binance API"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Binance API
            base_url = "https://api.binance.com/api/v3"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
            interval_map = {
                '1m': '1m', '5m': '5m', '15m': '15m', '30m': '30m',
                '1h': '1h', '2h': '2h', '4h': '4h', '1d': '1d'
            }
            
            interval = interval_map.get(timeframe, '1m')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            url = f"{base_url}/klines"
            params = {
                'symbol': symbol,
                'interval': interval,
                'limit': limit
            }
            
            response = requests.get(url, params=params, timeout=5)
            response.raise_for_status()
            
            data = response.json()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            df.set_index('timestamp', inplace=True)
            df = df[['open', 'high', 'low', 'close', 'volume']]
            
            return df
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {e}", "ERROR")
            return pd.DataFrame()
    
    def calculate_volatility(self, df: pd.DataFrame, period: int = 20) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"""
        if len(df) < period:
            return 0.0
        
        returns = df['close'].pct_change().dropna()
        volatility = returns.rolling(window=period).std().iloc[-1]
        return float(volatility)
    
    def get_aggression_multiplier(self, volatility: float) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.trading_config['volatility_aggression']:
            return 1.0
        
        # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –±–æ–ª—å—à–µ –∞–≥—Ä–µ—Å—Å–∏–∏
        if volatility > 0.03:  # 3% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            return 2.0
        elif volatility > 0.02:  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            return 1.5
        elif volatility > 0.01:  # 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            return 1.2
        else:
            return 0.8  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –º–µ–Ω—å—à–µ –∞–≥—Ä–µ—Å—Å–∏–∏
    
    def scalping_rsi_strategy(self, df: pd.DataFrame) -> float:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        if len(df) < 14:
            return 0.0
        
        # –ë—ã—Å—Ç—Ä—ã–π RSI –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        period = 5  # –ï—â–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–∏–æ–¥
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        
        current_rsi = rsi.iloc[-1]
        
        # –ï—â–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if current_rsi < 25:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            return 0.9
        elif current_rsi < 35:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            return 0.6
        elif current_rsi > 75:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            return -0.9
        elif current_rsi > 65:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            return -0.6
        else:
            return 0.0
    
    def scalping_macd_strategy(self, df: pd.DataFrame) -> float:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        if len(df) < 26:
            return 0.0
        
        # –ï—â–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π MACD –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        fast = 3   # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è EMA
        slow = 7   # –ë—ã—Å—Ç—Ä–∞—è EMA
        signal = 2 # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è —Å–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        
        ema_fast = df['close'].ewm(span=fast).mean()
        ema_slow = df['close'].ewm(span=slow).mean()
        macd = ema_fast - ema_slow
        signal_line = macd.ewm(span=signal).mean()
        histogram = macd - signal_line
        
        current_histogram = histogram.iloc[-1]
        prev_histogram = histogram.iloc[-2] if len(histogram) > 1 else 0
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if current_histogram > 0 and prev_histogram <= 0:  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            return 0.8
        elif current_histogram < 0 and prev_histogram >= 0:  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–Ω–∏–∑
            return -0.8
        elif current_histogram > 0.0005:  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            return 0.6
        elif current_histogram < -0.0005:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            return -0.6
        else:
            return 0.0
    
    def scalping_volume_strategy(self, df: pd.DataFrame) -> float:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—ä–µ–º–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        if len(df) < 10:
            return 0.0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        recent_volume = df['volume'].tail(3).mean()  # –£–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥
        avg_volume = df['volume'].tail(15).mean()    # –£–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥
        volume_ratio = recent_volume / avg_volume if avg_volume > 0 else 1.0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price_change = (df['close'].iloc[-1] - df['close'].iloc[-3]) / df['close'].iloc[-3]
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if volume_ratio > 1.2 and price_change > 0.003:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º + —Ä–æ—Å—Ç
            return 0.7
        elif volume_ratio > 1.2 and price_change < -0.003:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º + –ø–∞–¥–µ–Ω–∏–µ
            return -0.7
        elif volume_ratio > 1.5:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            return 0.5 if price_change > 0 else -0.5
        else:
            return 0.0
    
    def scalping_momentum_strategy(self, df: pd.DataFrame) -> float:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–ø—É–ª—å—Å–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        if len(df) < 5:
            return 0.0
        
        # –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø—É–ª—å—Å
        momentum_2 = (df['close'].iloc[-1] - df['close'].iloc[-2]) / df['close'].iloc[-2]  # –£–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥
        momentum_3 = (df['close'].iloc[-1] - df['close'].iloc[-3]) / df['close'].iloc[-3]
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if momentum_2 > 0.005 and momentum_3 > 0.003:  # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å
            return 0.8
        elif momentum_2 < -0.005 and momentum_3 < -0.003:  # –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å
            return -0.8
        elif momentum_2 > 0.003:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å
            return 0.5
        elif momentum_2 < -0.003:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å
            return -0.5
        else:
            return 0.0
    
    def analyze_symbol(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É"""
        try:
            all_signals = []
            weights = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            for timeframe in self.timeframes:
                df = self.get_online_data(symbol, timeframe, limit=50)
                
                if df.empty:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volatility = self.calculate_volatility(df)
                aggression_multiplier = self.get_aggression_multiplier(volatility)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategies = [
                    (self.scalping_rsi_strategy, 1.0),
                    (self.scalping_macd_strategy, 1.2),
                    (self.scalping_volume_strategy, 1.5),
                    (self.scalping_momentum_strategy, 1.0)
                ]
                
                timeframe_signals = []
                timeframe_weights = []
                
                for strategy_func, weight in strategies:
                    try:
                        signal = strategy_func(df)
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–≥—Ä–µ—Å—Å–∏–∏
                        adjusted_signal = signal * aggression_multiplier
                        
                        timeframe_signals.append(adjusted_signal)
                        timeframe_weights.append(weight)
                        
                    except Exception as e:
                        self.log_message(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}", "WARNING")
                        timeframe_signals.append(0)
                        timeframe_weights.append(0.5)
                
                # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                if timeframe_signals and timeframe_weights:
                    timeframe_signal = sum(s * w for s, w in zip(timeframe_signals, timeframe_weights)) / sum(timeframe_weights)
                    
                    # –í–µ—Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    timeframe_weight = 1.0 if timeframe == '1m' else 0.8 if timeframe == '5m' else 0.6
                    
                    all_signals.append(timeframe_signal)
                    weights.append(timeframe_weight)
                    
                    self.log_message(f"   üìä {timeframe}: —Å–∏–≥–Ω–∞–ª {timeframe_signal:.3f}, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility:.3f}, –∞–≥—Ä–µ—Å—Å–∏—è x{aggression_multiplier:.1f}")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if all_signals and weights:
                final_signal = sum(s * w for s, w in zip(all_signals, weights)) / sum(weights)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                if abs(final_signal) >= self.trading_config['min_signal_threshold']:
                    direction = 'LONG' if final_signal > 0 else 'SHORT'
                    confidence = min(0.95, 0.4 + abs(final_signal) * 0.5)
                    
                    return {
                        'should_trade': True,
                        'symbol': symbol,
                        'direction': direction,
                        'confidence': confidence,
                        'signal_strength': abs(final_signal),
                        'volatility': volatility,
                        'aggression_multiplier': aggression_multiplier
                    }
            
            return {'should_trade': False}
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", "ERROR")
            return {'should_trade': False}
    
    def get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        try:
            df = self.get_online_data(symbol, '1m', limit=1)
            if not df.empty:
                return float(df['close'].iloc[-1])
            return None
        except:
            return None
    
    def calculate_position_size(self, symbol: str, price: float, confidence: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞"""
        base_size = self.current_balance * self.risk_per_trade
        adjusted_size = base_size * (0.5 + confidence * 0.5)
        return adjusted_size / price
    
    def open_position(self, symbol: str, direction: str, price: float, confidence: float):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if len(self.open_positions) >= self.trading_config['max_positions']:
                self.log_message(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({self.trading_config['max_positions']})")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ
            for position in self.open_positions:
                if position['symbol'] == symbol:
                    self.log_message(f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}")
                    return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size = self.calculate_position_size(symbol, price, confidence)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if direction == 'LONG':
                stop_loss = price * (1 - self.trading_config['stop_loss_pct'])
                take_profit = price * (1 + self.trading_config['take_profit_pct'])
            else:
                stop_loss = price * (1 + self.trading_config['stop_loss_pct'])
                take_profit = price * (1 - self.trading_config['take_profit_pct'])
            
            position = {
                'symbol': symbol,
                'direction': direction,
                'entry_price': price,
                'size': position_size,
                'confidence': confidence,
                'entry_time': datetime.now(),
                'stop_loss': stop_loss,
                'take_profit': take_profit
            }
            
            self.open_positions.append(position)
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.log_message(f"üöÄ –û–¢–ö–†–´–¢–ê –ü–û–ó–ò–¶–ò–Ø - {symbol} {direction}")
            self.log_message(f"   –†–∞–∑–º–µ—Ä: ${position_size * price:.2f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.1%})")
            self.log_message(f"   –í—Ö–æ–¥: ${price:.4f}")
            self.log_message(f"   –°—Ç–æ–ø: ${stop_loss:.4f} (-0.5%)")
            self.log_message(f"   –¢–µ–π–∫: ${take_profit:.4f} (+1%)")
            self.log_message(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 1:2")
            self.log_message("")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}", "ERROR")
    
    def check_positions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        positions_to_close = []
        
        for position in self.open_positions:
            try:
                current_price = self.get_current_price(position['symbol'])
                if not current_price:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                if position['direction'] == 'LONG':
                    if current_price <= position['stop_loss']:
                        positions_to_close.append((position, current_price, 'Stop Loss'))
                    elif current_price >= position['take_profit']:
                        positions_to_close.append((position, current_price, 'Take Profit'))
                else:  # SHORT
                    if current_price >= position['stop_loss']:
                        positions_to_close.append((position, current_price, 'Stop Loss'))
                    elif current_price <= position['take_profit']:
                        positions_to_close.append((position, current_price, 'Take Profit'))
                        
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {position['symbol']}: {e}", "ERROR")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for position, close_price, reason in positions_to_close:
            self.close_position(position, close_price, reason)
    
    def close_position(self, position: Dict, close_price: float, reason: str):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
            if position['direction'] == 'LONG':
                pnl_pct = (close_price - position['entry_price']) / position['entry_price']
            else:
                pnl_pct = (position['entry_price'] - close_price) / position['entry_price']
            pnl = position['size'] * position['entry_price'] * pnl_pct
            # –£—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–∏ (0.04% –Ω–∞ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥)
            commission_rate = 0.0004  # 0.04% –Ω–∞ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥
            trade_volume = position['size'] * position['entry_price']
            commission = trade_volume * commission_rate * 2  # –≤—Ö–æ–¥ + –≤—ã—Ö–æ–¥
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
            self.current_balance += pnl - commission
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            closed_position = position.copy()
            closed_position.update({
                'close_price': close_price,
                'close_time': datetime.now(),
                'reason': reason,
                'pnl': pnl,
                'pnl_pct': pnl_pct,
                'commission': commission
            })
            self.closed_positions.append(closed_position)
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            self.open_positions = [p for p in self.open_positions if p != position]
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º
            self._adjust_risk_after_trade(pnl)
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            status = "‚úÖ –ü–†–ò–ë–´–õ–¨" if pnl > 0 else "‚ùå –£–ë–´–¢–û–ö"
            self.log_message(f"{status} - {position['symbol']} {position['direction']}")
            self.log_message(f"   –í—Ö–æ–¥: ${position['entry_price']:.4f} | –í—ã—Ö–æ–¥: ${close_price:.4f}")
            self.log_message(f"   P&L: ${pnl:.2f} ({pnl_pct:.2%}) | –ö–æ–º–∏—Å—Å–∏—è: ${commission:.4f} | –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            self.log_message(f"   –ë–∞–ª–∞–Ω—Å: ${self.current_balance:.2f}")
            self.log_message("")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}", "ERROR")
            self._learn_from_error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def _adjust_risk_after_trade(self, pnl):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç —Ä–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–¥–µ–ª–æ–∫
        recent = self.closed_positions[-10:]
        avg_pnl = sum(p['pnl'] for p in recent) / len(recent) if recent else 0
        winrate = sum(1 for p in recent if p['pnl'] > 0) / len(recent) * 100 if recent else 0
        old_risk = self.risk_per_trade
        # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π PnL –∏ winrate —Ä–∞—Å—Ç—É—Ç ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–∫
        if avg_pnl > 0 and winrate > 60 and self.risk_per_trade < self.max_risk:
            self.risk_per_trade = min(self.risk_per_trade + self.risk_step, self.max_risk)
            self.log_message(f"‚¨ÜÔ∏è –†–∏—Å–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {self.risk_per_trade*100:.2f}% (winrate: {winrate:.1f}%, avg PnL: {avg_pnl:.2f})")
        # –ï—Å–ª–∏ —É–±—ã—Ç–∫–∏ –∏–ª–∏ winrate –ø–∞–¥–∞–µ—Ç ‚Äî —É–º–µ–Ω—å—à–∞–µ–º —Ä–∏—Å–∫
        elif avg_pnl < 0 or winrate < 40:
            self.risk_per_trade = max(self.risk_per_trade - self.risk_step, self.min_risk)
            self.log_message(f"‚¨áÔ∏è –†–∏—Å–∫ —É–º–µ–Ω—å—à–µ–Ω –¥–æ {self.risk_per_trade*100:.2f}% (winrate: {winrate:.1f}%, avg PnL: {avg_pnl:.2f})")
        # –ï—Å–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî –Ω–µ –º–µ–Ω—è–µ–º
        if self.risk_per_trade != old_risk:
            self.log_message(f"[–†–∏—Å–∫] –ù–æ–≤—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {self.risk_per_trade*100:.2f}%")

    def _learn_from_error(self, error_msg):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Ä–æ–∫ –∏–∑ –æ—à–∏–±–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        lesson = f"–£—Ä–æ–∫: {error_msg} ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏—á–∏–Ω—É, —Å–Ω–∏–∂–∞—é —Ä–∏—Å–∫."
        self.last_lessons.append(lesson)
        self.risk_per_trade = max(self.risk_per_trade - self.risk_step, self.min_risk)
        self.log_message(f"üß† {lesson}")
        self.log_message(f"‚¨áÔ∏è –†–∏—Å–∫ —Å–Ω–∏–∂–µ–Ω –¥–æ {self.risk_per_trade*100:.2f}% –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.")
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_trades = len(self.closed_positions)
        if total_trades > 0:
            winning_trades = sum(1 for p in self.closed_positions if p['pnl'] > 0)
            winrate = (winning_trades / total_trades) * 100
            total_pnl = sum(p['pnl'] for p in self.closed_positions)
            
            self.log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_trades} —Å–¥–µ–ª–æ–∫, –≤–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%, P&L: ${total_pnl:.2f}")
            self.log_message(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${self.current_balance:.2f}, –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.open_positions)}")
            self.log_message(f"üìà –†–æ—Å—Ç: {((self.current_balance / self.initial_balance - 1) * 100):.1f}%")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"""
        self.log_message("üöÄ –ó–ê–ü–£–°–ö –ê–ì–†–ï–°–°–ò–í–ù–û–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ v1.0")
        self.log_message(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:.2f}")
        self.log_message(f"   –†–µ–∂–∏–º: –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∞–≥—Ä–µ—Å—Å–∏–µ–π")
        self.log_message(f"   –†–∏—Å–∫: 1% –Ω–∞ —Å–¥–µ–ª–∫—É, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:2")
        self.log_message(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ {self.trading_config['monitoring_interval']} —Å–µ–∫—É–Ω–¥")
        self.log_message("")
        
        iteration = 0
        max_iterations = 10000  # –ë–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        
        try:
            while iteration < max_iterations:
                iteration += 1
                
                if iteration % 10 == 0:
                    self.log_message(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                for symbol in self.symbols:
                    try:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                        analysis = self.analyze_symbol(symbol)
                        
                        if analysis['should_trade']:
                            self.stats['total_signals'] += 1
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                            current_price = self.get_current_price(symbol)
                            if current_price:
                                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                                self.open_position(
                                    symbol=analysis['symbol'],
                                    direction=analysis['direction'],
                                    price=current_price,
                                    confidence=analysis['confidence']
                                )
                                self.stats['executed_trades'] += 1
                            else:
                                self.stats['missed_opportunities'] += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        self.check_positions()
                        
                    except Exception as e:
                        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", "ERROR")
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 50 –∏—Ç–µ—Ä–∞—Ü–∏–π
                if iteration % 50 == 0:
                    self.print_statistics()
                    self.log_message(f"üìà –°–∏–≥–Ω–∞–ª–æ–≤: {self.stats['total_signals']}, –°–¥–µ–ª–æ–∫: {self.stats['executed_trades']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.stats['missed_opportunities']}")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                time.sleep(self.trading_config['monitoring_interval'])
                
        except KeyboardInterrupt:
            self.log_message("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
        finally:
            self.print_statistics()
            self.log_message("üèÅ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
aggressive_trade_system = AggressiveTradeSystem() 