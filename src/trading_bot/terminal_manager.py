"""
üí¨ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ —á–∞—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π, –ª–æ–≥–æ–≤ –∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
"""

import tkinter as tk
from tkinter import scrolledtext
from datetime import datetime
from typing import Dict, List, Optional, Callable

class TerminalManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ª–æ–≥–æ–≤"""
    
    def __init__(self, parent, colors, ai_analysis_engine=None):
        self.parent = parent
        self.colors = colors
        self.ai_analysis_engine = ai_analysis_engine
        self.terminal_text = None
        self.message_count = 0
        
        self.create_terminal()
    
    def create_terminal(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞/—á–∞—Ç–∞ –≤ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ"""
        # –ü–∞–Ω–µ–ª—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        terminal_frame = tk.Frame(self.parent, bg=self.colors.colors['bg_header'], 
                                relief=tk.FLAT, bd=0)
        terminal_frame.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        terminal_header = tk.Label(terminal_frame, text="üìä –¢–ï–†–ú–ò–ù–ê–õ", 
                                 font=("Arial", 12, "bold"),
                                 fg="#06b6d4", 
                                 bg="#0a0a0a")
        terminal_header.pack(anchor=tk.W, pady=(0, 10))
        
        # –¢–µ—Ä–º–∏–Ω–∞–ª
        self.terminal_text = scrolledtext.ScrolledText(
            terminal_frame,
            width=110,
            height=30,
            font=("Consolas", 12),
            bg="#1a1a1a",
            fg="#ffffff",
            insertbackground="#06b6d4",
            selectbackground="#6366f1",
            relief=tk.FLAT,
            borderwidth=0,
            wrap=tk.WORD
        )
        self.terminal_text.pack(fill=tk.BOTH, expand=True)
        self.terminal_text.config(state=tk.DISABLED)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        self.terminal_text.tag_configure("INFO", foreground="#06b6d4")
        self.terminal_text.tag_configure("SUCCESS", foreground="#10b981")
        self.terminal_text.tag_configure("ERROR", foreground="#ef4444")
        self.terminal_text.tag_configure("SIGNAL", foreground="#f59e0b")
        self.terminal_text.tag_configure("METRICS", foreground="#8b5cf6")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(terminal_frame, bg="#0a0a0a")
        button_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        clear_button = tk.Button(
            button_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª",
            command=self.clear_terminal,
            font=("Arial", 12),
            bg="#6366f1",
            fg="#ffffff",
            relief=tk.FLAT,
            borderwidth=0,
            padx=10
        )
        clear_button.pack(side=tk.RIGHT, padx=5)
    
    def add_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª/—á–∞—Ç (—Å –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–æ–º –∏ —Ü–≤–µ—Ç–æ–º)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not self.terminal_text or not self.terminal_text.winfo_exists():
                return
                
            self.terminal_text.config(state=tk.NORMAL)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
            formatted_message = f"[{timestamp}] {message}\n"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥ –¥–ª—è —Ü–≤–µ—Ç–∞
            self.terminal_text.insert(tk.END, formatted_message, level.upper())
            self.terminal_text.see(tk.END)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            lines = self.terminal_text.get(1.0, tk.END).split('\n')
            if len(lines) > 500:
                self.terminal_text.delete(1.0, f"{len(lines)-500}.0")
            self.terminal_text.config(state=tk.DISABLED)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏ –ò–ò –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            self.message_count += 1
            if self.message_count % 10 == 0:
                self.show_recent_ai_insights()
                
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            pass
    
    def show_recent_ai_insights(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏ –ò–ò"""
        if self.ai_analysis_engine:
            insights = self.ai_analysis_engine.get_recent_insights(3)
            if insights:
                self.add_message("üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏ –ò–ò:", "INFO")
                for insight in insights:
                    self.add_message(f"   ‚Ä¢ {insight}", "INFO")
    
    def clear_terminal(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        if self.terminal_text:
            self.terminal_text.config(state=tk.NORMAL)
            self.terminal_text.delete(1.0, tk.END)
            self.terminal_text.config(state=tk.DISABLED)

class AITradingSystem:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    
    def __init__(self, log_callback: Optional[Callable] = None):
        self.log_callback = log_callback
        self.trading_history = []
        self.learning_insights = []
        self.current_market_analysis = {}
        self.decision_reasons = {}
        
    def analyze_market_conditions(self, symbol: str, price: float, volume: float, change_24h: float) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"""
        analysis = {
            'symbol': symbol,
            'price': price,
            'volume': volume,
            'change_24h': change_24h,
            'market_sentiment': 'neutral',
            'volatility': 'low',
            'trend_strength': 'weak',
            'risk_level': 'medium',
            'opportunity_score': 0.0,
            'recommendation': 'HOLD',
            'confidence': 0.0,
            'reasoning': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
        if change_24h > 5:
            analysis['market_sentiment'] = 'bullish'
            analysis['reasoning'].append(f"üìà –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∑–∞ 24—á: +{change_24h:.1f}%")
        elif change_24h < -5:
            analysis['market_sentiment'] = 'bearish'
            analysis['reasoning'].append(f"üìâ –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞ 24—á: {change_24h:.1f}%")
        else:
            analysis['reasoning'].append(f"‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫: {change_24h:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if abs(change_24h) > 10:
            analysis['volatility'] = 'high'
            analysis['reasoning'].append("‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫")
        elif abs(change_24h) > 5:
            analysis['volatility'] = 'medium'
            analysis['reasoning'].append("üìä –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        else:
            analysis['reasoning'].append("üõ°Ô∏è –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
        if volume > 100000000:  # 100M+
            analysis['reasoning'].append("üí∞ –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ - —Å–∏–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
            analysis['opportunity_score'] += 0.2
        elif volume < 10000000:  # 10M-
            analysis['reasoning'].append("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
            analysis['opportunity_score'] -= 0.1
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        if change_24h > 3:
            analysis['trend_strength'] = 'strong_up'
            analysis['reasoning'].append("üöÄ –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            analysis['opportunity_score'] += 0.3
        elif change_24h < -3:
            analysis['trend_strength'] = 'strong_down'
            analysis['reasoning'].append("üîª –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            analysis['opportunity_score'] += 0.2
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
        if analysis['volatility'] == 'high':
            analysis['risk_level'] = 'high'
        elif analysis['volatility'] == 'low':
            analysis['risk_level'] = 'low'
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis['opportunity_score'] > 0.3:
            if analysis['market_sentiment'] == 'bullish':
                analysis['recommendation'] = 'LONG'
                analysis['confidence'] = min(0.9, 0.5 + analysis['opportunity_score'])
                analysis['reasoning'].append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É—é LONG - –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
            elif analysis['market_sentiment'] == 'bearish':
                analysis['recommendation'] = 'SHORT'
                analysis['confidence'] = min(0.9, 0.5 + analysis['opportunity_score'])
                analysis['reasoning'].append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É—é SHORT - –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        else:
            analysis['reasoning'].append("‚è∏Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é HOLD - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        return analysis
    
    def make_trading_decision(self, symbol: str, price_data: Dict) -> Dict:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        analysis = self.analyze_market_conditions(
            symbol, 
            price_data['current'], 
            price_data['volume_24h'], 
            price_data['change_24h']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        self.current_market_analysis[symbol] = analysis
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if self.log_callback:
            self.log_callback(f"üß† –ê–Ω–∞–ª–∏–∑ {symbol}:", "INFO")
            for reason in analysis['reasoning']:
                self.log_callback(f"   {reason}", "INFO")
            self.log_callback(f"   –†–µ—à–µ–Ω–∏–µ: {analysis['recommendation']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.1%})", "SIGNAL")
        
        return analysis
    
    def learn_from_trade(self, trade_result: Dict):
        """–£—á–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        insight = {
            'timestamp': datetime.now().isoformat(),
            'symbol': trade_result['symbol'],
            'entry_price': trade_result['entry_price'],
            'exit_price': trade_result['exit_price'],
            'pnl': trade_result['pnl'],
            'pnl_pct': trade_result['pnl_pct'],
            'duration': trade_result['duration'],
            'analysis_at_entry': trade_result.get('analysis_at_entry', {}),
            'lessons_learned': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if trade_result['pnl_pct'] > 0:
            insight['lessons_learned'].append("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞ - —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏")
            if trade_result['pnl_pct'] > 2:
                insight['lessons_learned'].append("üéØ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
        else:
            insight['lessons_learned'].append("‚ùå –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞ - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—Ö–æ–¥–∞")
            if trade_result['pnl_pct'] < -2:
                insight['lessons_learned'].append("‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if trade_result['duration'] < 300:  # 5 –º–∏–Ω—É—Ç
            insight['lessons_learned'].append("‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–¥–µ–ª–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–ª—å—à–µ –¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é")
        elif trade_result['duration'] > 3600:  # 1 —á–∞—Å
            insight['lessons_learned'].append("‚è∞ –î–æ–ª–≥–∞—è —Å–¥–µ–ª–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å")
        
        self.learning_insights.append(insight)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Ä–æ–∫
        if self.log_callback:
            self.log_callback(f"üìö –£—Ä–æ–∫ –ø–æ {trade_result['symbol']}:", "INFO")
            for lesson in insight['lessons_learned']:
                self.log_callback(f"   {lesson}", "INFO")
    
    def get_recent_insights(self, limit: int = 5) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏"""
        recent_insights = []
        for insight in self.learning_insights[-limit:]:
            for lesson in insight['lessons_learned']:
                recent_insights.append(f"{insight['symbol']}: {lesson}")
        return recent_insights

class TradingOpportunityFinder:
    """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self, log_callback: Optional[Callable] = None):
        self.log_callback = log_callback
    
    def search_trading_opportunities(self, prices: Dict):
        """–ò—â–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            opportunities = []
            
            for symbol, price_data in prices.items():
                # –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                change_24h = price_data['change_24h']
                volume = price_data['volume_24h']
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: —Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                if change_24h > 5 and volume > 50000000:  # 5% —Ä–æ—Å—Ç + 50M –æ–±—ä–µ–º
                    opportunities.append(f"üöÄ {symbol}: –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{change_24h:.1f}% (–æ–±—ä–µ–º: ${volume/1e6:.1f}M)")
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                elif change_24h < -5 and volume > 50000000:  # 5% –ø–∞–¥–µ–Ω–∏–µ + 50M –æ–±—ä–µ–º
                    opportunities.append(f"üìâ {symbol}: –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {change_24h:.1f}% (–æ–±—ä–µ–º: ${volume/1e6:.1f}M)")
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç: —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                elif change_24h > 15:  # –ë–æ–ª–µ–µ 15% —Ä–æ—Å—Ç–∞ - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç
                    opportunities.append(f"‚ö†Ô∏è {symbol}: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{change_24h:.1f}% - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç")
                elif change_24h < -15:  # –ë–æ–ª–µ–µ 15% –ø–∞–¥–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç
                    opportunities.append(f"‚ö†Ô∏è {symbol}: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {change_24h:.1f}% - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if opportunities:
                if self.log_callback:
                    self.log_callback("üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", "SIGNAL")
                    for opp in opportunities[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                        self.log_callback(f"   ‚Ä¢ {opp}", "INFO")
            else:
                if self.log_callback:
                    self.log_callback("üîç –¢–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∂–¥—É –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π", "INFO")
                    
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            pass
    
    def add_simple_market_analysis(self, prices: Dict, log_callback: Callable):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (fallback)"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            positive_count = sum(1 for data in prices.values() if data['change_24h'] > 0)
            negative_count = sum(1 for data in prices.values() if data['change_24h'] < 0)
            total_coins = len(prices)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
            if positive_count > total_coins * 0.6:
                sentiment = "üìà –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫"
                analysis = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —Ä–∞—Å—Ç—É—Ç, –∏—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π"
            elif negative_count > total_coins * 0.6:
                sentiment = "üìâ –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫"
                analysis = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø–∞–¥–∞—é—Ç, –∏—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"
            else:
                sentiment = "‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫"
                analysis = "–†—ã–Ω–æ–∫ –≤ –±–æ–∫–æ–≤–∏–∫–µ, –∂–¥—É —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞"
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-–º–æ–Ω–µ—Ç—ã
            sorted_coins = sorted(prices.items(), key=lambda x: abs(x[1]['change_24h']), reverse=True)
            top_volatile = [f"{symbol}: {data['change_24h']:+.1f}%" for symbol, data in sorted_coins[:3]]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üß† –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: {sentiment} | {analysis} | –¢–æ–ø –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {' | '.join(top_volatile)}"
            log_callback(message, "SIGNAL")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            self.search_trading_opportunities(prices)
            
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
            pass
    
    def add_market_summary(self, prices: Dict, log_callback: Callable):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä—ã–Ω–∫—É"""
        try:
            positive_count = sum(1 for data in prices.values() if data['change_24h'] > 0)
            negative_count = sum(1 for data in prices.values() if data['change_24h'] < 0)
            total_coins = len(prices)
            
            summary = f"üìä –°–≤–æ–¥–∫–∞: –†–æ—Å—Ç: {positive_count} | –ü–∞–¥–µ–Ω–∏–µ: {negative_count} | –í—Å–µ–≥–æ: {total_coins}"
            log_callback(summary, "METRICS")
            
            if positive_count > negative_count * 1.5:
                log_callback("üéØ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ë–´–ß–¨–ï", "SIGNAL")
            elif negative_count > positive_count * 1.5:
                log_callback("üéØ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ú–ï–î–í–ï–ñ–¨–ï", "SIGNAL")
            else:
                log_callback("üéØ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ù–ï–ô–¢–†–ê–õ–¨–ù–û–ï", "INFO")
                
        except Exception as e:
            # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞
            pass 