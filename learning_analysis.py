"""
üìä –ê–Ω–∞–ª–∏–∑ –æ–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, —á–µ–º—É –Ω–∞—É—á–∏–ª—Å—è –±–æ—Ç –∑–∞ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
"""

import json
import numpy as np
from collections import defaultdict, Counter
from datetime import datetime

def analyze_learning_progress():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞"""
    
    print("üß† –ê–ù–ê–õ–ò–ó –û–ë–£–ß–ï–ù–ò–Ø –ê–í–¢–û–ù–û–ú–ù–û–ô –ù–ï–ô–†–û–°–ï–¢–ò")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        with open('final_neural_network_state.json', 'r') as f:
            nn_state = json.load(f)
        
        learning_stats = nn_state.get('learning_stats', {})
        experience_memory = nn_state.get('experience_memory', [])
        
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {learning_stats.get('cycles_completed', 0)}")
        print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${learning_stats.get('total_profit', 0):.2f}")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {learning_stats.get('max_drawdown', 0):.1%}")
        print(f"üéØ –¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {learning_stats.get('win_rate_history', [0])[-1]:.1%}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {np.mean(learning_stats.get('win_rate_history', [0])):.1%}")
        print(f"üß† –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –æ–ø—ã—Ç–∞: {len(experience_memory)} –∑–∞–ø–∏—Å–µ–π")
        
        print("\n" + "=" * 60)
        print("üéØ –ê–ù–ê–õ–ò–ó –†–ï–®–ï–ù–ò–ô –ò –°–¢–†–ê–¢–ï–ì–ò–ô:")
        
        if experience_memory:
            # –ê–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π
            actions = [exp['decision']['action'] for exp in experience_memory]
            action_counts = Counter(actions)
            print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:")
            for action, count in action_counts.most_common():
                percentage = (count / len(actions)) * 100
                print(f"   {action.upper()}: {count} —Ä–∞–∑ ({percentage:.1f}%)")
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            timeframes = [exp['decision']['timeframe'] for exp in experience_memory]
            timeframe_counts = Counter(timeframes)
            print(f"\nüìà –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:")
            for tf, count in timeframe_counts.most_common():
                percentage = (count / len(timeframes)) * 100
                print(f"   {tf}: {count} —Ä–∞–∑ ({percentage:.1f}%)")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–ª–µ—á–∞
            leverages = [exp['decision']['leverage'] for exp in experience_memory]
            avg_leverage = np.mean(leverages)
            max_leverage = max(leverages)
            min_leverage = min(leverages)
            print(f"\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø–ª–µ—á–∞:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ: {avg_leverage:.1f}x")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {max_leverage}x")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {min_leverage}x")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
            position_sizes = [exp['decision']['position_size'] for exp in experience_memory]
            avg_position_size = np.mean(position_sizes)
            max_position_size = max(position_sizes)
            min_position_size = min(position_sizes)
            print(f"\nüí∞ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π:")
            print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_position_size:.1%}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_position_size:.1%}")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {min_position_size:.1%}")
            
            # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidences = [exp['decision']['confidence'] for exp in experience_memory]
            avg_confidence = np.mean(confidences)
            print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            print(f"\nüíπ –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º:")
            action_profits = defaultdict(list)
            for exp in experience_memory:
                action = exp['decision']['action']
                profit = exp['result']['profit']
                action_profits[action].append(profit)
            
            for action, profits in action_profits.items():
                avg_profit = np.mean(profits)
                win_rate = sum(1 for p in profits if p > 0) / len(profits)
                print(f"   {action.upper()}: —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å ${avg_profit:.2f}, –≤–∏–Ω—Ä–µ–π—Ç {win_rate:.1%}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            print(f"\nüìà –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
            tf_profits = defaultdict(list)
            for exp in experience_memory:
                tf = exp['decision']['timeframe']
                profit = exp['result']['profit']
                tf_profits[tf].append(profit)
            
            for tf, profits in tf_profits.items():
                avg_profit = np.mean(profits)
                win_rate = sum(1 for p in profits if p > 0) / len(profits)
                print(f"   {tf}: —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å ${avg_profit:.2f}, –≤–∏–Ω—Ä–µ–π—Ç {win_rate:.1%}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –≤—ã—Ö–æ–¥–∞
            exit_reasons = [exp['result']['exit_reason'] for exp in experience_memory]
            exit_counts = Counter(exit_reasons)
            print(f"\nüö™ –ü—Ä–∏—á–∏–Ω—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π:")
            for reason, count in exit_counts.most_common():
                percentage = (count / len(exit_reasons)) * 100
                print(f"   {reason}: {count} —Ä–∞–∑ ({percentage:.1f}%)")
            
            # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö —Å–¥–µ–ª–æ–∫
            profits = [exp['result']['profit'] for exp in experience_memory]
            best_trades = sorted(experience_memory, key=lambda x: x['result']['profit'], reverse=True)[:5]
            worst_trades = sorted(experience_memory, key=lambda x: x['result']['profit'])[:5]
            
            print(f"\nüèÜ –¢–û–ü-5 –õ–£–ß–®–ò–• –°–î–ï–õ–û–ö:")
            for i, trade in enumerate(best_trades, 1):
                decision = trade['decision']
                result = trade['result']
                print(f"   {i}. {decision['action'].upper()} {decision['timeframe']}: "
                      f"${result['profit']:.2f} (–ø–ª–µ—á–æ {decision['leverage']}x, "
                      f"—Ä–∞–∑–º–µ—Ä {decision['position_size']:.1%})")
            
            print(f"\nüí• –¢–û–ü-5 –•–£–î–®–ò–• –°–î–ï–õ–û–ö:")
            for i, trade in enumerate(worst_trades, 1):
                decision = trade['decision']
                result = trade['result']
                print(f"   {i}. {decision['action'].upper()} {decision['timeframe']}: "
                      f"${result['profit']:.2f} (–ø–ª–µ—á–æ {decision['leverage']}x, "
                      f"—Ä–∞–∑–º–µ—Ä {decision['position_size']:.1%})")
            
            # –ê–Ω–∞–ª–∏–∑ —ç–≤–æ–ª—é—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            print(f"\nüîÑ –≠–í–û–õ–Æ–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ò:")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä–∞–Ω–Ω–∏–µ –∏ –ø–æ–∑–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            mid_point = len(experience_memory) // 2
            early_trades = experience_memory[:mid_point]
            late_trades = experience_memory[mid_point:]
            
            if early_trades and late_trades:
                early_avg_leverage = np.mean([t['decision']['leverage'] for t in early_trades])
                late_avg_leverage = np.mean([t['decision']['leverage'] for t in late_trades])
                early_avg_position = np.mean([t['decision']['position_size'] for t in early_trades])
                late_avg_position = np.mean([t['decision']['position_size'] for t in late_trades])
                early_win_rate = sum(1 for t in early_trades if t['result']['profit'] > 0) / len(early_trades)
                late_win_rate = sum(1 for t in late_trades if t['result']['profit'] > 0) / len(late_trades)
                
                print(f"   –†–∞–Ω–Ω–∏–µ —Å–¥–µ–ª–∫–∏: –ø–ª–µ—á–æ {early_avg_leverage:.1f}x, —Ä–∞–∑–º–µ—Ä {early_avg_position:.1%}, –≤–∏–Ω—Ä–µ–π—Ç {early_win_rate:.1%}")
                print(f"   –ü–æ–∑–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏: –ø–ª–µ—á–æ {late_avg_leverage:.1f}x, —Ä–∞–∑–º–µ—Ä {late_avg_position:.1%}, –≤–∏–Ω—Ä–µ–π—Ç {late_win_rate:.1%}")
                
                leverage_change = late_avg_leverage - early_avg_leverage
                position_change = late_avg_position - early_avg_position
                win_rate_change = late_win_rate - early_win_rate
                
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
                print(f"     –ü–ª–µ—á–æ: {'—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å' if leverage_change > 0 else '—É–º–µ–Ω—å—à–∏–ª–æ—Å—å'} –Ω–∞ {abs(leverage_change):.1f}x")
                print(f"     –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π: {'—É–≤–µ–ª–∏—á–∏–ª—Å—è' if position_change > 0 else '—É–º–µ–Ω—å—à–∏–ª—Å—è'} –Ω–∞ {abs(position_change):.1%}")
                print(f"     –í–∏–Ω—Ä–µ–π—Ç: {'—É–ª—É—á—à–∏–ª—Å—è' if win_rate_change > 0 else '—É—Ö—É–¥—à–∏–ª—Å—è'} –Ω–∞ {abs(win_rate_change):.1%}")
        
        print("\n" + "=" * 60)
        print("üéØ –í–´–í–û–î–´ –û–ë –û–ë–£–ß–ï–ù–ò–ò:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        weights = nn_state.get('weights', {})
        if weights:
            print("üß† –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:")
            for category, weight_list in weights.items():
                avg_weight = np.mean(weight_list)
                max_weight = max(weight_list)
                min_weight = min(weight_list)
                print(f"   {category}: —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å {avg_weight:.3f} (–¥–∏–∞–ø–∞–∑–æ–Ω {min_weight:.3f} - {max_weight:.3f})")
        
        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
        current_win_rate = learning_stats.get('win_rate_history', [0])[-1]
        avg_win_rate = np.mean(learning_stats.get('win_rate_history', [0]))
        total_profit = learning_stats.get('total_profit', 0)
        
        print(f"\nüìä –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"   –¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {current_win_rate:.1%}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_win_rate:.1%}")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
        
        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –í–´–í–û–î–´ –ù–ê –û–°–ù–û–í–ï –ù–û–í–´–• –î–ê–ù–ù–´–•
        print(f"\nüéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –í–´–í–û–î–´:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏–∫–ª—ã –∏–∑ –ª–æ–≥–æ–≤
        print("üìà –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –¶–ò–ö–õ–û–í:")
        print("   ‚Ä¢ –¶–∏–∫–ª 38001: –≤–∏–Ω—Ä–µ–π—Ç 54.0%, –ø—Ä–∏–±—ã–ª—å $35.39")
        print("   ‚Ä¢ –¶–∏–∫–ª 38002: –≤–∏–Ω—Ä–µ–π—Ç 62.0%, –ø—Ä–∏–±—ã–ª—å $41.93") 
        print("   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏–∫–ª–æ–≤: 56.0%")
        print("   ‚Ä¢ –õ—É—á—à–∏–π –≤–∏–Ω—Ä–µ–π—Ç –Ω–∞ 1M: 62.4%")
        print("   ‚Ä¢ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: $3.28 (–ø—Ä–æ—Å–∞–¥–∫–∞ -96.72)")
        
        if current_win_rate >= 0.65:
            print("‚úÖ –ë–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞ 65%+!")
        elif current_win_rate >= 0.55:
            print(f"üéØ –ë–æ—Ç –±–ª–∏–∑–æ–∫ –∫ —Ü–µ–ª–µ–≤–æ–º—É –≤–∏–Ω—Ä–µ–π—Ç—É! –¢–µ–∫—É—â–∏–π: {current_win_rate:.1%}, —Ü–µ–ª—å: 65%")
            print("   ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
            print("   ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç —Ä–∞—Å—Ç–µ—Ç —Ü–∏–∫–ª–∏—á–Ω–æ")
            print("   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å –Ω–∞ —Ü–∏–∫–ª: $30-45")
            print("   ‚Ä¢ –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å")
        else:
            print(f"üîÑ –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ. –¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {current_win_rate:.1%}")
            print("   ‚Ä¢ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏")
            print("   ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"\nüöÄ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü–†–û–î–û–õ–ñ–ò–¢–¨ –û–ë–£–ß–ï–ù–ò–ï - –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
        print("   2. –£–í–ï–õ–ò–ß–ò–¢–¨ –ö–û–õ–ò–ß–ï–°–¢–í–û –¶–ò–ö–õ–û–í - –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞")
        print("   3. –§–û–ö–£–° –ù–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ - —Å–Ω–∏–∑–∏—Ç—å –ø—Ä–æ—Å–∞–¥–∫—É")
        print("   4. –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–¢–¨ –ü–õ–ï–ß–û - –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ")
        print("   5. –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨ –õ–£–ß–®–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò - –∏–∑—É—á–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        
        print(f"\nüìä –¶–ï–õ–ò –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –≠–¢–ê–ü:")
        print("   ‚Ä¢ –î–æ—Å—Ç–∏—á—å –≤–∏–Ω—Ä–µ–π—Ç–∞ 65%+ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print("   ‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –ø—Ä–æ—Å–∞–¥–∫—É –¥–æ 50%")
        print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Ü–∏–∫–ª –¥–æ $50+")
        print("   ‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç—å 100+ –∑–∞–ø–∏—Å–µ–π –æ–ø—ã—Ç–∞")
        
        print(f"\n‚ö° –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("   ‚Ä¢ –ò–∑—É—á–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π")
        print("   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        print("   ‚Ä¢ –†–∞–∑–≤–∏—Ç—å –∏–Ω—Ç—É–∏—Ü–∏—é —Ä—ã–Ω–∫–∞")
        
        return {
            'current_win_rate': current_win_rate,
            'avg_win_rate': avg_win_rate,
            'total_profit': total_profit,
            'experience_size': len(experience_memory),
            'recommendations': [
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞",
                "–§–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ",
                "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"
            ]
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_learning_progress() 