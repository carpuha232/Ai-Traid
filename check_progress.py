"""
üìä –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞
"""

import json
import os
from datetime import datetime

def check_learning_progress():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üìä –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø –ë–û–¢–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_files = [
        'progressive_learning_state.json',
        'learning_engine_state.json', 
        'final_neural_network_state.json'
    ]
    
    for file_name in state_files:
        if os.path.exists(file_name):
            file_size = os.path.getsize(file_name)
            mod_time = datetime.fromtimestamp(os.path.getmtime(file_name))
            print(f"‚úÖ {file_name}: {file_size:,} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω: {mod_time.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print(f"‚ùå {file_name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n" + "=" * 50)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    try:
        with open('final_neural_network_state.json', 'r') as f:
            nn_state = json.load(f)
        
        learning_stats = nn_state.get('learning_stats', {})
        
        print("üß† –°–û–°–¢–û–Ø–ù–ò–ï –ù–ï–ô–†–û–°–ï–¢–ò:")
        print(f"üìà –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {learning_stats.get('cycles_completed', 0)}")
        print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${learning_stats.get('total_profit', 0):.2f}")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {learning_stats.get('max_drawdown', 0):.1%}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞
        win_rate_history = learning_stats.get('win_rate_history', [])
        if win_rate_history:
            current_win_rate = win_rate_history[-1]
            avg_win_rate = sum(win_rate_history) / len(win_rate_history)
            print(f"üéØ –¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {current_win_rate:.1%}")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_win_rate:.1%}")
            print(f"üìà –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç–∞: {len(win_rate_history)}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
        capital_history = learning_stats.get('capital_history', [])
        if capital_history:
            current_capital = capital_history[-1]
            initial_capital = capital_history[0]
            print(f"üí∞ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${current_capital:.2f}")
            print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞: ${current_capital - initial_capital:.2f}")
            print(f"üìä –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∫–∞–ø–∏—Ç–∞–ª–∞: {len(capital_history)}")
        
        # –ü–∞–º—è—Ç—å –æ–ø—ã—Ç–∞
        experience_memory = nn_state.get('experience_memory', [])
        print(f"üß† –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –æ–ø—ã—Ç–∞: {len(experience_memory)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
    
    print("\n" + "=" * 50)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    try:
        with open('learning_engine_state.json', 'r') as f:
            engine_state = json.load(f)
        
        print("‚öôÔ∏è –°–û–°–¢–û–Ø–ù–ò–ï –î–í–ò–ñ–ö–ê –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"üîÑ –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª: {engine_state.get('current_cycle', 0)}")
        print(f"üìä –¢–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {engine_state.get('current_timeframe', 'N/A')}")
        print(f"üìà –ò–Ω–¥–µ–∫—Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {engine_state.get('current_timeframe_index', 0)}")
        print(f"üîÑ –¢–µ–∫—É—â–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {engine_state.get('current_restart', 0)}")
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        timeframe_history = engine_state.get('timeframe_history', [])
        if timeframe_history:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {len(timeframe_history)}")
            for record in timeframe_history[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"   üìä {record.get('timeframe', 'N/A')}: —Ü–∏–∫–ª {record.get('cycle', 0)}, –∫–∞–ø–∏—Ç–∞–ª ${record.get('capital', 0):.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–∫–∞: {e}")
    
    print("\n" + "=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data_dir = '.venv/data/historical'
    if os.path.exists(data_dir):
        data_files = [f for f in os.listdir(data_dir) if f.endswith('.zip')]
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(data_files)}")
        if data_files:
            print("üìä –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
            for file in data_files[:5]:
                print(f"   üìÑ {file}")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if __name__ == "__main__":
    check_learning_progress() 